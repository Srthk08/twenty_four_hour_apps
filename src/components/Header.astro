<header class="bg-blue-600 shadow-xl border-b border-blue-700">
  <div class="max-w-7xl mx-auto px-6 sm:px-8 lg:px-12">
    <div class="flex justify-between items-center h-24">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-4">
          <div class="w-14 h-14 bg-white bg-opacity-20 rounded-2xl flex items-center justify-center backdrop-blur-sm">
            <span class="text-white font-bold text-xl">24</span>
          </div>
          <div>
            <span class="text-3xl font-bold text-white">DevExpress</span>
            <p class="text-white text-opacity-90 -mt-1 font-medium">24 Hour Delivery</p>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation - Hidden on mobile -->
      <nav id="main-navigation" class="hidden lg:flex items-center space-x-10">
        <a href="/" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Home
        </a>
        <a href="/products" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Products
        </a>
        <a href="/about" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          About
        </a>
        <a href="/contact" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Contact
        </a>
      </nav>

      <!-- User Menu / Auth Buttons - Hidden on mobile -->
      <div class="hidden lg:flex items-center space-x-6 relative" style="min-width: 300px; height: 60px;">
        <!-- Loading state (hidden by default) -->
        <div id="auth-loading" class="hidden absolute right-0 top-1/2 transform -translate-y-1/2">
          <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm">
            <div class="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          </div>
        </div>

        <!-- Auth Buttons - Only visible before login -->
        <div id="auth-buttons" class="hidden absolute right-0 top-1/2 transform -translate-y-1/2 flex items-center space-x-4" style="opacity: 1 !important; transition: none !important;">
          <a href="/login" class="text-white text-opacity-90 hover:text-white px-6 py-2 text-base font-medium transition-all duration-300 rounded-lg hover:bg-white hover:bg-opacity-20 hover:scale-105">
            Sign In
          </a>
          <a href="/signup" class="text-white text-opacity-90 hover:text-white px-6 py-2 text-base font-medium transition-all duration-300 rounded-lg hover:bg-white hover:bg-opacity-20 hover:scale-105">
            Sign Up
          </a>
        </div>

        <!-- User Menu - Only visible after login -->
        <div id="user-menu" class="hidden absolute right-0 top-1/2 transform -translate-y-1/2 relative">
          <button
            id="user-menu-button"
            class="flex items-center space-x-3 text-white hover:text-white transition-all duration-300 bg-white bg-opacity-20 hover:bg-opacity-30 px-6 py-3 rounded-xl backdrop-blur-sm"
          >
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm">
              <span id="user-avatar" class="text-white font-bold text-lg">U</span>
            </div>
            <span id="user-name" class="hidden lg:block text-lg font-medium text-white">User</span>
            <svg id="user-menu-arrow" class="w-6 h-6 text-white transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          <!-- Dropdown Menu -->
          <div
            id="user-dropdown"
            class="hidden absolute right-0 mt-20 w-72 bg-white rounded-2xl shadow-2xl py-3 z-50 border border-gray-100"
          >
            <div class="px-6 py-4 border-b border-gray-100 bg-blue-50 rounded-t-2xl">
              <p class="text-sm text-gray-500">Signed in as</p>
              <p class="text-sm font-normal text-gray-900 break-all overflow-hidden" id="user-email" title="user@example.com">user@example.com</p>
            </div>
            <a href="/dashboard" id="dashboard-link" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z"></path>
              </svg>
              Dashboard
            </a>
            <a href="/profile" id="profile-link" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              Profile
            </a>
            <a href="/orders" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              My Orders
            </a>
            <a href="/support" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Support
            </a>
            <!-- Menu Operator Link - Only visible for menu operator users -->
            <div id="menu-operator-link" class="hidden">
              <a href="/menu-operator" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
                <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                Menu Operator Dashboard
              </a>
            </div>
            <!-- Admin Panel Link - Only visible for admin users -->
            <div id="admin-panel-link" class="hidden">
              <a href="/admin/data" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
                <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                Admin Panel
              </a>
            </div>
            <div class="px-4 pt-4 pb-6 space-y-2 border-t border-gray-100">
              <button
                onclick="signOut()"
                class="w-full flex items-center px-6 py-4 text-base text-red-600 hover:bg-red-50 hover:text-red-700 transition-all duration-200 rounded-xl"
              >
                <svg class="w-6 h-6 mr-4 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden flex items-center text-white hover:text-white transition-all duration-300 bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-3 rounded-xl backdrop-blur-sm"
        aria-label="Toggle mobile menu"
      >
        <svg id="mobile-menu-icon" class="w-6 h-6 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu - Enhanced with all navigation options -->
    <div id="mobile-menu" class="hidden lg:hidden">
      <div class="pt-8 pb-8 px-0">
        <!-- Main Navigation Links - Clean layout without icons for non-logged users -->
        <div class="space-y-8 mb-20">
          <a href="/" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
            Home
          </a>
          <a href="/products" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
            Products
          </a>
          <a href="/about" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
            About
          </a>
          <a href="/contact" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
            Contact
          </a>
        </div>

        <!-- Auth Section - Much further down to prevent overlap -->
        <div class="mt-16 space-y-8">
          <!-- Loading State -->
          <div id="mobile-auth-loading" class="hidden px-6">
            <div class="flex items-center justify-center">
              <div class="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span class="ml-3 text-white text-opacity-90">Loading...</span>
            </div>
          </div>

          <!-- Auth Buttons - Only visible before login -->
          <div id="mobile-auth-buttons" class="hidden space-y-8" style="opacity: 1 !important; transition: none !important;">
            <!-- Sign In - Simple text button -->
            <a href="/login" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
              Sign In
            </a>
            <!-- Sign Up - Simple text button (no background) -->
            <a href="/signup" class="block px-6 py-4 text-2xl font-light text-white hover:text-white transition-all duration-300">
              Sign Up
            </a>
          </div>

          <!-- User Menu - Only visible after login -->
          <div id="mobile-user-menu" class="hidden space-y-1">
            <!-- User Info Section -->
            <div class="px-6 py-4 border-t border-white border-opacity-20 mt-4">
              <p class="text-lg text-white text-opacity-70">Signed in as</p>
              <p class="text-2xl font-light text-white break-all overflow-hidden" id="mobile-user-email" title="user@example.com">sarthak21042@gmail.com</p>
            </div>

            <!-- User Menu Items -->
            <a href="/dashboard" id="mobile-dashboard-link" class="flex items-center px-6 py-4 text-2xl font-light text-white hover:text-white hover:bg-white hover:bg-opacity-20 transition-all duration-300">
              <svg class="w-5 h-5 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z"></path>
              </svg>
              <span class="flex-1">Dashboard</span>
            </a>
            
            <a href="/profile" id="mobile-profile-link" class="flex items-center px-6 py-4 text-2xl font-light text-white hover:text-white hover:bg-white hover:bg-opacity-20 transition-all duration-300">
              <svg class="w-5 h-5 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              <span class="flex-1">Profile</span>
            </a>
            
            <a href="/orders" class="flex items-center px-6 py-4 text-2xl font-light text-white hover:text-white hover:bg-white hover:bg-opacity-20 transition-all duration-300">
              <svg class="w-5 h-5 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span class="flex-1">My Orders</span>
            </a>
            
            <a href="/support" class="flex items-center px-6 py-4 text-2xl font-light text-white hover:text-white hover:bg-white hover:bg-opacity-20 transition-all duration-300">
              <svg class="w-5 h-5 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span class="flex-1">Support</span>
            </a>
            <!-- Menu Operator Link - Only visible for menu operator users -->
            <div id="mobile-menu-operator-link" class="hidden">
              <a href="/menu-operator" class="flex items-center w-full px-4 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
                <svg class="w-6 h-6 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span class="flex-1">Menu Operator Dashboard</span>
              </a>
            </div>
            <!-- Admin Panel Link - Only visible for admin users -->
            <div id="mobile-admin-panel-link" class="hidden">
              <a href="/admin/data" class="flex items-center w-full px-4 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
                <svg class="w-6 h-6 mr-4 text-white text-opacity-70 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                <span class="flex-1">Admin Panel</span>
              </a>
            </div>

            <!-- Sign Out Button -->
            <button
              onclick="signOut()"
              class="w-full flex items-center px-6 py-4 text-2xl font-light text-red-400 hover:text-red-300 hover:bg-red-500 hover:bg-opacity-20 transition-all duration-300"
            >
              <svg class="w-5 h-5 mr-4 text-red-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
              </svg>
              <span class="flex-1 text-left">Sign Out</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  /* Email text overflow handling */
  #user-email, #mobile-user-email {
    word-break: break-all;
    overflow-wrap: break-word;
    hyphens: auto;
    max-width: 100%;
    line-height: 1.4;
  }
  
  /* Mobile responsive fixes */
  @media (max-width: 1024px) {
    /* Mobile menu container */
    #mobile-menu {
      position: relative;
      z-index: 50;
    }
    
    /* Mobile auth section */
    #mobile-auth-buttons, #mobile-user-menu {
      position: relative;
      width: 100%;
      display: block;
    }
    
    /* Mobile auth buttons */
    #mobile-auth-buttons a {
      width: 100%;
      display: block;
      text-align: left;
      margin-bottom: 0.75rem;
      position: relative;
      z-index: 10;
    }
    
    /* Mobile user menu items */
    #mobile-user-menu a, #mobile-user-menu button {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      margin-bottom: 0.5rem;
    }
    
    /* Prevent text overlapping */
    #mobile-user-menu a span, #mobile-user-menu button span {
      flex: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    /* Mobile user info */
    #mobile-user-email {
      word-break: break-all;
      overflow-wrap: break-word;
      max-width: 100%;
    }
    
    /* Mobile menu spacing */
    #mobile-menu .space-y-3 > * + * {
      margin-top: 0.75rem;
    }
  }
  
  /* Ensure dropdown doesn't get too wide on mobile */
  @media (max-width: 640px) {
    #user-dropdown {
      width: calc(100vw - 2rem);
      right: 1rem;
      left: 1rem;
    }
  }
  
  /* Prevent navbar flashing during navigation - removed transitions to prevent movement */
  #auth-buttons, #user-menu, #mobile-auth-buttons, #mobile-user-menu {
    /* No transitions to prevent layout shifts */
  }
  
  /* Ensure smooth transitions between states */
  #auth-loading, #mobile-auth-loading {
    transition: opacity 0.2s ease-in-out;
  }
  
  /* Fix navbar positioning - ensure consistent layout */
  #main-navigation {
    position: relative;
    z-index: 1;
  }
  
  /* Ensure auth section maintains proper positioning and prevents layout shifts */
  .hidden.lg\\:flex.items-center.space-x-6 {
    position: relative;
    z-index: 1;
    min-height: 60px; /* Ensure consistent height */
    display: flex !important; /* Always maintain flex layout */
    align-items: center;
    justify-content: flex-end;
  }
  
  /* Prevent navbar elements from moving during state changes - use absolute positioning */
  #auth-buttons, #user-menu, #auth-loading {
    transition: none !important; /* Remove transitions that cause movement */
    position: absolute !important;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
  }
  
  /* Ensure mobile auth section also maintains layout */
  #mobile-auth-loading {
    transition: none !important;
  }
  
  #mobile-auth-buttons, #mobile-user-menu {
    transition: none !important;
    position: relative !important;
  }
  
        /* Prevent user profile elements from blinking */
        #user-email, #user-name, #user-avatar, #mobile-user-email {
          opacity: 1 !important;
          transition: none !important;
        }

        /* Prevent auth buttons from blinking */
        #auth-buttons, #mobile-auth-buttons {
          opacity: 1 !important;
          transition: none !important;
          visibility: visible !important;
        }

        /* Prevent individual auth button links from blinking */
        #auth-buttons a, #mobile-auth-buttons a {
          opacity: 1 !important;
          transition: none !important;
          visibility: visible !important;
  }
</style>

<script>
  // Immediate script to prevent flashing - runs before DOM is ready
  (function() {
    // CRITICAL: Check auth state with proper validation
    try {
      const sessionData = sessionStorage.getItem('simple-auth-session');
      let isAuthenticated = false;
      let user = null;
      
      // Validate session data properly
      if (sessionData) {
        try {
          const session = JSON.parse(sessionData);
          // Check if session has valid user data AND access token
          if (session.user && session.access_token && session.user.email) {
            isAuthenticated = true;
            user = session.user;
            console.log('✅ Valid authenticated session found');
          } else {
            console.log('❌ Invalid session data - missing user or token');
          }
        } catch (e) {
          console.log('❌ Invalid session data format');
        }
      }
      
      const style = document.createElement('style');
      if (isAuthenticated && user) {
        // User is properly authenticated - show user menu
        style.textContent = `
          #auth-buttons, #mobile-auth-buttons { display: none !important; }
          #user-menu, #mobile-user-menu { display: flex !important; }
          #auth-loading, #mobile-auth-loading { display: none !important; }
          #user-email, #user-name, #user-avatar, #mobile-user-email { opacity: 1 !important; }
        `;
        
        // Pre-populate user info only for authenticated users
        setTimeout(() => {
          const userEmail = document.getElementById('user-email');
          const userName = document.getElementById('user-name');
          const userAvatar = document.getElementById('user-avatar');
          const mobileUserEmail = document.getElementById('mobile-user-email');

          if (userEmail) userEmail.textContent = user.email || '';
          if (userName) userName.textContent = user.full_name || user.email?.split('@')[0] || 'User';
          if (userAvatar) userAvatar.textContent = (user.full_name || user.email || 'U').charAt(0).toUpperCase();
          if (mobileUserEmail) mobileUserEmail.textContent = user.email || '';
        }, 0);
        
        console.log('✅ User authenticated - showing user menu with valid data');
      } else {
        // User is not authenticated - show auth buttons and clear any cached data
        style.textContent = `
          #auth-buttons, #mobile-auth-buttons { display: flex !important; }
          #user-menu, #mobile-user-menu { display: none !important; }
          #auth-loading, #mobile-auth-loading { display: none !important; }
        `;
        console.log('✅ User not authenticated - showing auth buttons');
      }
      document.head.appendChild(style);
      
    } catch (error) {
      console.error('Error setting initial navbar state:', error);
      // Fallback to showing auth buttons
      const style = document.createElement('style');
      style.textContent = `
        #auth-buttons, #mobile-auth-buttons { display: flex !important; }
        #user-menu, #mobile-user-menu { display: none !important; }
        #auth-loading, #mobile-auth-loading { display: none !important; }
      `;
      document.head.appendChild(style);
    }
  })();

  // Global variables
  let isUserMenuOpen = false;
  let isMobileMenuOpen = false;

  // Function to update the header using the global auth manager
  async function updateHeader() {
    try {
      console.log('Header update using global auth manager');
      
      // Get auth state from the global manager
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      if (!authManager) {
        console.log('Global auth manager not available yet, using fallback logic');
        updateHeaderFallback();
        return;
      }

      // Update UI based on authentication state
      authManager.updateHeader();
      
      console.log('✅ Header updated using global auth manager');
      
    } catch (error) {
      console.error('Error in updateHeader:', error);
      updateHeaderFallback();
    }
  }

  // Fallback function when global auth manager is not available
  function updateHeaderFallback() {
    console.log('Using fallback authentication logic');
    
    try {
      // Check sessionStorage for existing session
      const sessionData = sessionStorage.getItem('simple-auth-session');
      const isAuthenticated = sessionData && JSON.parse(sessionData).user;
      let user = null;
      
      if (isAuthenticated) {
        // Use session storage data
        const session = JSON.parse(sessionData);
        user = session.user;
      }
      
      const authButtons = document.getElementById('auth-buttons');
      const userMenu = document.getElementById('user-menu');
      const mobileAuthButtons = document.getElementById('mobile-auth-buttons');
      const mobileUserMenu = document.getElementById('mobile-user-menu');
      
      if (isAuthenticated && user) {
        // User is logged in - hide auth buttons, show user menu
        if (authButtons) {
          authButtons.style.display = 'none';
          authButtons.classList.add('hidden');
        }
        if (userMenu) {
          userMenu.style.display = 'flex';
          userMenu.classList.remove('hidden');
        }
        if (mobileAuthButtons) {
          mobileAuthButtons.style.display = 'none';
          mobileAuthButtons.classList.add('hidden');
        }
        if (mobileUserMenu) {
          mobileUserMenu.style.display = 'block';
          mobileUserMenu.classList.remove('hidden');
        }
        
        // Update user info
        updateUserInfoFallback(user);
        console.log('✅ User logged in - showing user menu');
      } else {
        // User is not logged in - show auth buttons, hide user menu
        if (authButtons) {
          authButtons.style.display = 'flex';
          authButtons.classList.remove('hidden');
        }
        if (userMenu) {
          userMenu.style.display = 'none';
          userMenu.classList.add('hidden');
        }
        if (mobileAuthButtons) {
          mobileAuthButtons.style.display = 'block';
          mobileAuthButtons.classList.remove('hidden');
        }
        if (mobileUserMenu) {
          mobileUserMenu.style.display = 'none';
          mobileUserMenu.classList.add('hidden');
        }
        console.log('✅ User not logged in - showing auth buttons');
      }
      
      console.log('✅ Header updated using fallback logic');
    } catch (error) {
      console.error('Error in fallback update:', error);
      // Default to showing auth buttons if there's an error
      const authButtons = document.getElementById('auth-buttons');
      const userMenu = document.getElementById('user-menu');
      const mobileAuthButtons = document.getElementById('mobile-auth-buttons');
      const mobileUserMenu = document.getElementById('mobile-user-menu');
      
      if (authButtons) {
        authButtons.style.display = 'flex';
        authButtons.classList.remove('hidden');
      }
      if (userMenu) {
        userMenu.style.display = 'none';
        userMenu.classList.add('hidden');
      }
      if (mobileAuthButtons) {
        mobileAuthButtons.style.display = 'block';
        mobileAuthButtons.classList.remove('hidden');
      }
      if (mobileUserMenu) {
        mobileUserMenu.style.display = 'none';
        mobileUserMenu.classList.add('hidden');
      }
    }
  }

  // Fallback function to update user info - ONLY for authenticated users
  function updateUserInfoFallback(user) {
    // CRITICAL: Only update if user is properly authenticated
    if (!user || !user.email) {
      console.log('❌ No valid user data - clearing UI');
      clearUserInfoFallback();
      return;
    }

    const userEmail = document.getElementById('user-email');
    const userName = document.getElementById('user-name');
    const userAvatar = document.getElementById('user-avatar');
    const mobileUserEmail = document.getElementById('mobile-user-email');

    if (userEmail) userEmail.textContent = user.email || '';
    if (userName) userName.textContent = user.full_name || user.email?.split('@')[0] || 'User';
    if (userAvatar) userAvatar.textContent = (user.full_name || user.email || 'U').charAt(0).toUpperCase();
    if (mobileUserEmail) mobileUserEmail.textContent = user.email || '';
    
    // Update role-based links
    updateRoleBasedLinks(user);
  }

  // Function to clear user info when not authenticated
  function clearUserInfoFallback() {
    const userEmail = document.getElementById('user-email');
    const userName = document.getElementById('user-name');
    const userAvatar = document.getElementById('user-avatar');
    const mobileUserEmail = document.getElementById('mobile-user-email');

    if (userEmail) userEmail.textContent = '';
    if (userName) userName.textContent = 'Guest';
    if (userAvatar) userAvatar.textContent = 'G';
    if (mobileUserEmail) mobileUserEmail.textContent = '';
  }

  // Function to update role-based links - ONLY for authenticated users
  function updateRoleBasedLinks(user) {
    // CRITICAL: Only update if user is properly authenticated
    if (!user || !user.email) {
      console.log('❌ No valid user data - hiding role-based links');
      hideAllRoleBasedLinks();
      return;
    }

    // If role is not available, try to fetch it from Supabase
    if (!user.role || user.role === 'user') {
      console.log('⚠️ Role not available in session, attempting to fetch from Supabase...');
      fetchUserRoleFromSupabase(user);
      return;
    }

    // Store the current role in a global variable to prevent overrides
    window.currentUserRole = user.role;
    console.log('🔒 Stored user role globally:', window.currentUserRole);

    // Show/hide role-based links
    const menuOperatorLink = document.getElementById('menu-operator-link');
    const mobileMenuOperatorLink = document.getElementById('mobile-menu-operator-link');
    const adminPanelLink = document.getElementById('admin-panel-link');
    const mobileAdminPanelLink = document.getElementById('mobile-admin-panel-link');
    
    // Get profile links
    const profileLink = document.getElementById('profile-link');
    const mobileProfileLink = document.getElementById('mobile-profile-link');

    // Check if user has menu operator role
    console.log('🔍 Checking user role:', user.role, 'for user:', user.email);
    if (user.role === 'menu_operator' || user.role === 'menu operator') {
      if (menuOperatorLink) {
        menuOperatorLink.classList.remove('hidden');
        menuOperatorLink.style.display = 'block';
      }
      if (mobileMenuOperatorLink) {
        mobileMenuOperatorLink.classList.remove('hidden');
        mobileMenuOperatorLink.style.display = 'block';
      }
      
      // Update profile links to point to menu operator profile
      if (profileLink) {
        profileLink.href = '/menu-operator/profile';
      }
      if (mobileProfileLink) {
        mobileProfileLink.href = '/menu-operator/profile';
      }
    } else {
      if (menuOperatorLink) {
        menuOperatorLink.classList.add('hidden');
        menuOperatorLink.style.display = 'none';
      }
      if (mobileMenuOperatorLink) {
        mobileMenuOperatorLink.classList.add('hidden');
        mobileMenuOperatorLink.style.display = 'none';
      }
      
      // Update profile links to point to regular profile
      if (profileLink) {
        profileLink.href = '/profile';
      }
      if (mobileProfileLink) {
        mobileProfileLink.href = '/profile';
      }
    }

    // Check if user has admin role
    if (user.role === 'admin' || user.role === 'administrator') {
      if (adminPanelLink) {
        adminPanelLink.classList.remove('hidden');
        adminPanelLink.style.display = 'block';
      }
      if (mobileAdminPanelLink) {
        mobileAdminPanelLink.classList.remove('hidden');
        mobileAdminPanelLink.style.display = 'block';
      }
    } else {
      if (adminPanelLink) {
        adminPanelLink.classList.add('hidden');
        adminPanelLink.style.display = 'none';
      }
      if (mobileAdminPanelLink) {
        mobileAdminPanelLink.classList.add('hidden');
        mobileAdminPanelLink.style.display = 'none';
      }
    }
  }

  // Function to fetch user role from Supabase
  async function fetchUserRoleFromSupabase(user) {
    try {
      // Check if Supabase is available
      if (typeof window.supabase === 'undefined') {
        console.log('❌ Supabase not available, using fallback role');
        updateRoleBasedLinksWithFallback(user);
        return;
      }

      const supabase = window.supabase;
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (error) {
        console.log('❌ Error fetching role from Supabase:', error);
        updateRoleBasedLinksWithFallback(user);
        return;
      }

      if (profile && profile.role) {
        console.log('✅ Role fetched from Supabase:', profile.role);
        // Update user object with role
        user.role = profile.role;
        
        // Update session storage with the role
        const sessionData = sessionStorage.getItem('simple-auth-session');
        if (sessionData) {
          const session = JSON.parse(sessionData);
          session.user.role = profile.role;
          sessionStorage.setItem('simple-auth-session', JSON.stringify(session));
        }
        
        // Now update the role-based links
        updateRoleBasedLinks(user);
      } else {
        console.log('⚠️ No role found in profile, using fallback');
        updateRoleBasedLinksWithFallback(user);
      }
    } catch (error) {
      console.error('❌ Error fetching role from Supabase:', error);
      updateRoleBasedLinksWithFallback(user);
    }
  }

  // Function to update role-based links with fallback
  function updateRoleBasedLinksWithFallback(user) {
    console.log('🔄 Using fallback role-based link update');
    // For now, assume regular user if no role is available
    user.role = user.role || 'customer';
    updateRoleBasedLinks(user);
  }

  // Function to persistently maintain correct profile links
  function maintainProfileLinks() {
    const profileLink = document.getElementById('profile-link');
    const mobileProfileLink = document.getElementById('mobile-profile-link');
    
    if (!profileLink || !mobileProfileLink) {
      return; // Links not found yet
    }

    // Check if we have a stored role
    if (window.currentUserRole) {
      console.log('🔒 Maintaining profile links with stored role:', window.currentUserRole);
      
      if (window.currentUserRole === 'menu_operator' || window.currentUserRole === 'menu operator') {
        if (profileLink.href !== '/menu-operator/profile') {
          profileLink.href = '/menu-operator/profile';
          profileLink.setAttribute('href', '/menu-operator/profile');
          console.log('🔧 Fixed desktop profile link to menu operator profile');
        }
        if (mobileProfileLink.href !== '/menu-operator/profile') {
          mobileProfileLink.href = '/menu-operator/profile';
          mobileProfileLink.setAttribute('href', '/menu-operator/profile');
          console.log('🔧 Fixed mobile profile link to menu operator profile');
        }
      } else {
        if (profileLink.href !== '/profile') {
          profileLink.href = '/profile';
          profileLink.setAttribute('href', '/profile');
          console.log('🔧 Fixed desktop profile link to regular profile');
        }
        if (mobileProfileLink.href !== '/profile') {
          mobileProfileLink.href = '/profile';
          mobileProfileLink.setAttribute('href', '/profile');
          console.log('🔧 Fixed mobile profile link to regular profile');
        }
      }
    } else {
      // Check if user is on menu operator pages
      const isOnMenuOperatorPage = window.location.pathname.includes('/menu-operator');
      if (isOnMenuOperatorPage) {
        if (profileLink.href !== '/menu-operator/profile') {
          profileLink.href = '/menu-operator/profile';
          profileLink.setAttribute('href', '/menu-operator/profile');
          console.log('🔧 Fixed profile link based on current page context');
        }
        if (mobileProfileLink.href !== '/menu-operator/profile') {
          mobileProfileLink.href = '/menu-operator/profile';
          mobileProfileLink.setAttribute('href', '/menu-operator/profile');
          console.log('🔧 Fixed mobile profile link based on current page context');
        }
      }
    }
  }

  // Function to hide all role-based links when not authenticated
  function hideAllRoleBasedLinks() {
    const menuOperatorLink = document.getElementById('menu-operator-link');
    const mobileMenuOperatorLink = document.getElementById('mobile-menu-operator-link');
    const adminPanelLink = document.getElementById('admin-panel-link');
    const mobileAdminPanelLink = document.getElementById('mobile-admin-panel-link');

    if (menuOperatorLink) {
      menuOperatorLink.classList.add('hidden');
      menuOperatorLink.style.display = 'none';
    }
    if (mobileMenuOperatorLink) {
      mobileMenuOperatorLink.classList.add('hidden');
      mobileMenuOperatorLink.style.display = 'none';
    }
    if (adminPanelLink) {
      adminPanelLink.classList.add('hidden');
      adminPanelLink.style.display = 'none';
    }
    if (mobileAdminPanelLink) {
      mobileAdminPanelLink.classList.add('hidden');
      mobileAdminPanelLink.style.display = 'none';
    }
  }

  // Function to set initial UI state using the global auth manager
  function setInitialUIState() {
    console.log('Setting initial UI state - checking auth state');
    
    // Check authentication state immediately
    const isAuthenticated = checkAuthState();
    
    if (isAuthenticated) {
      // User is logged in - show user menu immediately
      showUserMenu();
      console.log('✅ User authenticated - showing user menu');
      } else {
      // User is not logged in - show auth buttons (already shown by default)
      showAuthButtons();
      console.log('✅ User not authenticated - showing auth buttons');
    }
  }
  
  // Function to check authentication state
  function checkAuthState() {
    try {
      const sessionData = sessionStorage.getItem('simple-auth-session');
      return sessionData && JSON.parse(sessionData).user;
    } catch (error) {
      console.error('Error checking auth state:', error);
      return false;
    }
  }
  
        // Function to show user menu
        function showUserMenu() {
          const authButtons = document.getElementById('auth-buttons');
          const userMenu = document.getElementById('user-menu');
          const mobileAuthButtons = document.getElementById('mobile-auth-buttons');
          const mobileUserMenu = document.getElementById('mobile-user-menu');
          
          // Force override with CSS injection
          const style = document.createElement('style');
          style.textContent = `
            #auth-buttons, #mobile-auth-buttons { display: none !important; }
            #user-menu { display: flex !important; }
            #mobile-user-menu { display: block !important; }
          `;
          document.head.appendChild(style);
          
          if (authButtons) {
            authButtons.style.display = 'none !important';
            authButtons.classList.add('hidden');
          }
          if (userMenu) {
            userMenu.style.display = 'flex !important';
            userMenu.classList.remove('hidden');
          }
          if (mobileAuthButtons) {
            mobileAuthButtons.style.display = 'none !important';
            mobileAuthButtons.classList.add('hidden');
          }
          if (mobileUserMenu) {
            mobileUserMenu.style.display = 'block !important';
            mobileUserMenu.classList.remove('hidden');
          }
          
          // Update user info
          updateUserInfoFromSession();
          
          console.log('✅ User menu shown, auth buttons hidden');
        }
  
        // Function to show auth buttons
        function showAuthButtons() {
          const authButtons = document.getElementById('auth-buttons');
          const userMenu = document.getElementById('user-menu');
          const mobileAuthButtons = document.getElementById('mobile-auth-buttons');
          const mobileUserMenu = document.getElementById('mobile-user-menu');
          
          // Force override with CSS injection
          const style = document.createElement('style');
          style.textContent = `
            #auth-buttons { display: flex !important; opacity: 1 !important; transition: none !important; visibility: visible !important; }
            #mobile-auth-buttons { display: block !important; opacity: 1 !important; transition: none !important; visibility: visible !important; }
            #auth-buttons a, #mobile-auth-buttons a { opacity: 1 !important; transition: none !important; visibility: visible !important; }
            #user-menu, #mobile-user-menu { display: none !important; }
          `;
          document.head.appendChild(style);
          
          if (authButtons) {
            authButtons.style.display = 'flex !important';
            authButtons.style.opacity = '1 !important';
            authButtons.style.transition = 'none !important';
            authButtons.style.visibility = 'visible !important';
            authButtons.classList.remove('hidden');
            
            // Also set individual button styles
            const buttons = authButtons.querySelectorAll('a');
            buttons.forEach(button => {
              button.style.opacity = '1 !important';
              button.style.transition = 'none !important';
              button.style.visibility = 'visible !important';
            });
          }
          if (userMenu) {
            userMenu.style.display = 'none !important';
            userMenu.classList.add('hidden');
          }
          if (mobileAuthButtons) {
            mobileAuthButtons.style.display = 'block !important';
            mobileAuthButtons.style.opacity = '1 !important';
            mobileAuthButtons.style.transition = 'none !important';
            mobileAuthButtons.style.visibility = 'visible !important';
            mobileAuthButtons.classList.remove('hidden');
            
            // Also set individual button styles
            const mobileButtons = mobileAuthButtons.querySelectorAll('a');
            mobileButtons.forEach(button => {
              button.style.opacity = '1 !important';
              button.style.transition = 'none !important';
              button.style.visibility = 'visible !important';
            });
          }
          if (mobileUserMenu) {
            mobileUserMenu.style.display = 'none !important';
            mobileUserMenu.classList.add('hidden');
          }
          
          console.log('✅ Auth buttons shown, user menu hidden');
        }
  
  // Function to update user info from session - ONLY for authenticated users
  function updateUserInfoFromSession() {
    try {
      const sessionData = sessionStorage.getItem('simple-auth-session');
      if (sessionData) {
        const session = JSON.parse(sessionData);
        const user = session.user;
        
        // CRITICAL: Only update if user is properly authenticated with valid session
        if (user && session.access_token && user.email) {
          const userEmail = document.getElementById('user-email');
          const userName = document.getElementById('user-name');
          const userAvatar = document.getElementById('user-avatar');
          const mobileUserEmail = document.getElementById('mobile-user-email');

          if (userEmail) {
            userEmail.textContent = user.email || '';
            userEmail.style.opacity = '1';
          }
          if (userName) {
            userName.textContent = user.full_name || user.email?.split('@')[0] || 'User';
            userName.style.opacity = '1';
          }
          if (userAvatar) {
            userAvatar.textContent = (user.full_name || user.email || 'U').charAt(0).toUpperCase();
            userAvatar.style.opacity = '1';
          }
          if (mobileUserEmail) {
            mobileUserEmail.textContent = user.email || '';
            mobileUserEmail.style.opacity = '1';
          }
          
          // Debug: Log user data
          console.log('🔍 User data in updateUserInfoFromSession:', {
            email: user.email,
            role: user.role,
            full_name: user.full_name,
            id: user.id
          });
          console.log('🔍 Full session data:', JSON.stringify(session, null, 2));
          
          // Update role-based links
          updateRoleBasedLinks(user);
        } else {
          console.log('❌ Invalid session - clearing user info');
          clearUserInfoFallback();
        }
      } else {
        console.log('❌ No session data - clearing user info');
        clearUserInfoFallback();
      }
    } catch (error) {
      console.error('Error updating user info:', error);
      clearUserInfoFallback();
    }
  }
  
  // Loading state functions removed to prevent flickering

  // User dropdown functionality
  function initUserDropdown() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userMenuButton && userDropdown && userMenuArrow) {
      userMenuButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleUserDropdown();
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!userMenuButton.contains(e.target) && !userDropdown.contains(e.target)) {
          closeUserDropdown();
        }
      });
    }
  }

  function toggleUserDropdown() {
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userDropdown && userMenuArrow) {
      isUserMenuOpen = !isUserMenuOpen;

      if (isUserMenuOpen) {
        userDropdown.classList.remove('hidden');
        userMenuArrow.style.transform = 'rotate(180deg)';
      } else {
        userDropdown.classList.add('hidden');
        userMenuArrow.style.transform = 'rotate(0deg)';
      }
    }
  }

  function closeUserDropdown() {
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userDropdown && userMenuArrow) {
      userDropdown.classList.add('hidden');
      userMenuArrow.style.transform = 'rotate(0deg)';
      isUserMenuOpen = false;
    }
  }

  // Sign out function using the global auth manager
  window.signOut = async function() {
    try {
      console.log('Sign out clicked - using global auth manager');
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      if (authManager) {
        authManager.logout();
      } else {
      window.location.href = '/';
      }
    } catch (error) {
      console.error('Sign out error:', error);
      window.location.href = '/';
    }
  };

  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuIcon = document.getElementById('mobile-menu-icon');

    if (mobileMenuButton && mobileMenu && mobileMenuIcon) {
      mobileMenuButton.addEventListener('click', () => {
        toggleMobileMenu();
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!mobileMenuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
          closeMobileMenu();
        }
      });

      // Close mobile menu when pressing Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
          closeMobileMenu();
        }
      });

      // Close mobile menu when clicking on any menu item
      const menuItems = mobileMenu.querySelectorAll('a, button');
      menuItems.forEach(item => {
        item.addEventListener('click', () => {
          // Small delay to allow navigation to start
          setTimeout(() => {
            closeMobileMenu();
          }, 100);
        });
      });
    }
  }

  function toggleMobileMenu() {
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuIcon = document.getElementById('mobile-menu-icon');

    if (mobileMenu && mobileMenuIcon) {
      isMobileMenuOpen = !isMobileMenuOpen;

      if (isMobileMenuOpen) {
        mobileMenu.classList.remove('hidden');
        mobileMenuIcon.style.transform = 'rotate(90deg)';
        // Change icon to X
        mobileMenuIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        `;
      } else {
        mobileMenu.classList.add('hidden');
        mobileMenuIcon.style.transform = 'rotate(0deg)';
        // Change icon back to hamburger
        mobileMenuIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        `;
      }
    }
  }

  function closeMobileMenu() {
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuIcon = document.getElementById('mobile-menu-icon');

    if (mobileMenu && mobileMenuIcon) {
      mobileMenu.classList.add('hidden');
      mobileMenuIcon.style.transform = 'rotate(0deg)';
      mobileMenuIcon.innerHTML = `
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      `;
      isMobileMenuOpen = false;
    }
  }

  // Function to preserve URL parameters when navigating to dashboard
  function initDashboardLinks() {
    const dashboardLink = document.getElementById('dashboard-link');
    const mobileDashboardLink = document.getElementById('mobile-dashboard-link');
    
    function updateDashboardLink(link) {
      if (link) {
        // Get current URL parameters
        const currentParams = new URLSearchParams(window.location.search);
        const product = currentParams.get('product');
        const price = currentParams.get('price');
        
        // If we have product parameters, preserve them
        if (product && price) {
          link.href = `/dashboard?product=${product}&price=${price}`;
          console.log('🔗 Dashboard link updated with parameters:', link.href);
        } else {
          link.href = '/dashboard';
        }
      }
    }
    
    // Update both desktop and mobile links
    updateDashboardLink(dashboardLink);
    updateDashboardLink(mobileDashboardLink);
    
    // Add click handlers for smooth transitions
    if (dashboardLink) {
      dashboardLink.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Check if we're already on dashboard
        if (window.location.pathname === '/dashboard') {
          // If already on dashboard, just scroll to top smoothly
          window.scrollTo({ top: 0, behavior: 'smooth' });
          return;
        }
        
        // Smooth transition to dashboard
        const currentParams = new URLSearchParams(window.location.search);
        const product = currentParams.get('product');
        const price = currentParams.get('price');
        
        // Add smooth transition effect
        document.body.style.transition = 'opacity 0.3s ease-in-out';
        document.body.style.opacity = '0.7';
        
        setTimeout(() => {
          if (product && price) {
            window.location.href = `/dashboard?product=${product}&price=${price}`;
          } else {
            window.location.href = '/dashboard';
          }
        }, 150);
      });
    }
    
    if (mobileDashboardLink) {
      mobileDashboardLink.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Check if we're already on dashboard
        if (window.location.pathname === '/dashboard') {
          // If already on dashboard, just scroll to top smoothly
          window.scrollTo({ top: 0, behavior: 'smooth' });
          return;
        }
        
        // Smooth transition to dashboard
        const currentParams = new URLSearchParams(window.location.search);
        const product = currentParams.get('product');
        const price = currentParams.get('price');
        
        // Add smooth transition effect
        document.body.style.transition = 'opacity 0.3s ease-in-out';
        document.body.style.opacity = '0.7';
        
        setTimeout(() => {
          if (product && price) {
            window.location.href = `/dashboard?product=${product}&price=${price}`;
          } else {
            window.location.href = '/dashboard';
          }
        }, 150);
      });
    }
  }

  // Initialize everything when page loads
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Header initializing with fallback support');
    
    // Set initial UI state immediately with fallback
    setInitialUIState();

    // Initialize UI components
    initUserDropdown();
    initMobileMenu();
    initDashboardLinks();
    
    // Force refresh role-based links after a short delay to ensure all data is loaded
    setTimeout(() => {
      console.log('🔄 Force refreshing role-based links...');
      const sessionData = sessionStorage.getItem('simple-auth-session');
      if (sessionData) {
        try {
          const session = JSON.parse(sessionData);
          if (session.user && session.user.email) {
            console.log('🔄 Refreshing links for user:', session.user.email, 'with role:', session.user.role);
            updateRoleBasedLinks(session.user);
          }
        } catch (e) {
          console.log('⚠️ Error refreshing role-based links:', e);
        }
      }
    }, 1000);

    // Also try immediately to fix profile links
    setTimeout(() => {
      console.log('🚨 IMMEDIATE PROFILE LINK FIX...');
      const sessionData = sessionStorage.getItem('simple-auth-session');
      if (sessionData) {
        try {
          const session = JSON.parse(sessionData);
          if (session.user && session.user.email) {
            console.log('🚨 Immediate fix for user:', session.user.email, 'role:', session.user.role);
            
            // Force update profile links based on role
            const profileLink = document.getElementById('profile-link');
            const mobileProfileLink = document.getElementById('mobile-profile-link');
            
            // Check if user is on menu operator pages
            const isOnMenuOperatorPage = window.location.pathname.includes('/menu-operator');
            const hasMenuOperatorRole = session.user.role === 'menu_operator' || session.user.role === 'menu operator';
            
            console.log('🔍 Context check:', {
              isOnMenuOperatorPage,
              hasMenuOperatorRole,
              currentPath: window.location.pathname,
              userRole: session.user.role
            });
            
            if (hasMenuOperatorRole || isOnMenuOperatorPage) {
              if (profileLink) {
                profileLink.href = '/menu-operator/profile';
                profileLink.setAttribute('href', '/menu-operator/profile');
                console.log('✅ Updated desktop profile link to menu operator profile');
              }
              if (mobileProfileLink) {
                mobileProfileLink.href = '/menu-operator/profile';
                mobileProfileLink.setAttribute('href', '/menu-operator/profile');
                console.log('✅ Updated mobile profile link to menu operator profile');
              }
            } else {
              if (profileLink) {
                profileLink.href = '/profile';
                profileLink.setAttribute('href', '/profile');
                console.log('✅ Updated desktop profile link to regular profile');
              }
              if (mobileProfileLink) {
                mobileProfileLink.href = '/profile';
                mobileProfileLink.setAttribute('href', '/profile');
                console.log('✅ Updated mobile profile link to regular profile');
              }
            }
            
            // Also call the maintain function to ensure persistence
            maintainProfileLinks();
          }
        } catch (e) {
          console.log('⚠️ Error in immediate profile link fix:', e);
        }
      }
    }, 100);

    // Also try to update when global auth manager becomes available
    const checkForAuthManager = () => {
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      if (authManager) {
        console.log('Global auth manager found, updating header');
        authManager.updateHeader();
      } else {
        // Keep checking for a bit longer
        setTimeout(checkForAuthManager, 200);
      }
    };
    
    // Start checking for auth manager
    setTimeout(checkForAuthManager, 100);
    
    // Listen for URL changes to update dashboard links and prevent flashing
    window.addEventListener('popstate', () => {
      console.log('Navigation detected - updating header state');
      setInitialUIState();
      initDashboardLinks();
      maintainProfileLinks();
    });
    
    // Also update links when the page becomes visible (in case of back/forward navigation)
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        console.log('Page visible - updating header state');
        setInitialUIState();
        initDashboardLinks();
        maintainProfileLinks();
      }
    });
    
    // Listen for page focus to ensure header state is correct
    window.addEventListener('focus', () => {
      console.log('Window focused - updating header state');
      setInitialUIState();
      maintainProfileLinks();
    });
    
    // Start continuous monitoring of profile links
    setInterval(() => {
      maintainProfileLinks();
    }, 2000); // Check every 2 seconds

    console.log('✅ Header initialized with fallback support');
  });

  // Also initialize on window load as backup
  window.addEventListener('load', () => {
    console.log('Window loaded, ensuring header is properly initialized');
    updateHeaderFallback();
  });

  // Listen for auth state changes from the global auth manager
  window.addEventListener('user-logged-in', () => {
    console.log('User logged in event received in header');
      updateHeader();
  });

  window.addEventListener('user-logged-out', () => {
    console.log('User logged out event received in header');
    updateHeader();
  });
</script>