---
// Toast component for global notifications
---

<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2">
  <!-- Toast notifications will be dynamically inserted here -->
</div>

<script>
  // Toast notification system
  class ToastManager {
    constructor() {
      this.container = document.getElementById('toast-container');
      this.toasts = [];
      this.maxToasts = 5;
    }

    show(message, type = 'info', duration = 5000) {
      // Create toast element
      const toast = this.createToast(message, type);
      
      // Add to container
      this.container?.appendChild(toast);
      this.toasts.push(toast);
      
      // Limit number of toasts
      if (this.toasts.length > this.maxToasts) {
        const oldToast = this.toasts.shift();
        if (oldToast) {
          oldToast.remove();
        }
      }
      
      // Animate in
      setTimeout(() => {
        toast.classList.add('translate-x-0', 'opacity-100');
      }, 100);
      
      // Auto remove
      if (duration > 0) {
        setTimeout(() => {
          this.remove(toast);
        }, duration);
      }
      
      return toast;
    }

    createToast(message, type) {
      const toast = document.createElement('div');
      toast.className = `transform translate-x-full opacity-0 transition-all duration-300 ease-out max-w-sm w-full bg-white rounded-lg shadow-lg border-l-4 p-4`;
      
      // Set border color based on type
      const borderColors = {
        success: 'border-green-500',
        error: 'border-red-500',
        warning: 'border-yellow-500',
        info: 'border-blue-500'
      };
      
      toast.classList.add(borderColors[type] || borderColors.info);
      
      // Set icon based on type
      const icons = {
        success: `<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>`,
        error: `<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
        </svg>`,
        warning: `<svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
        </svg>`,
        info: `<svg class="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
        </svg>`
      };
      
      // Set text color based on type
      const textColors = {
        success: 'text-green-800',
        error: 'text-red-800',
        warning: 'text-yellow-800',
        info: 'text-blue-800'
      };
      
      toast.innerHTML = `
        <div class="flex items-start">
          <div class="flex-shrink-0">
            ${icons[type] || icons.info}
          </div>
          <div class="ml-3 flex-1">
            <p class="text-sm font-medium ${textColors[type] || textColors.info}">
              ${message}
            </p>
          </div>
          <div class="ml-4 flex-shrink-0 flex">
            <button class="inline-flex text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition-colors" onclick="this.closest('[id^=toast-]').remove()">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
            </button>
          </div>
        </div>
      `;
      
      // Add unique ID
      toast.id = `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      
      return toast;
    }

    remove(toast) {
      if (toast && toast.parentNode) {
        // Animate out
        toast.classList.remove('translate-x-0', 'opacity-100');
        toast.classList.add('translate-x-full', 'opacity-0');
        
        // Remove after animation
        setTimeout(() => {
          if (toast.parentNode) {
            toast.remove();
            // Remove from array
            const index = this.toasts.indexOf(toast);
            if (index > -1) {
              this.toasts.splice(index, 1);
            }
          }
        }, 300);
      }
    }

    clear() {
      this.toasts.forEach(toast => {
        this.remove(toast);
      });
    }
  }

  // Initialize toast manager
  const toastManager = new ToastManager();

  // Make showToast globally available
  window.showToast = function(message, type = 'info', duration = 5000) {
    return toastManager.show(message, type, duration);
  };

  // Make clearToasts globally available
  window.clearToasts = function() {
    toastManager.clear();
  };

  // Make removeToast globally available
  window.removeToast = function(toast) {
    toastManager.remove(toast);
  };

  // Auto-clear toasts on page unload
  window.addEventListener('beforeunload', () => {
    toastManager.clear();
  });

  // Handle keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + Shift + T to clear all toasts
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
      e.preventDefault();
      toastManager.clear();
    }
  });

  // Example usage:
  // window.showToast('Success message!', 'success', 3000);
  // window.showToast('Error message!', 'error', 5000);
  // window.showToast('Warning message!', 'warning', 4000);
  // window.showToast('Info message!', 'info', 6000);
</script>
