---
// Menu Operator Guard Component
// This component checks if the user has menu operator role access
---

<script>
  import { createClient } from '@supabase/supabase-js';

  // Supabase configuration - using the same config as the main app
  const SUPABASE_CONFIG = {
    url: 'https://lmrrdcaavwwletcjcpqv.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ'
  };

  // Get environment variables with fallbacks
  const getEnvVar = (key: string): string => {
    // Try to get from import.meta.env (Astro) - this is the primary method
    if (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env[key]) {
      return import.meta.env[key];
    }
    
    // Try to get from process.env (Node.js) - for server-side
    if (typeof process !== 'undefined' && process.env && process.env[key]) {
      return process.env[key];
    }
    
    // Try to get from window (browser) - for client-side fallback
    if (typeof window !== 'undefined' && window.__ENV__ && window.__ENV__[key]) {
      return window.__ENV__[key];
    }
    
    // Return empty string if not found
    return '';
  };

  // Use environment variables if available, otherwise use hardcoded config
  const supabaseUrl = getEnvVar('VITE_SUPABASE_URL') || SUPABASE_CONFIG.url;
  const supabaseKey = getEnvVar('VITE_SUPABASE_ANON_KEY') || SUPABASE_CONFIG.anonKey;
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Check if user has menu operator access
  async function checkMenuOperatorAccess() {
    try {
      console.log('üîç MenuOperatorGuard - Checking access...');
      
      // First check simple auth session
      const sessionData = sessionStorage.getItem('simple-auth-session');
      if (!sessionData) {
        console.log('‚ùå No session data found - redirecting to login');
        window.location.href = '/login';
        return false;
      }

      let session;
      try {
        session = JSON.parse(sessionData);
      } catch (e) {
        console.log('‚ùå Invalid session data - redirecting to login');
        window.location.href = '/login';
        return false;
      }

      if (!session.user || !session.user.email) {
        console.log('‚ùå No user data in session - redirecting to login');
        window.location.href = '/login';
        return false;
      }

      console.log('‚úÖ Session found for user:', session.user.email);

      // Check if user has menu operator role in session first
      if (session.user.role === 'menu_operator' || session.user.role === 'menu operator') {
        console.log('‚úÖ Menu operator role found in session');
        return true;
      }

      // If no role in session, try to fetch from Supabase
      console.log('‚ö†Ô∏è No role in session, checking Supabase...');
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('role, status')
        .eq('id', session.user.id)
        .single();

      if (error || !profile) {
        console.log('‚ùå No profile found in Supabase');
        showAccessDenied('You need menu operator role to access this page. Please contact support to assign the role.');
        return false;
      }

      console.log('üîç MenuOperatorGuard - Profile loaded:', profile);
      console.log('üîç MenuOperatorGuard - Role value:', JSON.stringify(profile.role));

      if (profile.status && profile.status !== 'active') {
        // User's access is inactive
        showAccessDenied('Your menu operator access is currently inactive.');
        return false;
      }

      // Check role (case-insensitive)
      if (!profile.role || profile.role.toLowerCase().trim() !== 'menu_operator') {
        // User doesn't have the correct role
        showAccessDenied('You need menu operator role to access this page. Current role: ' + profile.role);
        return false;
      }

      // Update session with role information
      session.user.role = profile.role;
      sessionStorage.setItem('simple-auth-session', JSON.stringify(session));
      console.log('‚úÖ Updated session with role information');

      return true;
    } catch (error) {
      console.error('Error checking menu operator access:', error);
      showAccessDenied('Error verifying your access. Please try again.');
      return false;
    }
  }

  // Show access denied message
  function showAccessDenied(message) {
    document.body.innerHTML = `
      <div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div class="sm:mx-auto sm:w-full sm:max-w-md">
          <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <div class="text-center">
              <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <h2 class="mt-6 text-3xl font-extrabold text-gray-900">Access Denied</h2>
              <p class="mt-2 text-sm text-gray-600">${message}</p>
              <div class="mt-6">
                <a href="/dashboard" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Go to Dashboard
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Initialize access check
  document.addEventListener('DOMContentLoaded', async () => {
    const hasAccess = await checkMenuOperatorAccess();
    if (!hasAccess) {
      return;
    }
    
    // If access is granted, show the page content
    // The page will load normally
  });
</script>
