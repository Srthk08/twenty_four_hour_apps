---
// Menu Operator Guard Component
// This component checks if the user has menu operator role access
---

<script>
  import { createClient } from '@supabase/supabase-js';

  // Supabase configuration
  const supabaseUrl = 'YOUR_SUPABASE_URL';
  const supabaseKey = 'YOUR_SUPABASE_ANON_KEY';
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Check if user has menu operator access
  async function checkMenuOperatorAccess() {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        // User not logged in, redirect to login
        window.location.href = '/login';
        return false;
      }

      // Check if user has menu operator role in profiles table
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('role, status')
        .eq('id', user.id)
        .single();

      if (error || !profile) {
        // User doesn't have a profile
        showAccessDenied('You need menu operator role to access this page. Please contact support to assign the role.');
        return false;
      }

      console.log('üîç MenuOperatorGuard - Profile loaded:', profile);
      console.log('üîç MenuOperatorGuard - Role value:', JSON.stringify(profile.role));

      if (profile.status && profile.status !== 'active') {
        // User's access is inactive
        showAccessDenied('Your menu operator access is currently inactive.');
        return false;
      }

      // Check role (case-insensitive)
      if (!profile.role || profile.role.toLowerCase().trim() !== 'menu_operator') {
        // User doesn't have the correct role
        showAccessDenied('You need menu operator role to access this page. Current role: ' + profile.role);
        return false;
      }

      return true;
    } catch (error) {
      console.error('Error checking menu operator access:', error);
      showAccessDenied('Error verifying your access. Please try again.');
      return false;
    }
  }

  // Show access denied message
  function showAccessDenied(message) {
    document.body.innerHTML = `
      <div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div class="sm:mx-auto sm:w-full sm:max-w-md">
          <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <div class="text-center">
              <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <h2 class="mt-6 text-3xl font-extrabold text-gray-900">Access Denied</h2>
              <p class="mt-2 text-sm text-gray-600">${message}</p>
              <div class="mt-6">
                <a href="/dashboard" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Go to Dashboard
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Initialize access check
  document.addEventListener('DOMContentLoaded', async () => {
    const hasAccess = await checkMenuOperatorAccess();
    if (!hasAccess) {
      return;
    }
    
    // If access is granted, show the page content
    // The page will load normally
  });
</script>
