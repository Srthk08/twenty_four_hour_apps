---
import Layout from './Layout.astro';
import Toast from '../components/Toast.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<Layout title={title} description={description}>
    <!-- Hide user navbar in menu operator admin panel -->
    <style>
      /* Hide the main header/navbar when in menu operator admin panel */
      header {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Ensure menu operator admin panel takes full height */
      .menu-operator-admin-container {
        min-height: 100vh;
        margin-top: 0 !important;
        padding-top: 0 !important;
      }
      
      /* Prevent any navbar flicker during transitions */
      body.menu-operator-admin-active header {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Additional protection for any navbar elements */
      body.menu-operator-admin-active header * {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        pointer-events: none !important;
      }
    </style>
    
    <!-- Immediate navbar hiding - runs before page load -->
    <script>
      // Hide navbar immediately - runs before DOM is ready
      (function() {
        // Add menu operator admin panel class immediately
        document.documentElement.classList.add('menu-operator-admin-active');
        document.body.classList.add('menu-operator-admin-active');
        
        // Hide navbar immediately
        function hideNavbarImmediately() {
          const header = document.querySelector('header');
          if (header) {
            header.style.display = 'none';
            header.style.visibility = 'hidden';
            header.style.opacity = '0';
            header.style.height = '0';
            header.style.maxHeight = '0';
            header.style.overflow = 'hidden';
            header.style.position = 'absolute';
            header.style.top = '-9999px';
            header.style.left = '-9999px';
            header.style.zIndex = '-9999';
            header.style.pointerEvents = 'none';
            header.style.transform = 'translateY(-100vh)';
            header.style.transition = 'none';
            header.style.animation = 'none';
          }
        }
        
        // Try to hide immediately
        hideNavbarImmediately();
        
        // Also try when DOM is ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', hideNavbarImmediately);
        }
        
        // And try after a short delay
        setTimeout(hideNavbarImmediately, 0);
        setTimeout(hideNavbarImmediately, 10);
        setTimeout(hideNavbarImmediately, 50);
      })();
    </script>
    
    <!-- Supabase -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <!-- Text Visibility Fix -->
    <script>
      // Fix text visibility without forcing white backgrounds
      function fixTextVisibility() {
        console.log('🔧 Fixing text visibility...');
        
        // Only fix white text that might be invisible
        const whiteTextElements = document.querySelectorAll('.text-white, .text-light, .text-muted');
        whiteTextElements.forEach(el => {
          if (el.style.color === 'white' || el.style.color === '#ffffff' || el.style.color === '#fff') {
            el.style.color = '#1f2937';
            el.style.backgroundColor = '#f8fafc';
            el.style.padding = '2px 4px';
            el.style.borderRadius = '4px';
          }
        });
        
        // Fix placeholder text visibility
        const inputs = document.querySelectorAll('input, textarea, select');
        inputs.forEach(el => {
          if (el.style.color === 'white' || el.style.color === '#ffffff') {
            el.style.color = '#1f2937';
            el.style.backgroundColor = '#ffffff';
            el.style.border = '2px solid #d1d5db';
          }
        });
        
        console.log('✅ Text visibility fixed!');
      }
      
      // Listen for navigation away from menu operator admin panel
      function setupNavbarVisibility() {
        // Add body class to prevent flicker
        document.body.classList.add('menu-operator-admin-active');
        
        // Hide navbar immediately when in menu operator admin panel
        if (window.hideUserNavbar) {
          window.hideUserNavbar();
        }
        
        // Listen for clicks on "Back to Site" links
        document.addEventListener('click', function(e) {
          const target = e.target.closest('a[href="/"]');
          if (target && target.textContent.includes('Back to Site')) {
            console.log('🔄 Menu Operator clicked "Back to Site" - preparing to show user navbar');
            
            // Remove menu operator admin panel class first
            document.body.classList.remove('menu-operator-admin-active');
            
            // Small delay to prevent flicker
            setTimeout(() => {
              if (window.showUserNavbar) {
                window.showUserNavbar();
                console.log('✅ User navbar shown after delay');
              }
            }, 50);
          }
        });
        
        // Listen for navigation events
        window.addEventListener('beforeunload', function() {
          // Check if we're navigating away from menu operator admin panel
          if (!window.location.pathname.startsWith('/menu-operator')) {
            document.body.classList.remove('menu-operator-admin-active');
            if (window.showUserNavbar) {
              window.showUserNavbar();
            }
          }
        });
      }
      
      // Apply when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
          fixTextVisibility();
          setupNavbarVisibility();
        });
      } else {
        fixTextVisibility();
        setupNavbarVisibility();
      }
    </script>
    
    <style>
      /* Global Text Visibility Fixes */
      body, html {
        background-color: #f8fafc !important;
        color: #1f2937 !important;
      }
      
      /* Fix only specific text visibility issues */
      .text-white {
        --tw-text-opacity: 1 !important;
        color: rgb(21 17 17) !important;
        background-color: #f8fafc !important;
        padding: 2px 4px !important;
        border-radius: 4px !important;
      }
      
      /* Fix placeholder text visibility */
      ::placeholder {
        color: #6b7280 !important;
        opacity: 1 !important;
      }
      
      /* Menu Operator admin logo styling */
      .menu-operator-admin-logo {
        background: #10b981;
        box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
        transition: all 0.3s ease;
      }
      
      .menu-operator-admin-logo:hover {
        background: #059669;
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        transform: translateY(-1px);
      }

      /* Navigation item styling */
      .nav-item {
        @apply flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 rounded-lg transition-all duration-200;
        background: transparent;
      }

      .nav-item:hover {
        @apply text-green-700;
        background: #ecfdf5;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.15);
      }

      .nav-active {
        @apply bg-green-50 text-green-700 border border-green-200;
        background: #ecfdf5;
        box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
      }

      /* Mobile navigation styling */
      .mobile-nav-item {
        @apply flex items-center space-x-2 px-3 py-2 text-base font-medium text-gray-700 rounded-md transition-all duration-200;
        background: transparent;
      }

      .mobile-nav-item:hover {
        @apply text-green-700;
        background: #ecfdf5;
        transform: translateX(4px);
      }

      .mobile-nav-active {
        @apply bg-green-50 text-green-700;
        background: #ecfdf5;
        box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
      }
    </style>
    
  <!-- MenuOperatorGuard - Protects menu operator routes -->
  <div id="menu-operator-guard" class="min-h-screen bg-gray-50 flex items-center justify-center" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9999;">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
      <p class="text-gray-600">Checking menu operator access...</p>
    </div>
  </div>
  
  <!-- Main Menu Operator Admin Layout (only shown after MenuOperatorGuard approves) -->
  <div id="menu-operator-admin-layout" class="menu-operator-admin-container h-full hidden" x-data="{ currentPage: 'dashboard', mobileMenuOpen: false }" x-init="
      // Initialize currentPage based on current URL
      const path = window.location.pathname;
    if (path.includes('/menu-operator/profile')) { currentPage = 'profile'; }
    else { currentPage = 'dashboard'; }
      
      console.log('MenuOperatorAdminLayout initialized with currentPage:', currentPage);
    ">
      
      <!-- Top Navigation Bar -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between h-16">
            <!-- Logo and Brand -->
            <div class="flex items-center">
              <div class="menu-operator-admin-logo w-10 h-10 rounded-lg flex items-center justify-center border-2 border-white transition-all duration-300 hover:scale-105">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </div>
              <span class="ml-3 text-lg font-semibold text-gray-800">Menu Operator Panel</span>
            </div>

            <!-- Desktop Navigation -->
            <div class="hidden lg:flex items-center space-x-1">
              <!-- Back to Site only -->
              <a href="/" class="nav-item">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                <span>Back to Site</span>
              </a>
            </div>

                         <!-- Mobile Menu Button -->
             <div class="lg:hidden">
               <button 
              @click="mobileMenuOpen = !mobileMenuOpen"
                 class="p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors"
               >
                 <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                 </svg>
               </button>
             </div>

            <!-- Profile Dropdown -->
            <div class="flex items-center space-x-4">
              <div class="relative" x-data="{ open: false }">
                <button 
                  @click="open = !open"
                  class="flex items-center space-x-3 p-2 text-sm rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-200"
                >
                  <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shadow-sm">
                  <span id="menu-operator-avatar" class="text-white font-medium text-sm">M</span>
                  </div>
                <span id="menu-operator-name" class="hidden md:block text-gray-700 font-medium">Menu Operator</span>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>

                <div 
                  x-show="open"
                  x-transition:enter="transition ease-out duration-100"
                  x-transition:enter-start="transform opacity-0 scale-95"
                  x-transition:enter-end="transform opacity-100 scale-100"
                  x-transition:leave="transition ease-in duration-75"
                  x-transition:leave-start="transform opacity-100 scale-100"
                  x-transition:leave-end="transform opacity-0 scale-95"
                  @click.away="open = false"
                  class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-50 border border-gray-200"
                >
                  <a href="/menu-operator/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                    <div class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                      </svg>
                      Profile
                    </div>
                  </a>
                  <hr class="my-2 border-gray-200">
                <button onclick="handleMenuOperatorSignOut()" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors duration-200">
                    <div class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                      </svg>
                      Sign out
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

                 <!-- Mobile Navigation Menu -->
         <div 
           x-show="mobileMenuOpen"
           x-transition:enter="transition ease-out duration-200"
           x-transition:enter-start="opacity-0 -translate-y-1"
           x-transition:enter-end="opacity-100 translate-y-0"
           x-transition:leave="transition ease-in duration-150"
           x-transition:leave-start="opacity-100 translate-y-0"
           x-transition:leave-end="opacity-0 -translate-y-1"
           @click.away="mobileMenuOpen = false"
           class="lg:hidden bg-white border-t border-gray-200 relative z-40"
         >
          <div class="px-2 pt-2 pb-3 space-y-1">
            <a href="/" class="mobile-nav-item">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              <span>Back to Site</span>
            </a>
          </div>
        </div>
      </div>

      <!-- Main content -->
      <div class="min-h-screen bg-gray-100">
        <!-- Page Title -->
        <div class="bg-gray-800 border-b border-gray-600 px-6 py-4">
          <h1 class="text-2xl font-bold text-white">{title}</h1>
        </div>

        <!-- Page content -->
        <main class="p-4 sm:p-6 lg:p-8 transition-all duration-300 bg-white">
          <slot />
        </main>
      </div>
    </div>

    <Toast />
    
    <script>
    // Supabase configuration
    const SUPABASE_URL = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
    
    let supabase = null;
    
    // Wait for Supabase to load
    function waitForSupabase() {
      return new Promise((resolve) => {
        if (window.supabase) {
          supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
          resolve(supabase);
        } else {
          setTimeout(() => waitForSupabase().then(resolve), 100);
        }
      });
    }
    
    // MenuOperatorGuard - Check if user has menu_operator role
    async function checkMenuOperatorAccess() {
      try {
        console.log('🔒 MenuOperatorGuard: Checking menu operator access...');
        
        // Wait for Supabase to be available
        if (!supabase) {
          await waitForSupabase();
        }
        
        // Get current user from Supabase
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        
        if (userError) {
          console.error('❌ MenuOperatorGuard: Error getting user:', userError);
          showAccessDenied('Authentication error. Please login again.');
          return;
        }
        
        if (!user) {
          console.log('❌ MenuOperatorGuard: No user logged in');
          showAccessDenied('Please login to access menu operator panel');
          return;
        }
        
        console.log('✅ MenuOperatorGuard: User found:', user.email);
        
        // Get user profile to check role
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', user.id)
          .single();
        
        if (profileError) {
          console.error('❌ MenuOperatorGuard: Error getting profile:', profileError);
          showAccessDenied('Error checking user permissions');
          return;
        }
        
        if (profile.role !== 'menu_operator') {
          console.log('❌ MenuOperatorGuard: User does not have menu_operator role. Role:', profile.role);
          showAccessDenied('Access denied. Menu operator privileges required.');
          return;
        }
        
        console.log('✅ MenuOperatorGuard: Menu operator access granted for user:', user.email);
        
        // Show menu operator admin content
        showMenuOperatorAdminContent();
        
      } catch (error) {
        console.error('❌ MenuOperatorGuard: Error checking menu operator access:', error);
        showAccessDenied('Error checking menu operator access. Please try again.');
      }
    }
    
    function showAccessDenied(message) {
      const guardElement = document.getElementById('menu-operator-guard');
      if (guardElement) {
        guardElement.innerHTML = `
          <div class="text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
              <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Access Denied</h3>
            <p class="text-gray-600 mb-6">${message}</p>
            <div class="space-x-3">
              <a href="/login" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                Go to Login
              </a>
              <a href="/" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                Back to Home
              </a>
            </div>
          </div>
        `;
      }
    }
    
    function showMenuOperatorAdminContent() {
      const guardElement = document.getElementById('menu-operator-guard');
      if (guardElement) {
        // Hide the guard completely
        guardElement.style.display = 'none';
        guardElement.style.visibility = 'hidden';
        guardElement.style.opacity = '0';
        guardElement.style.height = '0';
        guardElement.style.overflow = 'hidden';
        
        // Show menu operator admin layout
        const menuOperatorAdminLayout = document.getElementById('menu-operator-admin-layout');
        if (menuOperatorAdminLayout) {
          menuOperatorAdminLayout.classList.remove('hidden');
          menuOperatorAdminLayout.style.display = 'block';
          menuOperatorAdminLayout.style.visibility = 'visible';
          menuOperatorAdminLayout.style.opacity = '1';
          
          // Update menu operator info in header
          updateMenuOperatorInfo();
        }
        
        // Dispatch event that menu operator admin content is ready
        window.dispatchEvent(new CustomEvent('menu-operator-access-granted'));
      }
    }
    
    // Update menu operator info in header
    async function updateMenuOperatorInfo() {
      try {
        // Ensure Supabase is available
        if (!supabase) {
          await waitForSupabase();
        }
        
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          // Get user profile
          const { data: profile } = await supabase
            .from('profiles')
            .select('full_name')
            .eq('id', user.id)
            .single();
          
          // Update menu operator name
          const menuOperatorName = document.getElementById('menu-operator-name');
          if (menuOperatorName) {
            menuOperatorName.textContent = profile?.full_name || user.user_metadata?.full_name || user.email || 'Menu Operator';
          }
          
          // Update menu operator avatar
          const menuOperatorAvatar = document.getElementById('menu-operator-avatar');
          if (menuOperatorAvatar) {
            const name = profile?.full_name || user.user_metadata?.full_name || user.email || 'M';
            menuOperatorAvatar.textContent = name.charAt(0).toUpperCase();
          }
        }
      } catch (error) {
        console.warn('Could not update menu operator info:', error);
      }
    }
    
    // Simple menu operator sign out function
    async function handleMenuOperatorSignOut() {
      try {
        console.log('Menu operator signing out...');
        
        // Ensure Supabase is available
        if (!supabase) {
          await waitForSupabase();
        }
        
        // Sign out from Supabase
        await supabase.auth.signOut();
        
        // Clear all cached data
        sessionStorage.clear();
        localStorage.removeItem('supabase-auth-session');
        
        // Redirect to home page
        window.location.href = '/';
        
        } catch (error) {
        console.error('Error during menu operator sign out:', error);
        // Force redirect even if logout fails
        window.location.href = '/';
      }
    }

    // Make function globally available
    window.handleMenuOperatorSignOut = handleMenuOperatorSignOut;
    
    // Start checking menu operator access when page loads
    document.addEventListener('DOMContentLoaded', checkMenuOperatorAccess);
    
    // Also check when auth state changes
    window.addEventListener('auth-state-changed', checkMenuOperatorAccess);
    
    // Check immediately if already loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', checkMenuOperatorAccess);
    } else {
      checkMenuOperatorAccess();
    }
    
    // Fallback: Hide loading screen after 10 seconds if still showing
    setTimeout(() => {
      const guardElement = document.getElementById('menu-operator-guard');
      if (guardElement && guardElement.style.display !== 'none') {
        console.warn('⚠️ Menu operator access check timed out, showing content anyway');
        showMenuOperatorAdminContent();
      }
    }, 10000);
    
    console.log('MenuOperatorAdminLayout loaded successfully');
    </script>
</Layout>
