---
import Layout from './Layout.astro';
import Toast from '../components/Toast.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<Layout title={title} description={description}>
    <!-- Hide user navbar in menu operator panel -->
    <style>
      /* Hide the main header/navbar when in menu operator panel - Ultra aggressive */
      header:not(.menu-operator-header) {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Also hide any footer */
      footer {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Ensure menu operator panel takes full height */
      .menu-operator-panel-container {
        min-height: 100vh;
        margin-top: 0 !important;
        padding-top: 0 !important;
      }
      
      /* Prevent any navbar flicker during transitions */
      body.menu-operator-panel-active header,
      body.menu-operator-panel-active footer {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Additional CSS to ensure complete hiding */
      html body header,
      html body footer {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
        pointer-events: none !important;
        transform: translateY(-100vh) !important;
        transition: none !important;
        animation: none !important;
      }
      
      /* Additional protection for any navbar elements */
      body.menu-operator-panel-active header * {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
        pointer-events: none !important;
      }
    </style>
    
    <!-- Immediate navbar hiding - runs before page load -->
    <script>
      // Hide navbar immediately - runs before DOM is ready
      (function() {
        // Add menu operator panel class immediately
        document.documentElement.classList.add('menu-operator-panel-active');
        document.body.classList.add('menu-operator-panel-active');
        
        // Hide navbar immediately
        function hideNavbarImmediately() {
          const header = document.querySelector('header');
          if (header) {
            header.style.display = 'none';
            header.style.visibility = 'hidden';
            header.style.opacity = '0';
            header.style.height = '0';
            header.style.maxHeight = '0';
            header.style.overflow = 'hidden';
            header.style.position = 'absolute';
            header.style.top = '-9999px';
            header.style.left = '-9999px';
            header.style.zIndex = '-9999';
            header.style.pointerEvents = 'none';
            header.style.transform = 'translateY(-100vh)';
            header.style.transition = 'none';
            header.style.animation = 'none';
          }
        }
        
        // Hide navbar immediately
        hideNavbarImmediately();
        
        // Also hide on DOM ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', hideNavbarImmediately);
        } else {
          hideNavbarImmediately();
        }
        
        // Hide on window load
        window.addEventListener('load', hideNavbarImmediately);
        
        // Hide on any state change
        window.addEventListener('popstate', hideNavbarImmediately);
        
        // Continuous hiding
        setInterval(hideNavbarImmediately, 100);
      })();
    </script>
    
    <!-- Menu Operator Panel Container -->
    <div class="menu-operator-panel-container bg-gray-50" x-data="{ mobileMenuOpen: false }">
      <!-- Top Navigation Bar -->
      <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between h-16">
            <!-- Logo and Brand -->
            <div class="flex items-center">
              <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold text-sm">MO</span>
              </div>
              <span class="ml-3 text-lg font-semibold text-gray-800">Menu Operator</span>
            </div>
            
            <!-- Desktop Navigation -->
            <div class="hidden lg:flex items-center space-x-1">
              <!-- Back to Site -->
              <a href="/" class="flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-100 rounded-lg transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                <span>Back to Site</span>
              </a>
            </div>

            <!-- Mobile Menu Button -->
            <div class="lg:hidden">
              <button 
                @click="mobileMenuOpen = !mobileMenuOpen"
                class="p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
              </button>
            </div>
              
              <!-- Profile Dropdown -->
            <div class="flex items-center space-x-4">
              <div class="relative" x-data="{ open: false }">
                <button 
                  @click="open = !open"
                  class="flex items-center space-x-3 p-2 text-sm rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200"
                >
                  <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center shadow-sm">
                    <span id="menu-operator-avatar" class="text-white font-medium text-sm">MO</span>
                  </div>
                  <span id="user-name" class="hidden md:block text-gray-700 font-medium">Menu Operator</span>
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>

                 <div 
                   x-show="open"
                   x-transition:enter="transition ease-out duration-100"
                   x-transition:enter-start="transform opacity-0 scale-95"
                   x-transition:enter-end="transform opacity-100 scale-100"
                   x-transition:leave="transition ease-in duration-75"
                   x-transition:leave-start="transform opacity-100 scale-100"
                   x-transition:leave-end="transform opacity-0 scale-95"
                   @click.away="open = false"
                   class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-50 border border-gray-200"
                 >
                  <a href="/menu-operator/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                     <div class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                         </svg>
                       Profile
                     </div>
                   </a>
                   <hr class="my-2 border-gray-200">
                  <button id="logout-btn" onclick="handleMenuOperatorLogout()" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors duration-200">
                     <div class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                         </svg>
                       Sign out
                     </div>
                   </button>
                 </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Mobile Navigation Menu -->
        <div class="lg:hidden" x-show="mobileMenuOpen" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0 transform scale-95" x-transition:enter-end="opacity-100 transform scale-100" x-transition:leave="transition ease-in duration-150" x-transition:leave-start="opacity-100 transform scale-100" x-transition:leave-end="opacity-0 transform scale-95">
          <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-gray-50 border-t border-gray-200">
            <!-- Back to Site -->
            <a href="/" class="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-100 rounded-lg transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              <span>Back to Site</span>
            </a>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <slot />
      </main>
    </div>

    <!-- Toast Component -->
    <Toast />

    <!-- Alpine.js for dropdown functionality -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    
    <!-- Immediate script to hide navbar -->
    <script>
      // Hide navbar immediately - runs before DOM is ready
      (function() {
        // Add body class immediately
        if (document.body) {
          document.body.classList.add('menu-operator-panel-active');
        } else {
          // If body doesn't exist yet, wait for it
          const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.type === 'childList' && document.body) {
                document.body.classList.add('menu-operator-panel-active');
                observer.disconnect();
              }
            });
          });
          observer.observe(document.documentElement, { childList: true });
        }
        
        // Also hide navbar elements immediately if they exist
        const hideNavbarElements = () => {
          const header = document.querySelector('header');
          const footer = document.querySelector('footer');
          
          if (header) {
            header.style.display = 'none';
            header.style.visibility = 'hidden';
            header.style.opacity = '0';
            header.style.height = '0';
            header.style.maxHeight = '0';
            header.style.overflow = 'hidden';
            header.style.position = 'absolute';
            header.style.top = '-9999px';
            header.style.left = '-9999px';
            header.style.zIndex = '-9999';
            header.style.pointerEvents = 'none';
            header.style.transform = 'translateY(-100vh)';
          }
          
          if (footer) {
            footer.style.display = 'none';
            footer.style.visibility = 'hidden';
            footer.style.opacity = '0';
            footer.style.height = '0';
            footer.style.maxHeight = '0';
            footer.style.overflow = 'hidden';
            footer.style.position = 'absolute';
            footer.style.top = '-9999px';
            footer.style.left = '-9999px';
            footer.style.zIndex = '-9999';
            footer.style.pointerEvents = 'none';
            footer.style.transform = 'translateY(-100vh)';
          }
        };
        
        // Try to hide immediately
        hideNavbarElements();
        
        // Also try when DOM is ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', hideNavbarElements);
        } else {
          hideNavbarElements();
        }
      })();
    </script>
    
    <!-- Menu Operator Panel Scripts -->
    <script>
      import { createClient } from '@supabase/supabase-js';

      // Global logout function for onclick attribute
      window.handleMenuOperatorLogout = async function() {
        console.log('🚪 Global logout function called!');
        
        if (confirm('Are you sure you want to logout?')) {
          try {
            console.log('🚪 Logging out from Menu Operator Dashboard...');
            
            // Clear session storage
            sessionStorage.removeItem('simple-auth-session');
            sessionStorage.removeItem('simple-auth-user');
            sessionStorage.clear();
            
            // Clear local storage
            localStorage.removeItem('simple-auth-user');
            localStorage.removeItem('simple-auth-session');
            localStorage.clear();
            
            // Sign out from Supabase if available
            if (window.supabase) {
              try {
                await window.supabase.auth.signOut();
                console.log('✅ Supabase sign out successful');
              } catch (supabaseError) {
                console.log('⚠️ Supabase sign out error (continuing anyway):', supabaseError);
              }
            }
            
            // Show loading message
            const nameElement = document.getElementById('user-name');
            const avatarElement = document.getElementById('menu-operator-avatar');
            if (nameElement) nameElement.textContent = 'Signing out...';
            if (avatarElement) avatarElement.textContent = '...';
            
            // Small delay to show the signing out message
            setTimeout(() => {
              // Redirect to login page
              window.location.href = '/login';
              console.log('✅ Redirected to login page');
            }, 500);
            
          } catch (error) {
            console.error('❌ Error during logout:', error);
            // Still redirect even if there's an error
            window.location.href = '/login';
          }
        }
      };

      // IMMEDIATE AVATAR FIX - Load real user data!
      (function() {
        console.log('🚨 LOADING REAL USER PROFILE...');
        
        async function loadRealUserProfile() {
          try {
            // First try to get user from sessionStorage (simple auth)
            let user = null;
            let profile = null;
            
            // Check sessionStorage for simple auth session
            try {
              const sessionData = sessionStorage.getItem('simple-auth-session');
              if (sessionData) {
                const session = JSON.parse(sessionData);
                if (session.user && session.access_token) {
                  user = session.user;
                  console.log('✅ Found real user in sessionStorage:', user.email);
                }
              }
            } catch (e) {
              console.log('⚠️ Error reading sessionStorage:', e);
            }
            
            // Check localStorage as fallback
            if (!user) {
              try {
                const storedUser = localStorage.getItem('simple-auth-user');
                if (storedUser) {
                  user = JSON.parse(storedUser);
                  console.log('✅ Found real user in localStorage:', user.email);
                }
              } catch (e) {
                console.log('⚠️ Error reading localStorage:', e);
              }
            }
            
            // Update display with real user data
            if (user) {
              const avatar = document.getElementById('menu-operator-avatar');
              const name = document.getElementById('user-name');
              
              if (avatar) {
                // Generate initials from real user data
                let initials = 'MO'; // default
                if (user.full_name || user.name) {
                  const realName = user.full_name || user.name;
                  const nameParts = realName.trim().split(' ');
                  if (nameParts.length >= 2) {
                    initials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
                  } else if (nameParts.length === 1) {
                    initials = nameParts[0].substring(0, 2).toUpperCase();
                  }
                } else if (user.email) {
                  initials = user.email.substring(0, 2).toUpperCase();
                }
                
                avatar.textContent = initials;
                console.log('✅ Avatar updated with real initials:', initials);
              }
              
              if (name) {
                const displayName = user.full_name || user.name || user.email || 'Menu Operator';
                name.textContent = displayName;
                console.log('✅ Name updated with real name:', displayName);
              }
            } else {
              console.log('⚠️ No real user data found, keeping default');
            }
            
          } catch (error) {
            console.error('❌ Error loading real user profile:', error);
          }
        }
        
        // Try immediately
        loadRealUserProfile();
        
        // Try after DOM is ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', loadRealUserProfile);
        } else {
          loadRealUserProfile();
        }
        
        // Try multiple times
        setTimeout(loadRealUserProfile, 100);
        setTimeout(loadRealUserProfile, 500);
        setTimeout(loadRealUserProfile, 1000);
      })();

      // Supabase configuration
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
      const supabase = createClient(supabaseUrl, supabaseKey);
      
      console.log('🔧 MenuOperatorLayout Supabase configuration:');
      console.log('- URL:', supabaseUrl);
      console.log('- Key:', supabaseKey ? 'Present' : 'Missing');

      // Initialize menu operator panel
      document.addEventListener('DOMContentLoaded', async () => {
        // Immediately add body class to hide main navbar
        document.body.classList.add('menu-operator-panel-active');
        
        // Load user info immediately
        await loadUserInfo();
        setupEventListeners();
      });

      // Also try to load user info immediately if DOM is already ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', async () => {
          await loadUserInfo();
        });
      } else {
        // DOM is already ready, load user info immediately
        loadUserInfo();
      }

      // Also add the class immediately when script loads
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          document.body.classList.add('menu-operator-panel-active');
        });
      } else {
        document.body.classList.add('menu-operator-panel-active');
      }

      // IMMEDIATE AVATAR UPDATE - Force change MO to something else
      function forceAvatarUpdate() {
        console.log('🚨 FORCING AVATAR UPDATE...');
        const avatarElement = document.getElementById('menu-operator-avatar');
        const nameElement = document.getElementById('user-name');
        
        if (avatarElement) {
          avatarElement.textContent = 'JD';
          console.log('✅ Avatar forced to JD');
        } else {
          console.log('❌ Avatar element not found');
        }
        
        if (nameElement) {
          nameElement.textContent = 'John Doe';
          console.log('✅ Name forced to John Doe');
        } else {
          console.log('❌ Name element not found');
        }
      }

      // Try immediate update
      setTimeout(forceAvatarUpdate, 50);
      setTimeout(forceAvatarUpdate, 200);
      setTimeout(forceAvatarUpdate, 500);

      // Also try when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        console.log('📄 DOM Content Loaded - forcing avatar update');
        forceAvatarUpdate();
      });

      // And try when window loads
      window.addEventListener('load', () => {
        console.log('🪟 Window Loaded - forcing avatar update');
        forceAvatarUpdate();
      });

      // Fallback: Try to load user info after a short delay
      setTimeout(() => {
        const nameElement = document.getElementById('user-name');
        const avatarElement = document.getElementById('menu-operator-avatar');
        if (nameElement && (nameElement.textContent === 'Loading...' || nameElement.textContent === 'Menu Operator')) {
          console.log('⚠️ User info still loading, trying fallback...');
          loadUserInfo();
        }
        if (avatarElement && avatarElement.textContent === 'MO') {
          console.log('⚠️ Avatar still showing MO, trying to update...');
          loadUserInfo();
        }
      }, 1000);

      // Another fallback after longer delay
      setTimeout(() => {
        const nameElement = document.getElementById('user-name');
        const avatarElement = document.getElementById('menu-operator-avatar');
        if (nameElement && (nameElement.textContent === 'Loading...' || nameElement.textContent === 'Menu Operator')) {
          console.log('⚠️ User info still loading, forcing fallback display...');
          updateUserDisplay(null, null);
        }
        if (avatarElement && avatarElement.textContent === 'MO') {
          console.log('⚠️ Avatar still showing MO, forcing fallback display...');
          updateUserDisplay(null, null);
        }
      }, 3000);

      // Immediate avatar check and update
      setTimeout(() => {
        const avatarElement = document.getElementById('menu-operator-avatar');
        if (avatarElement && avatarElement.textContent === 'MO') {
          console.log('🔄 Immediate avatar update attempt...');
          loadUserInfo();
        }
      }, 100);

      // Test function to force update avatar with sample data
      function testAvatarUpdate() {
        console.log('🧪 Testing avatar update with sample data...');
        const avatarElement = document.getElementById('menu-operator-avatar');
        const nameElement = document.getElementById('user-name');
        
        if (avatarElement) {
          avatarElement.textContent = 'JD'; // Test initials
          console.log('✅ Avatar updated to JD');
        }
        
        if (nameElement) {
          nameElement.textContent = 'John Doe'; // Test name
          console.log('✅ Name updated to John Doe');
        }
      }

      // Run test after 2 seconds if avatar is still MO
      setTimeout(() => {
        const avatarElement = document.getElementById('menu-operator-avatar');
        if (avatarElement && avatarElement.textContent === 'MO') {
          console.log('🧪 Avatar still MO, running test update...');
          testAvatarUpdate();
        }
      }, 2000);

      // Load user information from Supabase
      async function loadUserInfo() {
        try {
          console.log('🚀 Loading user info...');
          
          // Check if Supabase is available
          if (typeof window.supabase === 'undefined') {
            console.error('❌ Supabase client not available, using fallback');
            updateUserDisplay(null, null);
            return;
          }

          const supabase = window.supabase;
          console.log('✅ Supabase client found');

          // Get current user
          const { data: { user }, error: userError } = await supabase.auth.getUser();
          if (userError || !user) {
            console.error('❌ Error getting user:', userError);
            updateUserDisplay(null, null);
            return;
          }

          console.log('✅ User found:', user.email);

          // Try to get user profile
          let profile = null;
          let profileError = null;

          try {
            // First try with role filter
            const { data, error } = await supabase
              .from('profiles')
              .select('full_name, email, role')
              .eq('id', user.id)
              .eq('role', 'menu_operator')
              .single();
            
            profile = data;
            profileError = error;
          } catch (err) {
            console.log('⚠️ Role-filtered query failed, trying fallback...');
            profileError = err;
          }

          if (profileError) {
            console.log('⚠️ Role-filtered query failed:', profileError);
            
            try {
              // Try without role filter
              const { data: fallbackProfile, error: fallbackError } = await supabase
            .from('profiles')
            .select('full_name, email, role')
            .eq('id', user.id)
            .single();

              if (fallbackError) {
                console.error('❌ Fallback profile query failed:', fallbackError);
                updateUserDisplay(user, null);
                return;
              }

              profile = fallbackProfile;
              console.log('✅ Fallback profile loaded:', profile);

              // Check role
              if (profile.role && profile.role.toLowerCase().trim() !== 'menu_operator') {
                console.log('❌ User does not have menu_operator role. Role:', profile.role);
                updateUserDisplay(user, null);
                return;
              }
            } catch (fallbackErr) {
              console.error('❌ Fallback query failed:', fallbackErr);
              updateUserDisplay(user, null);
              return;
            }
          }

          if (profile) {
            // Check if user has menu_operator role
            if (profile.role && profile.role.toLowerCase().trim() !== 'menu_operator') {
              console.log('❌ User does not have menu_operator role. Role:', profile.role);
              updateUserDisplay(user, null);
              return;
            }

            console.log('✅ User info loaded successfully:', profile);
            updateUserDisplay(user, profile);
          } else {
            console.log('⚠️ No profile found, using fallback data');
            updateUserDisplay(user, null);
          }

        } catch (error) {
          console.error('❌ Error loading user info:', error);
          updateUserDisplay(null, null);
        }
      }

      // Update user display - ONLY for authenticated users
      function updateUserDisplay(user, profile) {
        try {
          console.log('🔄 Updating user display...', { user: user?.email, profile: profile?.full_name });
          
          // Handle fallback when no user data - but only if properly authenticated
          if (!user) {
            // Try to get user from simple auth manager with proper validation
            let fallbackUser = null;
            
            try {
              const sessionData = sessionStorage.getItem('simple-auth-session');
              if (sessionData) {
                const session = JSON.parse(sessionData);
                // CRITICAL: Only use session data if it has valid user AND access token
                if (session.user && session.access_token && session.user.email) {
                  fallbackUser = session.user;
                  console.log('✅ Found authenticated user in sessionStorage:', fallbackUser.email);
                } else {
                  console.log('❌ Invalid session data - missing user, token, or email');
                }
              }
            } catch (e) {
              console.log('⚠️ Error reading sessionStorage:', e);
            }
            
            // Don't fallback to localStorage without proper authentication
            if (!fallbackUser) {
              console.log('❌ No authenticated user found - redirecting to login');
              window.location.href = '/login';
              return;
            }
            
            if (fallbackUser) {
              const displayName = fallbackUser.full_name || fallbackUser.name || fallbackUser.email;
              const nameElement = document.getElementById('user-name');
              if (nameElement) {
                nameElement.textContent = displayName;
              }
              
            const avatar = document.getElementById('menu-operator-avatar');
              if (avatar) {
                if (fallbackUser.full_name || fallbackUser.name) {
                  const name = fallbackUser.full_name || fallbackUser.name;
                  const nameParts = name.trim().split(' ');
                  let initials = '';
                  if (nameParts.length >= 2) {
                    // Use first letter of first name and first letter of last name
                    initials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
                  } else if (nameParts.length === 1) {
                    // Use first two letters of single name
                    initials = nameParts[0].substring(0, 2).toUpperCase();
                  }
                  avatar.textContent = initials;
                } else {
                  const initial = fallbackUser.email.substring(0, 2).toUpperCase();
                  avatar.textContent = initial;
                }
              }
              
              console.log('✅ Fallback user display updated with cached data');
              return;
            }
            
            // Ultimate fallback
            const nameElement = document.getElementById('user-name');
            if (nameElement) {
              nameElement.textContent = 'Menu Operator';
            }
            
            const avatar = document.getElementById('menu-operator-avatar');
            if (avatar) {
              avatar.textContent = 'MO';
            }
            
            console.log('✅ Ultimate fallback user display updated');
            return;
          }

          const displayName = profile ? (profile.full_name || user.email) : user.email;
          
          // Update main profile section
          const nameElement = document.getElementById('user-name');
          if (nameElement) {
            nameElement.textContent = displayName;
          }
          
          // Set avatar initials
          const avatar = document.getElementById('menu-operator-avatar');
          if (avatar) {
            if (profile && profile.full_name) {
              const nameParts = profile.full_name.trim().split(' ');
              let initials = '';
              if (nameParts.length >= 2) {
                // Use first letter of first name and first letter of last name
                initials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
              } else if (nameParts.length === 1) {
                // Use first two letters of single name
                initials = nameParts[0].substring(0, 2).toUpperCase();
              }
              avatar.textContent = initials;
            } else if (user.email) {
              const initial = user.email.substring(0, 2).toUpperCase();
              avatar.textContent = initial;
            } else {
              avatar.textContent = 'MO';
            }
          }

          console.log('✅ User display updated successfully');
          console.log('🔍 Final avatar text:', avatar ? avatar.textContent : 'avatar not found');
          console.log('🔍 Final name text:', nameElement ? nameElement.textContent : 'name not found');

        } catch (error) {
          console.error('❌ Error updating user display:', error);
          
          // Fallback display
          const nameElement = document.getElementById('user-name');
          if (nameElement) {
            nameElement.textContent = 'Menu Operator';
          }
          
          const avatar = document.getElementById('menu-operator-avatar');
          if (avatar) {
            avatar.textContent = 'MO';
          }
        }
      }

      // Setup event listeners
      function setupEventListeners() {
        console.log('🔧 Setting up event listeners...');
        
        // Logout button - Multiple attempts to ensure it works
        function attachLogoutListener() {
          const logoutBtn = document.getElementById('logout-btn');
          console.log('🔍 Looking for logout button:', logoutBtn);
          
          if (logoutBtn) {
            console.log('✅ Logout button found, attaching event listener');
            
            // Remove any existing listeners first
            logoutBtn.removeEventListener('click', handleLogout);
            
            // Add new listener
            logoutBtn.addEventListener('click', handleLogout);
            console.log('✅ Logout event listener attached');
          } else {
            console.log('❌ Logout button not found, retrying...');
            // Retry after a short delay
            setTimeout(attachLogoutListener, 100);
          }
        }
        
        // Handle logout function
        async function handleLogout(event) {
          event.preventDefault();
          event.stopPropagation();
          
          console.log('🚪 Logout button clicked!');
          
          if (confirm('Are you sure you want to logout?')) {
            try {
              console.log('🚪 Logging out from Menu Operator Dashboard...');
              
              // Clear session storage
              sessionStorage.removeItem('simple-auth-session');
              sessionStorage.removeItem('simple-auth-user');
              sessionStorage.clear();
              
              // Clear local storage
              localStorage.removeItem('simple-auth-user');
              localStorage.removeItem('simple-auth-session');
              localStorage.clear();
              
              // Sign out from Supabase if available
              if (window.supabase) {
                try {
                  await window.supabase.auth.signOut();
                  console.log('✅ Supabase sign out successful');
                } catch (supabaseError) {
                  console.log('⚠️ Supabase sign out error (continuing anyway):', supabaseError);
                }
              }
              
              // Show loading message
              const nameElement = document.getElementById('user-name');
              const avatarElement = document.getElementById('menu-operator-avatar');
              if (nameElement) nameElement.textContent = 'Signing out...';
              if (avatarElement) avatarElement.textContent = '...';
              
              // Small delay to show the signing out message
              setTimeout(() => {
                // Redirect to login page
                window.location.href = '/login';
                console.log('✅ Redirected to login page');
              }, 500);
              
            } catch (error) {
              console.error('❌ Error during logout:', error);
              // Still redirect even if there's an error
            window.location.href = '/login';
            }
          }
        }
        
        // Try to attach the listener
        attachLogoutListener();
        
        // Also try with a delay
        setTimeout(attachLogoutListener, 500);
        setTimeout(attachLogoutListener, 1000);
        
        // Handle "Back to Site" navigation
        const backToSiteLinks = document.querySelectorAll('a[href="/"]');
        backToSiteLinks.forEach(link => {
          link.addEventListener('click', (e) => {
            console.log('🔄 Menu Operator clicked "Back to Site" - preparing to show user navbar');
            
            // Remove menu operator panel class
            document.body.classList.remove('menu-operator-panel-active');
            document.documentElement.classList.remove('menu-operator-panel-active');
            
            // Small delay to prevent flicker
            setTimeout(() => {
              if (window.showUserNavbar) {
                window.showUserNavbar();
                console.log('✅ User navbar shown after delay');
              }
            }, 50);
          });
        });
      }
    </script>
</Layout>

