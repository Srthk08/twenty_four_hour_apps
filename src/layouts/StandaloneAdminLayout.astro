---
export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description || title} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Tailwind CSS is integrated via Astro, no CDN needed -->
    
    <!-- Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <!-- Supabase -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>

    <!-- Simple Alpine.js check -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Checking Alpine.js availability...');
        setTimeout(function() {
          if (window.Alpine) {
            console.log('Alpine.js is loaded');
          } else {
            console.error('Alpine.js is not loaded after timeout');
          }
        }, 1000);
      });
    </script>
    
    <!-- Text Visibility Fix -->
    <script>
      function fixTextVisibility() {
        console.log('Fixing text visibility...');
        const style = document.createElement('style');
        style.textContent = '.text-white { --tw-text-opacity: 1 !important; color: rgb(21 17 17) !important; }';
        document.head.appendChild(style);
      }
      document.addEventListener('DOMContentLoaded', fixTextVisibility);
    </script>
  </head>

  <body class="h-full bg-gray-50">
    <!-- Admin Guard Loading Screen -->
    <div id="admin-guard" class="min-h-screen flex items-center justify-center bg-gray-50">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <h2 class="text-xl font-semibold text-gray-900 mb-2">Checking Admin Access</h2>
        <p class="text-gray-600">Please wait while we verify your permissions...</p>
      </div>
    </div>

    <!-- Admin Content (hidden by default) -->
    <div id="admin-content" class="hidden">
      <slot />
    </div>

    <!-- Access Denied Screen (hidden by default) -->
    <div id="access-denied" class="hidden min-h-screen flex items-center justify-center bg-gray-50">
      <div class="max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Access Denied</h2>
        <p id="access-denied-message" class="text-gray-600 mb-6">You don't have permission to access the admin panel.</p>
        <div class="space-y-3">
          <a 
            href="/dashboard" 
            class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Go to Dashboard
          </a>
          <a 
            href="/" 
            class="w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Back to Home
          </a>
        </div>
      </div>
    </div>

    <script>
      // Supabase configuration
      const SUPABASE_URL = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
      const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
      
      let supabase = null;
      
      // Wait for Supabase to load
      function waitForSupabase() {
        return new Promise((resolve) => {
          if (window.supabase) {
            supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
            resolve(supabase);
          } else {
            setTimeout(() => waitForSupabase().then(resolve), 100);
          }
        });
      }
      
      // AdminGuard - Check if user has admin role
      async function checkAdminAccess() {
        try {
          console.log('AdminGuard: Checking admin access...');
          
          // Wait for Supabase to be available
          if (!supabase) {
            await waitForSupabase();
          }
          
          // Get current user from Supabase
          const { data: { user }, error: userError } = await supabase.auth.getUser();
          
          if (userError) {
            console.error('AdminGuard: Error getting user:', userError);
            showAccessDenied('Authentication error. Please login again.');
            return;
          }
          
          if (!user) {
            console.log('AdminGuard: No user logged in');
            showAccessDenied('Please login to access admin panel');
            return;
          }
          
          console.log('AdminGuard: User found:', user.email);
          
          // Get user profile to check role
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('role')
            .eq('id', user.id)
            .single();
          
          if (profileError) {
            console.error('AdminGuard: Error getting profile:', profileError);
            showAccessDenied('Error checking user permissions');
            return;
          }
          
          if (profile.role !== 'admin') {
            console.log('AdminGuard: User does not have admin role. Role:', profile.role);
            showAccessDenied('Access denied. Admin privileges required.');
            return;
          }
          
          console.log('AdminGuard: Admin access granted for user:', user.email);
          
          // Show admin content
          showAdminContent();
          
        } catch (error) {
          console.error('AdminGuard: Error checking admin access:', error);
          showAccessDenied('Error checking admin access. Please try again.');
        }
      }
      
      function showAccessDenied(message) {
        console.log('AdminGuard: Access denied -', message);
        document.getElementById('admin-guard').style.display = 'none';
        document.getElementById('admin-content').classList.add('hidden');
        document.getElementById('access-denied').classList.remove('hidden');
        document.getElementById('access-denied-message').textContent = message;
      }
      
      function showAdminContent() {
        console.log('AdminGuard: Showing admin content');
        document.getElementById('admin-guard').style.display = 'none';
        document.getElementById('access-denied').classList.add('hidden');
        document.getElementById('admin-content').classList.remove('hidden');
      }
      
      // Start checking admin access when page loads
      document.addEventListener('DOMContentLoaded', checkAdminAccess);
      
      // Also check when auth state changes
      window.addEventListener('auth-state-changed', checkAdminAccess);
      
      // Check immediately if already loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', checkAdminAccess);
      } else {
        checkAdminAccess();
      }
      
      // Fallback: Hide loading screen after 10 seconds if still showing
      setTimeout(() => {
        const guardElement = document.getElementById('admin-guard');
        if (guardElement && guardElement.style.display !== 'none') {
          console.warn('Admin access check timed out, showing content anyway');
          showAdminContent();
        }
      }, 10000);
      
      console.log('StandaloneAdminLayout loaded successfully');
    </script>
  </body>
</html>