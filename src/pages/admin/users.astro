---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="User Management - DevExpress">
    <div class="space-y-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">User Management</h1>
        <p class="text-gray-600 mt-2">View and manage all registered users</p>
      </div>

      <!-- Search and Filters -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="mb-4">
          <h2 class="text-lg font-semibold text-gray-900">Search & Filter Users</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <!-- Search -->
          <div class="md:col-span-2">
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search Users</label>
            <div class="relative">
              <input
                type="text"
                id="search"
                placeholder="Search by name, email, or company..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              />
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Role Filter -->
          <div>
            <label for="role-filter" class="block text-sm font-medium text-gray-700 mb-2">Role</label>
            <select id="role-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Roles</option>
              <option value="customer">Customer</option>
              <option value="admin">Admin</option>
              <option value="developer">Developer</option>
              <option value="support">Support</option>
            </select>
          </div>

          <!-- Status Filter -->
          <div>
            <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Statuses</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
              <option value="suspended">Suspended</option>
              <option value="pending_verification">Pending Verification</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Users Table -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">All Users</h3>
            <div class="flex items-center space-x-3">
              <span id="users-count" class="text-sm text-gray-500">No users</span>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="users-tbody" class="bg-white divide-y divide-gray-200">
              <tr>
                <td colspan="6" class="px-6 py-4 text-center text-gray-500">Loading users...</td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        <div class="bg-white px-6 py-3 border-t border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-700">Show</span>
              <select id="items-per-page" class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-primary-500">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
              <span class="text-sm text-gray-700">entries</span>
            </div>
            
            <div class="flex items-center space-x-2">
              <button id="refresh-users" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Refresh
              </button>
              <button id="prev-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Previous
              </button>
              <div id="page-numbers" class="flex items-center space-x-1">
                <!-- Page numbers will be generated dynamically -->
              </div>
              <button id="next-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Next
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Add/Edit User Modal -->
      <div id="user-modal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
        <div class="fixed inset-0 z-10 overflow-y-auto">
          <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl">
              <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="flex items-center justify-between mb-4">
                  <h3 id="modal-title" class="text-lg font-medium text-gray-900">Add New User</h3>
                  <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <form id="user-form" class="space-y-4">
                  <input type="hidden" id="user-id" />
                  
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label for="full-name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                      <input
                        type="text"
                        id="full-name"
                        name="full-name"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                    
                    <div>
                      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                  </div>

                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                      <input
                        type="tel"
                        id="phone"
                        name="phone"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                    
                    <div>
                      <label for="company-name" class="block text-sm font-medium text-gray-700 mb-1">Company</label>
                      <input
                        type="text"
                        id="company-name"
                        name="company-name"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                  </div>

                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label for="role" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                      <select
                        id="role"
                        name="role"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      >
                        <option value="customer">Customer</option>
                        <option value="admin">Admin</option>
                        <option value="developer">Developer</option>
                        <option value="support">Support</option>
                      </select>
                    </div>
                    
                    <div>
                      <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                      <select
                        id="status"
                        name="status"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      >
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="suspended">Suspended</option>
                        <option value="pending_verification">Pending Verification</option>
                      </select>
                    </div>
                  </div>

                  <div id="password-section" class="space-y-4">
                    <div>
                      <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                      <input
                        type="password"
                        id="password"
                        name="password"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                    
                    <div>
                      <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                      <input
                        type="password"
                        id="confirm-password"
                        name="confirm-password"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                  </div>

                  <div class="flex justify-end space-x-3 pt-4">
                    <button
                      type="button"
                      id="cancel-btn"
                      class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      id="save-btn"
                      class="px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-md hover:bg-primary-700"
                    >
                      Save User
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- User Details Modal -->
      <div id="user-details-modal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
        <div class="fixed inset-0 z-10 overflow-y-auto">
          <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl">
              <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="flex items-center justify-between mb-4">
                  <h3 id="details-modal-title" class="text-lg font-medium text-gray-900">User Details</h3>
                  <button id="close-details-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <div id="user-details-content" class="space-y-6">
                  <!-- User details will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</AdminLayout>

<script>
  // Supabase configuration
  const SUPABASE_URL = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
  const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
  
  let supabase = null;
  let currentUsers = [];
  let filteredUsers = [];
  let isEditing = false;
  
  // Pagination variables
  let currentPage = 1;
  let itemsPerPage = 10;
  let totalPages = 1;

  // Wait for Supabase to load
  function waitForSupabase() {
    return new Promise((resolve) => {
      if (window.supabase) {
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        resolve(supabase);
      } else {
        setTimeout(() => waitForSupabase().then(resolve), 100);
      }
    });
  }

  // Initialize users page
  async function initializeUsersPage() {
    console.log('🚀 Initializing users page...');
    console.log('🔍 Supabase available:', !!window.supabase);
    console.log('🔍 Current users before load:', currentUsers.length);
    
    await loadUsers();
    setupEventListeners();
  }

  // Load all users from Supabase
  async function loadUsers() {
    try {
      console.log('🔄 Loading ALL users from Supabase...');
      
      // Wait for Supabase to be available
      if (!supabase) {
        console.log('⏳ Waiting for Supabase to load...');
        await waitForSupabase();
      }
      
      console.log('✅ Supabase client ready:', !!supabase);
      
      // Get current user first to ensure we're authenticated
      const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !currentUser) {
        console.error('❌ Not authenticated:', userError);
        return;
      }
      
      console.log('✅ Authenticated as:', currentUser.email);
      
      // First, let's check if there are any users at all
      const { count, error: countError } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });
      
      if (countError) {
        console.error('❌ Error checking user count:', countError);
      } else {
        console.log('📊 Total users in database:', count);
      }
      
      const { data: users, error } = await supabase
        .from('profiles')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Error loading users:', error);
        console.error('Error details:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        return;
      }

      console.log('✅ Raw users data from Supabase:', users);
      
      // Process users data to ensure all fields exist
      currentUsers = (users || []).map(user => ({
        id: user.id,
        full_name: user.full_name || 'No Name',
        email: user.email || 'No Email',
        phone: user.phone || '',
        company_name: user.company_name || '',
        role: user.role || 'customer',
        status: user.status || 'active',
        created_at: user.created_at,
        updated_at: user.updated_at,
        last_login_at: user.last_login_at || null
      }));
      
      filteredUsers = [...currentUsers];
      
      // Reset pagination when loading new users
      currentPage = 1;
      
      console.log('✅ Processed users data:', currentUsers);
      console.log('📊 Total users found:', currentUsers.length);
      
      renderUsers();
      updateUsersCount();
    } catch (error) {
      console.error('❌ Error loading users:', error);
    }
  }

  // Render users in table
  function renderUsers() {
    const tbody = document.getElementById('users-tbody');
    if (!tbody) return;

    if (filteredUsers.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
              </svg>
              <p class="text-lg font-medium text-gray-900 mb-2">No users found</p>
              <p class="text-gray-500">Try adjusting your search or filters</p>
            </div>
          </td>
        </tr>
      `;
      updatePagination();
      return;
    }

    // Calculate pagination
    totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedUsers = filteredUsers.slice(startIndex, endIndex);

    tbody.innerHTML = paginatedUsers.map(user => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center mr-3">
              <span class="text-sm font-medium text-primary-600">${user.full_name ? user.full_name.charAt(0).toUpperCase() : 'U'}</span>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${user.full_name || 'No Name'}</div>
              <div class="text-sm text-gray-500">${user.email}</div>
              ${user.company_name ? `<div class="text-xs text-gray-400">${user.company_name}</div>` : ''}
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getRoleColor(user.role)}">
            ${user.role}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(user.status)}">
            ${user.status.replace('_', ' ')}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${user.last_login_at ? new Date(user.last_login_at).toLocaleDateString() : 'Never'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Invalid Date'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <div class="flex space-x-2">
            <button 
              onclick="viewUser('${user.id}')"
              class="text-primary-600 hover:text-primary-900"
            >
              View
            </button>
          </div>
        </td>
      </tr>
    `).join('');
    
    // Update pagination controls
    updatePagination();
  }

  // Update users count
  function updateUsersCount() {
    const countElement = document.getElementById('users-count');
    if (countElement) {
      countElement.textContent = `Showing ${filteredUsers.length} of ${currentUsers.length} users`;
    }
  }

  // Update pagination controls
  function updatePagination() {
    const pageNumbers = document.getElementById('page-numbers');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (!pageNumbers || !prevButton || !nextButton) return;
    
    // Update previous button
    prevButton.disabled = currentPage === 1;
    prevButton.classList.toggle('opacity-50', currentPage === 1);
    prevButton.classList.toggle('cursor-not-allowed', currentPage === 1);
    
    // Update next button
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.classList.toggle('opacity-50', currentPage === totalPages || totalPages === 0);
    nextButton.classList.toggle('cursor-not-allowed', currentPage === totalPages || totalPages === 0);
    
    // Generate page numbers
    let pageNumbersHTML = '';
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      pageNumbersHTML += `
        <button 
          class="px-3 py-1 text-sm border rounded-md transition-colors ${
            isActive 
              ? 'bg-primary-50 text-primary-700 border-primary-200' 
              : 'text-gray-700 bg-white border-gray-300 hover:bg-gray-50'
          }"
          onclick="goToPage(${i})"
        >
          ${i}
        </button>
      `;
    }
    
    pageNumbers.innerHTML = pageNumbersHTML;
  }

  // Go to specific page
  function goToPage(page) {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    renderUsers();
  }

  // Go to next page
  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      renderUsers();
    }
  }

  // Go to previous page
  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderUsers();
    }
  }

  // Change items per page
  function changeItemsPerPage() {
    const select = document.getElementById('items-per-page');
    if (select) {
      itemsPerPage = parseInt(select.value);
      currentPage = 1; // Reset to first page
      renderUsers();
    }
  }

  // Get role color
  function getRoleColor(role: string) {
    const colors = {
      'customer': 'bg-blue-100 text-blue-800',
      'admin': 'bg-red-100 text-red-800',
      'developer': 'bg-purple-100 text-purple-800',
      'support': 'bg-green-100 text-green-800'
    };
    return colors[role as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  }

  // Get status color
  function getStatusColor(status: string) {
    const colors = {
      'active': 'bg-green-100 text-green-800',
      'inactive': 'bg-gray-100 text-gray-800',
      'suspended': 'bg-red-100 text-red-800',
      'pending_verification': 'bg-yellow-100 text-yellow-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  }

  // Search and filter users
  function filterUsers() {
    const searchQuery = (document.getElementById('search') as HTMLInputElement)?.value?.toLowerCase() || '';
    const roleFilter = (document.getElementById('role-filter') as HTMLSelectElement)?.value || '';
    const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement)?.value || '';

    filteredUsers = currentUsers.filter(user => {
      // Add null checks to prevent undefined errors
      const fullName = user.full_name || '';
      const email = user.email || '';
      const companyName = user.company_name || '';
      
      // Search filter
      const matchesSearch = 
        fullName.toLowerCase().includes(searchQuery) ||
        email.toLowerCase().includes(searchQuery) ||
        (companyName && companyName.toLowerCase().includes(searchQuery));

      // Role filter
      const matchesRole = !roleFilter || user.role === roleFilter;

      // Status filter
      const matchesStatus = !statusFilter || user.status === statusFilter;

      return matchesSearch && matchesRole && matchesStatus;
    });

    renderUsers();
    updateUsersCount();
  }



  // View user details
  async function viewUser(userId) {
    try {
      console.log('Viewing user details for:', userId);
      
      const { data: user, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        console.error('Error loading user details:', error);
        return;
      }

      console.log('✅ User data retrieved:', user);
      console.log('📊 User fields:', {
        full_name: user.full_name,
        company_name: user.company_name,
        created_at: user.created_at,
        updated_at: user.updated_at,
        last_login_at: user.last_login_at,
        login_count: user.login_count
      });

      const modal = document.getElementById('user-details-modal');
      const modalTitle = document.getElementById('details-modal-title');
      const modalContent = document.getElementById('user-details-content');

      if (modal && modalTitle && modalContent) {
      modalTitle.textContent = `User Details - ${user.full_name || 'No Name'}`;
      
      modalContent.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- User Information -->
          <div class="space-y-4">
            <h4 class="text-md font-medium text-gray-900">User Information</h4>
            <div class="space-y-2">
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Full Name:</span>
                <span class="text-sm font-medium text-gray-900">${user.full_name || 'Not provided'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Email:</span>
                <span class="text-sm font-medium text-gray-900">${user.email}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Phone:</span>
                <span class="text-sm font-medium text-gray-900">${user.phone || 'Not provided'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Company:</span>
                <span class="text-sm font-medium text-gray-900">${user.company_name || 'Not provided'}</span>
              </div>
            </div>
          </div>

          <!-- Account Information -->
          <div class="space-y-4">
            <h4 class="text-md font-medium text-gray-900">Account Information</h4>
            <div class="space-y-2">
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Role:</span>
                <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getRoleColor(user.role)}">
                  ${user.role}
                </span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Status:</span>
                <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(user.status)}">
                  ${user.status.replace('_', ' ')}
                </span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Login Count:</span>
                <span class="text-sm font-medium text-gray-900">${user.login_count || user.loginCount || '0'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Last Login:</span>
                <span class="text-sm font-medium text-gray-900">${user.last_login_at || user.lastLoginAt ? new Date(user.last_login_at || user.lastLoginAt).toLocaleString() : 'Never'}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Activity Information -->
        <div class="space-y-4">
          <h4 class="text-md font-medium text-gray-900">Activity Information</h4>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-sm text-gray-500">Created:</span>
              <span class="text-sm font-medium text-gray-900">${user.created_at || user.createdAt ? new Date(user.created_at || user.createdAt).toLocaleString() : 'Not available'}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-sm text-gray-500">Last Updated:</span>
              <span class="text-sm font-medium text-gray-900">${user.updated_at || user.updatedAt ? new Date(user.updated_at || user.updatedAt).toLocaleString() : 'Not available'}</span>
            </div>
          </div>
        </div>
      `;

      modal.classList.remove('hidden');
    }
    } catch (error) {
      console.error('Error viewing user details:', error);
    }
  }


  // Show user modal
  function showUserModal(title: string) {
    const modal = document.getElementById('user-modal');
    const modalTitle = document.getElementById('modal-title');
    const passwordSection = document.getElementById('password-section');

    if (modal && modalTitle && passwordSection) {
      modalTitle.textContent = title;
      
      // Show password fields for new users
      if (!isEditing) {
        passwordSection.style.display = 'block';
        (document.getElementById('password') as HTMLInputElement).required = true;
        (document.getElementById('confirm-password') as HTMLInputElement).required = true;
      } else {
        passwordSection.style.display = 'none';
        (document.getElementById('password') as HTMLInputElement).required = false;
        (document.getElementById('confirm-password') as HTMLInputElement).required = false;
      }

      modal.classList.remove('hidden');
    }
  }

  // Hide user modal
  function hideUserModal() {
    document.getElementById('user-modal')?.classList.add('hidden');
  }

  // Reset user form
  function resetUserForm() {
    const form = document.getElementById('user-form') as HTMLFormElement;
    if (form) {
      form.reset();
      (document.getElementById('user-id') as HTMLInputElement).value = '';
    }
  }

  // Populate user form for editing
  function populateUserForm(user: any) {
    (document.getElementById('user-id') as HTMLInputElement).value = user.id;
    (document.getElementById('full-name') as HTMLInputElement).value = user.full_name || '';
    (document.getElementById('email') as HTMLInputElement).value = user.email || '';
    (document.getElementById('phone') as HTMLInputElement).value = user.phone || '';
    (document.getElementById('company-name') as HTMLInputElement).value = user.company_name || '';
    (document.getElementById('role') as HTMLSelectElement).value = user.role || 'customer';
    (document.getElementById('status') as HTMLSelectElement).value = user.status || 'active';
  }

  // Handle user form submission
  function handleUserFormSubmit(e: Event) {
    e.preventDefault();

    const formData = new FormData(e.target as HTMLFormElement);
    const userId = (document.getElementById('user-id') as HTMLInputElement).value;
    
    const userData = {
      fullName: formData.get('full-name') as string,
      email: formData.get('email') as string,
      phone: formData.get('phone') as string,
      companyName: formData.get('company-name') as string,
      role: formData.get('role') as string,
      status: formData.get('status') as string
    };

    // Validate required fields
    if (!userData.fullName || !userData.email) {
      alert('Please fill in all required fields');
      return;
    }

    // Validate password for new users
    if (!isEditing) {
      const password = formData.get('password') as string;
      const confirmPassword = formData.get('confirm-password') as string;
      
      if (!password || password !== confirmPassword) {
        alert('Passwords do not match');
        return;
      }
    }

    try {
      if (isEditing) {
        // Update existing user in local array
        const userIndex = currentUsers.findIndex(u => u.id === userId);
        if (userIndex > -1) {
          currentUsers[userIndex] = { ...currentUsers[userIndex], ...userData };
          filteredUsers = [...currentUsers];
          renderUsers();
          updateUsersCount();
          alert('User updated successfully!');
          hideUserModal();
        } else {
          alert('User not found');
        }
      } else {
        // Add new user (this would need to be implemented in the data store)
        alert('User creation not implemented in this demo');
      }
    } catch (error) {
      alert('Failed to save user');
      console.error('Error saving user:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
    // Search and filter inputs
    document.getElementById('search')?.addEventListener('input', filterUsers);
    document.getElementById('role-filter')?.addEventListener('change', filterUsers);
    document.getElementById('status-filter')?.addEventListener('change', filterUsers);

    // Pagination controls
    document.getElementById('items-per-page')?.addEventListener('change', changeItemsPerPage);
    document.getElementById('prev-page')?.addEventListener('click', prevPage);
    document.getElementById('next-page')?.addEventListener('click', nextPage);
    document.getElementById('refresh-users')?.addEventListener('click', loadUsers);

    // User form
    document.getElementById('user-form')?.addEventListener('submit', handleUserFormSubmit);

    // Modal close buttons
    document.getElementById('close-modal')?.addEventListener('click', hideUserModal);
    document.getElementById('cancel-btn')?.addEventListener('click', hideUserModal);
    document.getElementById('close-details-modal')?.addEventListener('click', () => {
      document.getElementById('user-details-modal')?.classList.add('hidden');
    });

    // Close modals when clicking outside
    document.getElementById('user-modal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        (e.currentTarget as HTMLElement).classList.add('hidden');
      }
    });

    document.getElementById('user-details-modal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        (e.currentTarget as HTMLElement).classList.add('hidden');
      }
    });
  }

  // Make pagination functions globally available
  window.goToPage = goToPage;
  window.nextPage = nextPage;
  window.prevPage = prevPage;
  window.changeItemsPerPage = changeItemsPerPage;

  // Initialize page when DOM loads
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('📄 Users page DOM loaded, initializing...');
    console.log('🔍 Supabase available:', !!window.supabase);
    console.log('🔍 Current users before load:', currentUsers.length);
    await initializeUsersPage();
  });

  // Also try to initialize after a short delay in case of timing issues
  setTimeout(async () => {
    if (currentUsers.length === 0) {
      console.log('⏰ Retrying user load after delay...');
      await initializeUsersPage();
    }
  }, 2000);

  // Make functions globally available for onclick handlers
  (window as any).viewUser = viewUser;
</script>
