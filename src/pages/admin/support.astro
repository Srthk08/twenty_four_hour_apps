---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Support & Help Center - DevExpress">
    <div class="space-y-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Support & Help Center</h1>
        <p class="text-gray-600 mt-2">Manage customer support tickets and AI chat logs</p>
      </div>



      <!-- Support Tickets -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">Support Tickets</h3>
            <div class="flex items-center space-x-3">
              <span id="tickets-count" class="text-sm text-gray-500">Loading tickets...</span>
              <button id="refresh-tickets-header" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                Refresh
              </button>

            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ticket #</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="tickets-tbody" class="bg-white divide-y divide-gray-200">
              <tr>
                <td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading tickets...</td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Empty State -->
        <div id="empty-tickets" class="hidden px-6 py-12 text-center">
          <div class="flex flex-col items-center">
            <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-lg font-medium text-gray-900 mb-2">No support tickets found</p>
            <p class="text-gray-500">Support tickets will appear here when users create them</p>
          </div>
        </div>

        <!-- Pagination -->
        <div class="bg-white px-6 py-3 border-t border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-700">Show</span>
              <select id="items-per-page" class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-primary-500">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
              <span class="text-sm text-gray-700">entries</span>
            </div>
            
            <div class="flex items-center space-x-2">
              <button id="refresh-tickets" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Refresh
              </button>
              <button id="prev-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Previous
              </button>
              <div id="page-numbers" class="flex items-center space-x-1">
                <!-- Page numbers will be generated dynamically -->
              </div>
              <button id="next-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Next
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- AI Chat Logs - Empty State -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">AI Chat Logs</h3>
            <div class="flex items-center space-x-3">
              <span class="text-sm text-gray-500">No conversations yet</span>
            </div>
          </div>
        </div>

        <div class="p-6 text-center">
          <div class="flex flex-col items-center">
            <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            <p class="text-lg font-medium text-gray-900 mb-2">No AI chat logs found</p>
            <p class="text-gray-500">AI chat conversations will appear here when users interact with the AI assistant</p>
          </div>
        </div>
      </div>

      <!-- Ticket Details Modal -->
      <div id="ticket-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
          <div class="mt-3">
            <div class="flex items-center justify-between mb-4">
              <h3 id="modal-title" class="text-lg font-medium text-gray-900">Ticket Details</h3>
              <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <div id="modal-content" class="space-y-4">
              <!-- Content will be populated by JavaScript -->
              <div class="text-center text-gray-500">
                Loading ticket details...
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</AdminLayout>

<script>
  // Supabase configuration
  const SUPABASE_URL = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
  const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
  
  let supabase = null;
  let currentTickets = [];
  let filteredTickets = [];
  
  // Pagination variables
  let currentPage = 1;
  let itemsPerPage = 10;
  let totalPages = 1;
  
  // Wait for Supabase to load
  function waitForSupabase() {
    return new Promise((resolve) => {
      if (window.supabase) {
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        resolve(supabase);
      } else {
        setTimeout(() => waitForSupabase().then(resolve), 100);
      }
    });
  }

  // Initialize support page
  function initializeSupportPage() {
    loadTickets();
    setupEventListeners();
  }

  // Load all support tickets
  async function loadTickets() {
    try {
      console.log('üîÑ Loading tickets from Supabase...');
      
      // Show loading state
      const refreshButtons = document.querySelectorAll('#refresh-tickets-header, #refresh-tickets');
      refreshButtons.forEach(btn => {
        if (btn) {
          btn.disabled = true;
          btn.textContent = 'Loading...';
        }
      });
      
      // Update tickets count
      const ticketsCount = document.getElementById('tickets-count');
      if (ticketsCount) {
        ticketsCount.textContent = 'Loading tickets...';
      }
      
      // Wait for Supabase to be available
      if (!supabase) {
        await waitForSupabase();
      }
      
      if (!supabase) {
        console.error('‚ùå Supabase client not available');
        showTicketsError('Database connection error. Please refresh the page and try again.');
        return;
      }

      const { data: tickets, error } = await supabase
        .from('support_tickets')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error loading tickets:', error);
        console.error('Error details:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        
        // Show specific error messages based on error type
        let errorMessage = '';
        if (error.code === 'PGRST116') {
          errorMessage = 'Table "support_tickets" does not exist. Please run the fix-support-tickets-complete.sql script in Supabase SQL Editor.';
        } else if (error.code === 'PGRST301') {
          errorMessage = 'Permission denied. Please check RLS policies in Supabase.';
        } else if (error.message.includes('permission denied for table users')) {
          errorMessage = 'Database Error: permission denied for table users. Please run the fix-support-tickets-complete.sql script in Supabase.';
        } else {
          errorMessage = `Database Error: ${error.message}. Please run the fix-support-tickets-complete.sql script in Supabase.`;
        }
        
        showTicketsError(errorMessage);
        return;
      }

      console.log('‚úÖ Raw tickets from Supabase:', tickets);
      
      if (!tickets || tickets.length === 0) {
        console.log('‚ö†Ô∏è No tickets found in database');
        currentTickets = [];
        filteredTickets = [];
        renderTickets();
        updateTicketsCount();
        
        // Show proper empty state
        const tbody = document.getElementById('tickets-tbody');
        const emptyState = document.getElementById('empty-tickets');
        
        if (tbody) {
          tbody.innerHTML = `
            <tr>
              <td colspan="7" class="px-6 py-4 text-center">
                <div class="text-blue-600">
                  <div class="font-medium">üìã No support tickets found</div>
                  <div class="text-sm mt-1">Support tickets will appear here when users create them.</div>
                  <div class="text-xs mt-2 text-gray-500">
                    To add sample data, run the fix-support-tickets-complete.sql script in Supabase SQL Editor.
                  </div>
                </div>
              </td>
            </tr>
          `;
        }
        
        if (emptyState) {
          emptyState.classList.add('hidden');
        }
        
        return;
      }
      
      // Process tickets to ensure all fields exist
      currentTickets = tickets.map(ticket => {
        console.log('üîç Processing ticket:', {
          id: ticket.id,
          rawTicket: ticket,
          allKeys: Object.keys(ticket)
        });
        
        // Try multiple possible field names for each property
        const processedTicket = {
          id: ticket.id,
          ticketNumber: ticket.ticket_number || ticket.ticketNumber || ticket.ticket_id || ticket.id,
          customerName: ticket.customer_name || ticket.customerName || ticket.name || ticket.user_name || ticket.userName || 'No Name',
          customerEmail: ticket.customer_email || ticket.customerEmail || ticket.email || ticket.user_email || ticket.userEmail || 'No Email',
          subject: ticket.subject || ticket.title || ticket.issue || 'No Subject',
          description: ticket.description || ticket.message || ticket.content || ticket.details || 'No Description',
          priority: ticket.priority || ticket.urgency || 'medium',
          status: ticket.status || ticket.state || 'open',
          createdAt: ticket.created_at || ticket.createdAt || ticket.date_created || ticket.dateCreated || new Date().toISOString(),
          updatedAt: ticket.updated_at || ticket.updatedAt || ticket.date_updated || ticket.dateUpdated || new Date().toISOString(),
          adminReplies: ticket.admin_replies || ticket.adminReplies || ticket.replies || ticket.responses || []
        };
        
        console.log('‚úÖ Processed ticket:', {
          original: ticket,
          processed: processedTicket,
          nameSource: ticket.customer_name ? 'customer_name' : ticket.customerName ? 'customerName' : ticket.name ? 'name' : 'fallback',
          emailSource: ticket.customer_email ? 'customer_email' : ticket.customerEmail ? 'customerEmail' : ticket.email ? 'email' : 'fallback'
        });
        
        return processedTicket;
      });
      
      filteredTickets = [...currentTickets];
      
      // Reset pagination when loading new tickets
      currentPage = 1;
      
      console.log('üìä Final processed tickets:', currentTickets);
      
      renderTickets();
      updateTicketsCount();
      
    } catch (error) {
      console.error('‚ùå Error loading tickets:', error);
      showTicketsError(`Connection Error: ${error.message}`);
    } finally {
      // Reset refresh buttons
      const refreshButtons = document.querySelectorAll('#refresh-tickets-header, #refresh-tickets');
      refreshButtons.forEach(btn => {
        if (btn) {
          btn.disabled = false;
          btn.textContent = 'Refresh';
        }
      });
    }
  }
  
  // Show error message in the tickets table
  function showTicketsError(message) {
    const tbody = document.getElementById('tickets-tbody');
    const emptyState = document.getElementById('empty-tickets');
    
    if (tbody) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="px-6 py-4 text-center">
            <div class="text-red-600">
              <div class="font-medium">Error Loading Tickets</div>
              <div class="text-sm mt-1">${message}</div>
              <div class="text-xs mt-2 text-gray-500">
                Please check the browser console for more details and run the fix-support-tickets-complete.sql script in Supabase.
              </div>
            </div>
          </td>
        </tr>
      `;
    }
    
    if (emptyState) {
      emptyState.classList.add('hidden');
    }
    
    // Reset refresh buttons
    const refreshButtons = document.querySelectorAll('#refresh-tickets-header, #refresh-tickets');
    refreshButtons.forEach(btn => {
      if (btn) {
        btn.disabled = false;
        btn.textContent = 'Refresh';
      }
    });
    
    // Update tickets count
    const ticketsCount = document.getElementById('tickets-count');
    if (ticketsCount) {
      ticketsCount.textContent = 'Error loading tickets';
    }
  }

  // Render tickets in table
  function renderTickets() {
    const tbody = document.getElementById('tickets-tbody');
    const emptyState = document.getElementById('empty-tickets');
    
    if (!tbody || !emptyState) return;

    if (filteredTickets.length === 0) {
      tbody.innerHTML = '';
      emptyState.classList.remove('hidden');
      updatePagination();
      return;
    }

    emptyState.classList.add('hidden');
    
    // Calculate pagination
    totalPages = Math.ceil(filteredTickets.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedTickets = filteredTickets.slice(startIndex, endIndex);
    
    console.log('Rendering tickets:', paginatedTickets); // Debug log
    
    tbody.innerHTML = paginatedTickets.map(ticket => {
      console.log('Rendering ticket:', ticket.customerName, ticket.customerEmail); // Debug log
      
      return `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${ticket.ticketNumber}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3">
              <span class="text-sm font-medium text-primary-600">${(ticket.customerName || 'U').charAt(0).toUpperCase()}</span>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${ticket.customerName || 'Unknown User'}</div>
              <div class="text-sm text-gray-500">${ticket.customerEmail || 'No Email'}</div>
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${ticket.subject}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getPriorityColor(ticket.priority)}">
            ${ticket.priority}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(ticket.status)}">
            ${ticket.status.replace('_', ' ')}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${formatTimeAgo(ticket.createdAt)}
        </td>
                 <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
           <div class="flex items-center space-x-2">
             <button onclick="viewTicket('${ticket.id}')" class="text-primary-600 hover:text-primary-900">View & Reply</button>
           </div>
         </td>
      </tr>
      `;
    }).join('');
    
    // Update pagination controls
    updatePagination();
  }

  // Update pagination controls
  function updatePagination() {
    const pageNumbers = document.getElementById('page-numbers');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (!pageNumbers || !prevButton || !nextButton) return;
    
    // Update previous button
    prevButton.disabled = currentPage === 1;
    prevButton.classList.toggle('opacity-50', currentPage === 1);
    prevButton.classList.toggle('cursor-not-allowed', currentPage === 1);
    
    // Update next button
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.classList.toggle('opacity-50', currentPage === totalPages || totalPages === 0);
    nextButton.classList.toggle('cursor-not-allowed', currentPage === totalPages || totalPages === 0);
    
    // Generate page numbers
    let pageNumbersHTML = '';
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      pageNumbersHTML += `
        <button 
          class="px-3 py-1 text-sm border rounded-md transition-colors ${
            isActive 
              ? 'bg-primary-50 text-primary-700 border-primary-200' 
              : 'text-gray-700 bg-white border-gray-300 hover:bg-gray-50'
          }"
          onclick="goToPage(${i})"
        >
          ${i}
        </button>
      `;
    }
    
    pageNumbers.innerHTML = pageNumbersHTML;
  }

  // Go to specific page
  function goToPage(page) {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    renderTickets();
  }

  // Go to next page
  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      renderTickets();
    }
  }

  // Go to previous page
  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderTickets();
    }
  }

  // Change items per page
  function changeItemsPerPage() {
    const select = document.getElementById('items-per-page');
    if (select) {
      itemsPerPage = parseInt(select.value);
      currentPage = 1; // Reset to first page
      renderTickets();
    }
  }

  // Update tickets count
  function updateTicketsCount() {
    const countElement = document.getElementById('tickets-count');
    if (countElement) {
      countElement.textContent = `Showing ${filteredTickets.length} of ${currentTickets.length} tickets`;
    }
  }

  // Get priority color
  function getPriorityColor(priority) {
    const colors = {
      'low': 'bg-green-100 text-green-800',
      'medium': 'bg-yellow-100 text-yellow-800',
      'high': 'bg-orange-100 text-orange-800',
      'urgent': 'bg-red-100 text-red-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  }

  // Get status color
  function getStatusColor(status) {
    const colors = {
      'open': 'bg-blue-100 text-blue-800',
      'in_progress': 'bg-yellow-100 text-yellow-800',
      'resolved': 'bg-green-100 text-green-800',
      'closed': 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  // Format time ago
  function formatTimeAgo(dateString) {
    const now = new Date();
    const date = new Date(dateString);
    const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
    
    return date.toLocaleDateString();
  }

  // Ticket management functions
  function viewTicket(ticketId) {
    const ticket = currentTickets.find(t => t.id === ticketId);
    if (!ticket) return;

    document.getElementById('ticket-modal').classList.remove('hidden');
    
    // Populate modal with ticket details
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    
    if (modalTitle && modalContent) {
      modalTitle.textContent = `Ticket ${ticket.ticketNumber}`;
             modalContent.innerHTML = `
         <div class="space-y-4">
           <!-- Customer Information -->
           <div>
             <label class="block text-sm font-medium text-gray-700 mb-2">Customer</label>
             <div class="bg-gray-50 p-3 rounded text-sm text-gray-900">
               ${ticket.customerName} (${ticket.customerEmail})
             </div>
           </div>
           
           <!-- Subject -->
           <div>
             <label class="block text-sm font-medium text-gray-700 mb-2">Subject</label>
             <div class="bg-gray-50 p-3 rounded text-sm text-gray-900">
               ${ticket.subject}
             </div>
           </div>
           
           <!-- Issue Description -->
           <div>
             <label class="block text-sm font-medium text-gray-700 mb-2">Issue Description</label>
             <div class="bg-gray-50 p-3 rounded text-sm text-gray-900">
               ${ticket.description}
             </div>
           </div>
           
           <!-- Admin Replies Section -->
           <div>
             <label class="block text-sm font-medium text-gray-700 mb-2">Admin Replies</label>
             <div id="admin-replies" class="bg-gray-50 p-3 rounded text-sm text-gray-900 max-h-32 overflow-y-auto">
               ${ticket.adminReplies && ticket.adminReplies.length > 0 ? 
                 ticket.adminReplies.map(reply => `
                   <div class="mb-2 p-2 bg-blue-50 rounded border-l-4 border-blue-400">
                     <div class="font-medium text-blue-800">Admin Reply:</div>
                     <div class="text-blue-700">${reply.message}</div>
                     <div class="text-xs text-blue-600 mt-1">${new Date(reply.timestamp).toLocaleString()}</div>
                   </div>
                 `).join('') : 
                 '<div class="text-gray-500">No admin replies yet</div>'
               }
             </div>
           </div>
           
           <!-- Status Update -->
           <div>
             <label for="ticket-status" class="block text-sm font-medium text-gray-700">Update Status</label>
             <select id="ticket-status" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
               <option value="open" ${ticket.status === 'open' ? 'selected' : ''}>Open</option>
               <option value="in_progress" ${ticket.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
               <option value="resolved" ${ticket.status === 'resolved' ? 'selected' : ''}>Resolved</option>
               <option value="closed" ${ticket.status === 'closed' ? 'selected' : ''}>Closed</option>
             </select>
           </div>
           
           <!-- Admin Response -->
           <div>
             <label for="ticket-response" class="block text-sm font-medium text-gray-700">Add Admin Reply</label>
             <textarea
               id="ticket-response"
               rows="4"
               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
               placeholder="Type your reply to the customer..."
             ></textarea>
           </div>
           
           <!-- Action Buttons -->
           <div class="flex justify-end space-x-3 pt-4">
             <button onclick="closeTicketModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
               Cancel
             </button>
             <button onclick="updateTicket('${ticket.id}')" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-md hover:bg-primary-700">
               Send Reply & Update
             </button>
           </div>
         </div>
       `;
    }
  }
  
  function closeTicketModal() {
    document.getElementById('ticket-modal').classList.add('hidden');
  }
  
  
  async function reopenTicket(ticketId) {
    if (confirm('Reopen this ticket?')) {
      try {
        // Wait for Supabase to be available
        if (!supabase) {
          await waitForSupabase();
        }
        
        // Update ticket status in Supabase
        const { error } = await supabase
          .from('support_tickets')
          .update({ 
            status: 'open',
            updated_at: new Date().toISOString()
          })
          .eq('id', ticketId);
        
        if (error) {
          console.error('Error reopening ticket:', error);
          alert('Failed to reopen ticket: ' + error.message);
          return;
        }
        
        // Update local array
        const ticketIndex = currentTickets.findIndex(t => t.id === ticketId);
        if (ticketIndex > -1) {
          currentTickets[ticketIndex].status = 'open';
          currentTickets[ticketIndex].updatedAt = new Date().toISOString();
          filteredTickets = [...currentTickets];
          renderTickets();
          updateTicketsCount();
        }
        
        alert('Ticket reopened successfully!');
      } catch (error) {
        console.error('Error reopening ticket:', error);
        alert('Failed to reopen ticket');
      }
    }
  }
  
  async function updateTicket(ticketId) {
    const status = document.getElementById('ticket-status').value;
    const response = document.getElementById('ticket-response').value;
    
    if (!response.trim()) {
      alert('Please add a reply before updating the ticket');
      return;
    }
    
    try {
      // Wait for Supabase to be available
      if (!supabase) {
        await waitForSupabase();
      }
      
      // Find the ticket to get its details
      const ticket = currentTickets.find(t => t.id === ticketId);
      if (!ticket) {
        alert('Ticket not found');
        return;
      }
      
      // Create admin reply object
      const adminReply = {
        message: response,
        timestamp: new Date().toISOString(),
        adminName: 'Admin' // You can get this from the current admin user
      };
      
      // Get existing admin replies and add new one
      const existingReplies = ticket.adminReplies || [];
      const updatedReplies = [...existingReplies, adminReply];
      
      // Update ticket in Supabase
      const { error } = await supabase
        .from('support_tickets')
        .update({ 
          status: status,
          admin_replies: updatedReplies,
          updated_at: new Date().toISOString()
        })
        .eq('id', ticketId);
      
      if (error) {
        console.error('Error updating ticket:', error);
        alert('Failed to update ticket: ' + error.message);
        return;
      }
      
      // Update local array
      const ticketIndex = currentTickets.findIndex(t => t.id === ticketId);
      if (ticketIndex > -1) {
        currentTickets[ticketIndex].status = status;
        currentTickets[ticketIndex].adminReplies = updatedReplies;
        currentTickets[ticketIndex].updatedAt = new Date().toISOString();
        filteredTickets = [...currentTickets];
        renderTickets();
        updateTicketsCount();
      }
      
      // Show success message
      const successMessage = `‚úÖ Reply sent successfully!\n\nTicket #${ticket.ticketNumber} has been updated.\nStatus: ${status}\nCustomer: ${ticket.customerName}\n\nAn email notification has been sent to ${ticket.customerEmail}`;
      alert(successMessage);
      
      closeTicketModal();
      
      // Show success toast
      showSuccessToast(`Reply sent to ${ticket.customerName} for ticket #${ticket.ticketNumber}`);
      
    } catch (error) {
      console.error('Error updating ticket:', error);
      alert('Failed to update ticket');
    }
  }



  // Setup event listeners
  function setupEventListeners() {
    // Refresh buttons
    document.getElementById('refresh-tickets-header')?.addEventListener('click', () => {
      console.log('üîÑ Refresh button clicked (header)');
      loadTickets();
    });
    
    document.getElementById('refresh-tickets')?.addEventListener('click', () => {
      console.log('üîÑ Refresh button clicked (pagination)');
      loadTickets();
    });
    
    // Pagination controls
    document.getElementById('items-per-page')?.addEventListener('change', changeItemsPerPage);
    document.getElementById('prev-page')?.addEventListener('click', prevPage);
    document.getElementById('next-page')?.addEventListener('click', nextPage);

    // Modal close button
    document.getElementById('close-modal')?.addEventListener('click', closeTicketModal);

    // Close modal when clicking outside
    document.getElementById('ticket-modal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        closeTicketModal();
      }
    });
  }

  // Make pagination functions globally available
  window.goToPage = goToPage;
  window.nextPage = nextPage;
  window.prevPage = prevPage;
  window.changeItemsPerPage = changeItemsPerPage;

  // Initialize page when DOM loads
  document.addEventListener('DOMContentLoaded', initializeSupportPage);

  // Show success toast notification
  function showSuccessToast(message) {
    // Create toast element
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
    toast.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-8 text-white mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.classList.remove('translate-x-full');
    }, 100);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      toast.classList.add('translate-x-full');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, 5000);
  }

  // Make functions globally available for onclick handlers
  (window as any).viewTicket = viewTicket;
  (window as any).closeTicketModal = closeTicketModal;
  (window as any).reopenTicket = reopenTicket;
  (window as any).updateTicket = updateTicket;

</script>
