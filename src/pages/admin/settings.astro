---
import StandaloneAdminLayout from '../../layouts/StandaloneAdminLayout.astro';
---

<StandaloneAdminLayout title="Admin Settings - DevExpress">
    <div class="space-y-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Admin Settings</h1>
        <p class="text-gray-600 mt-2">Manage your admin panel preferences and system settings</p>
      </div>

      <!-- Settings Sections -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- General Settings -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">General Settings</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Admin Panel Theme</label>
              <select id="theme-select" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="light">Light Theme</option>
                <option value="dark">Dark Theme</option>
                <option value="auto">Auto (System)</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Language</label>
              <select id="language-select" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="en">English</option>
                <option value="hi">Hindi</option>
                <option value="es">Spanish</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Time Zone</label>
              <select id="timezone-select" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="UTC">UTC</option>
                <option value="IST">India Standard Time (IST)</option>
                <option value="EST">Eastern Standard Time (EST)</option>
                <option value="PST">Pacific Standard Time (PST)</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Notification Settings -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Notification Settings</h3>
          <div class="space-y-4">
            <div class="flex items-center justify-between">
              <div>
                <h4 class="text-sm font-medium text-gray-700">Email Notifications</h4>
                <p class="text-sm text-gray-500">Receive email alerts for important events</p>
              </div>
              <label class="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" id="email-notifications" class="sr-only peer">
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>
            <div class="flex items-center justify-between">
              <div>
                <h4 class="text-sm font-medium text-gray-700">Order Updates</h4>
                <p class="text-sm text-gray-500">Get notified when order status changes</p>
              </div>
              <label class="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" id="order-notifications" class="sr-only peer">
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>
            <div class="flex items-center justify-between">
              <div>
                <h4 class="text-sm font-medium text-gray-700">Support Tickets</h4>
                <p class="text-sm text-gray-500">Alert for new support tickets</p>
              </div>
              <label class="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" id="ticket-notifications" class="sr-only peer">
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- Data Management -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Data Management</h3>
        <div class="text-center py-8">
          <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <h4 class="text-lg font-medium text-gray-900 mb-2">Data Management</h4>
          <p class="text-gray-500">Data management features are currently under development.</p>
        </div>
      </div>

      <!-- Save Button -->
      <div class="flex justify-end">
        <button id="save-settings" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
          Save Settings
        </button>
      </div>
    </div>
</StandaloneAdminLayout>

<style>
  /* Theme styles */
  .dark-theme {
    background-color: #1f2937;
    color: #f9fafb;
  }
  
  .dark-theme .bg-white {
    background-color: #374151;
    border-color: #4b5563;
  }
  
  .dark-theme .text-gray-900 {
    color: #f9fafb;
  }
  
  .dark-theme .text-gray-600 {
    color: #d1d5db;
  }
  
  .dark-theme .text-gray-700 {
    color: #e5e7eb;
  }
  
  .dark-theme .border-gray-200 {
    border-color: #4b5563;
  }
  
  .dark-theme .border-gray-300 {
    border-color: #6b7280;
  }
  
  .dark-theme select {
    background-color: #374151;
    color: #f9fafb;
    border-color: #6b7280;
  }
  
  .dark-theme select:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .light-theme {
    background-color: #f9fafb;
    color: #111827;
  }
  
  /* Smooth transitions for theme changes */
  * {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
  }
</style>

<script>
  // Simple settings functionality
  document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸ”„ Loading admin settings...');
    
    // Load saved settings
    loadSettings();
    
    // Setup event listeners
    setupListeners();
    
    console.log('âœ… Settings page loaded');
  });

  function loadSettings() {
    try {
      const saved = localStorage.getItem('admin-settings');
      if (saved) {
        const settings = JSON.parse(saved);
        
        // Apply theme
        if (settings.theme) {
          const themeSelect = document.getElementById('theme-select');
          if (themeSelect) {
            themeSelect.value = settings.theme;
            applyTheme(settings.theme);
          }
        }
        
        // Apply language
        if (settings.language) {
          const languageSelect = document.getElementById('language-select');
          if (languageSelect) {
            languageSelect.value = settings.language;
            applyLanguage(settings.language);
          }
        }
        
        // Apply timezone
        if (settings.timezone) {
          const timezoneSelect = document.getElementById('timezone-select');
          if (timezoneSelect) {
            timezoneSelect.value = settings.timezone;
            applyTimezone(settings.timezone);
          }
        }
        
        // Apply notifications
        if (settings.emailNotifications !== undefined) {
          const emailCheck = document.getElementById('email-notifications');
          if (emailCheck) emailCheck.checked = settings.emailNotifications;
        }
        if (settings.orderNotifications !== undefined) {
          const orderCheck = document.getElementById('order-notifications');
          if (orderCheck) orderCheck.checked = settings.orderNotifications;
        }
        if (settings.ticketNotifications !== undefined) {
          const ticketCheck = document.getElementById('ticket-notifications');
          if (ticketCheck) ticketCheck.checked = settings.ticketNotifications;
        }
      }
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  }

  function setupListeners() {
    // Save button
    const saveBtn = document.getElementById('save-settings');
    if (saveBtn) {
      saveBtn.addEventListener('click', saveSettings);
    }
    
    // Theme change
    const themeSelect = document.getElementById('theme-select');
    if (themeSelect) {
      themeSelect.addEventListener('change', function() {
        applyTheme(this.value);
        saveSettings();
      });
    }
    
    // Language change
    const languageSelect = document.getElementById('language-select');
    if (languageSelect) {
      languageSelect.addEventListener('change', function() {
        applyLanguage(this.value);
        saveSettings();
      });
    }
    
    // Timezone change
    const timezoneSelect = document.getElementById('timezone-select');
    if (timezoneSelect) {
      timezoneSelect.addEventListener('change', function() {
        applyTimezone(this.value);
        saveSettings();
      });
    }
    
    // Notification changes
    const emailCheck = document.getElementById('email-notifications');
    if (emailCheck) {
      emailCheck.addEventListener('change', saveSettings);
    }
    const orderCheck = document.getElementById('order-notifications');
    if (orderCheck) {
      orderCheck.addEventListener('change', saveSettings);
    }
    const ticketCheck = document.getElementById('ticket-notifications');
    if (ticketCheck) {
      ticketCheck.addEventListener('change', saveSettings);
    }
  }

  function saveSettings() {
    try {
      const settings = {
        theme: document.getElementById('theme-select')?.value || 'auto',
        language: document.getElementById('language-select')?.value || 'en',
        timezone: document.getElementById('timezone-select')?.value || 'UTC',
        emailNotifications: document.getElementById('email-notifications')?.checked || true,
        orderNotifications: document.getElementById('order-notifications')?.checked || true,
        ticketNotifications: document.getElementById('ticket-notifications')?.checked || true
      };
      
      localStorage.setItem('admin-settings', JSON.stringify(settings));
      showToast('Settings saved!', 'success');
      console.log('Settings saved:', settings);
    } catch (error) {
      console.error('Error saving settings:', error);
      showToast('Error saving settings', 'error');
    }
  }

  function applyTheme(theme) {
    const body = document.body;
    const html = document.documentElement;
    
    if (!body || !html) return;
    
    // Remove existing theme classes
    body.classList.remove('light-theme', 'dark-theme');
    html.classList.remove('light-theme', 'dark-theme');
    
    if (theme === 'dark') {
      body.classList.add('dark-theme');
      html.classList.add('dark-theme');
    } else if (theme === 'light') {
      body.classList.add('light-theme');
      html.classList.add('light-theme');
    } else if (theme === 'auto') {
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        body.classList.add('dark-theme');
        html.classList.add('dark-theme');
      } else {
        body.classList.add('light-theme');
        html.classList.add('light-theme');
      }
    }
  }

  function applyLanguage(language) {
    document.documentElement.lang = language;
  }

  function applyTimezone(timezone) {
    window.adminTimezone = timezone;
  }

  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-md text-white z-50 ${
      type === 'success' ? 'bg-green-500' : 
      type === 'error' ? 'bg-red-500' : 
      type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 3000);
  }
</script>