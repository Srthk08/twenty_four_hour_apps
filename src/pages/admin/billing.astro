---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Billing & Payments - DevExpress">
    <div class="space-y-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Billing & Payments</h1>
        <p class="text-gray-600 mt-2">Manage revenue, transactions, and billing information</p>
      </div>

      <!-- Revenue Overview Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <!-- Total Revenue -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Revenue</p>
              <p id="total-revenue" class="text-2xl font-semibold text-gray-900">₹0</p>
            </div>
          </div>
        </div>

        <!-- Monthly Revenue -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">This Month</p>
              <p id="monthly-revenue" class="text-2xl font-semibold text-gray-900">₹0</p>
            </div>
          </div>
        </div>

        <!-- Weekly Revenue -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">This Week</p>
              <p id="weekly-revenue" class="text-2xl font-semibold text-gray-900">₹0</p>
            </div>
          </div>
        </div>

        <!-- Pending Payments -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Pending</p>
              <p id="pending-revenue" class="text-2xl font-semibold text-gray-900">₹0</p>
            </div>
          </div>
        </div>
      </div>



      <!-- Search and Filters -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <!-- Search -->
          <div class="md:col-span-2">
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search Transactions</label>
            <div class="relative">
              <input
                type="text"
                id="search"
                placeholder="Search by customer email, transaction ID..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              />
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Status Filter -->
          <div>
            <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Statuses</option>
              <option value="pending">Pending</option>
              <option value="completed">Completed</option>
              <option value="failed">Failed</option>
              <option value="refunded">Refunded</option>
            </select>
          </div>

          <!-- Date Filter -->
          <div>
            <label for="date-filter" class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
            <select id="date-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Time</option>
              <option value="today">Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
              <option value="quarter">This Quarter</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Transactions Table -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">All Transactions</h3>
            <div class="flex items-center space-x-3">
                             <span id="transactions-count" class="text-sm text-gray-500">No transactions</span>
              <button id="export-btn" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                Export CSV
              </button>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Transaction ID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payment Method</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="transactions-tbody" class="bg-white divide-y divide-gray-200">
              <!-- Transactions will be populated here -->
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        <div class="bg-white px-6 py-3 border-t border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-700">Show</span>
              <select id="items-per-page" class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-primary-500">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
              <span class="text-sm text-gray-700">entries</span>
            </div>
            
            <div class="flex items-center space-x-2">
              <button id="refresh-transactions" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Refresh
              </button>
              <button id="prev-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Previous
              </button>
              <div id="page-numbers" class="flex items-center space-x-1">
                <!-- Page numbers will be generated dynamically -->
              </div>
              <button id="next-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Next
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Transaction Details Modal -->
      <div id="transaction-modal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
        <div class="fixed inset-0 z-10 overflow-y-auto">
          <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl">
              <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="flex items-center justify-between mb-4">
                  <h3 id="modal-title" class="text-lg font-medium text-gray-900">Transaction Details</h3>
                  <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <div id="modal-content" class="space-y-6">
                  <!-- Transaction details will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</AdminLayout>

<script>
  import { adminDataStore } from '../../lib/admin-data';

  let currentTransactions: any[] = [];
  let filteredTransactions: any[] = [];
  
  // Pagination variables
  let currentPage = 1;
  let itemsPerPage = 10;
  let totalPages = 1;

  // Initialize billing page
  function initializeBillingPage() {
    loadBillingData();
    setupEventListeners();
  }

  // Load billing data
  function loadBillingData() {
    try {
      currentTransactions = adminDataStore.getRevenue();
      filteredTransactions = [...currentTransactions];
      
      // Reset pagination when loading new data
      currentPage = 1;
      
      renderTransactions();
      updateRevenueStats();
      updateTransactionsCount();
  
    } catch (error) {
      console.error('Error loading billing data:', error);
    }
  }

  // Update revenue statistics
  function updateRevenueStats() {
    try {
      const stats = adminDataStore.getStats();
      
      document.getElementById('total-revenue').textContent = `₹${stats.totalRevenue.toLocaleString()}`;
      document.getElementById('monthly-revenue').textContent = `₹${stats.monthlyRevenue.toLocaleString()}`;
      document.getElementById('weekly-revenue').textContent = `₹${stats.weeklyRevenue.toLocaleString()}`;
      
      // Calculate pending revenue
      const pendingRevenue = currentTransactions
        .filter(t => t.status === 'pending')
        .reduce((sum, t) => sum + t.amount, 0);
      document.getElementById('pending-revenue').textContent = `₹${pendingRevenue.toLocaleString()}`;
      
    } catch (error) {
      console.error('Error updating revenue stats:', error);
    }
  }

  // Render transactions in table
  function renderTransactions() {
    const tbody = document.getElementById('transactions-tbody');
    if (!tbody) return;

    if (filteredTransactions.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
              </svg>
              <p class="text-lg font-medium text-gray-900 mb-2">No transactions found</p>
              <p class="text-gray-500">Try adjusting your search or filters</p>
            </div>
          </td>
        </tr>
      `;
      updatePagination();
      return;
    }

    // Calculate pagination
    totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedTransactions = filteredTransactions.slice(startIndex, endIndex);

    tbody.innerHTML = paginatedTransactions.map(transaction => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
          ${transaction.transactionId || 'N/A'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${transaction.customerEmail}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ₹${transaction.amount.toLocaleString()}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(transaction.status)}">
            ${transaction.status}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${transaction.paymentMethod}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${new Date(transaction.createdAt).toLocaleDateString()}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <div class="flex space-x-2">
            <button 
              onclick="viewTransaction('${transaction.id}')"
              class="text-primary-600 hover:text-primary-900"
            >
              View
            </button>
            ${transaction.status === 'completed' ? `
              <button 
                onclick="refundTransaction('${transaction.id}')"
                class="text-red-600 hover:text-red-900"
              >
                Refund
              </button>
            ` : ''}
          </div>
        </td>
      </tr>
    `).join('');
    
    // Update pagination controls
    updatePagination();
  }

  // Update transactions count
  function updateTransactionsCount() {
    const countElement = document.getElementById('transactions-count');
    if (countElement) {
      countElement.textContent = `Showing ${filteredTransactions.length} of ${currentTransactions.length} transactions`;
    }
  }

  // Update pagination controls
  function updatePagination() {
    const pageNumbers = document.getElementById('page-numbers');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (!pageNumbers || !prevButton || !nextButton) return;
    
    // Update previous button
    prevButton.disabled = currentPage === 1;
    prevButton.classList.toggle('opacity-50', currentPage === 1);
    prevButton.classList.toggle('cursor-not-allowed', currentPage === 1);
    
    // Update next button
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.classList.toggle('opacity-50', currentPage === totalPages || totalPages === 0);
    nextButton.classList.toggle('cursor-not-allowed', currentPage === totalPages || totalPages === 0);
    
    // Generate page numbers
    let pageNumbersHTML = '';
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      pageNumbersHTML += `
        <button 
          class="px-3 py-1 text-sm border rounded-md transition-colors ${
            isActive 
              ? 'bg-primary-50 text-primary-700 border-primary-200' 
              : 'text-gray-700 bg-white border-gray-300 hover:bg-gray-50'
          }"
          onclick="goToPage(${i})"
        >
          ${i}
        </button>
      `;
    }
    
    pageNumbers.innerHTML = pageNumbersHTML;
  }

  // Go to specific page
  function goToPage(page) {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    renderTransactions();
  }

  // Go to next page
  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      renderTransactions();
    }
  }

  // Go to previous page
  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderTransactions();
    }
  }

  // Change items per page
  function changeItemsPerPage() {
    const select = document.getElementById('items-per-page');
    if (select) {
      itemsPerPage = parseInt(select.value);
      currentPage = 1; // Reset to first page
      renderTransactions();
    }
  }

  // Get status color
  function getStatusColor(status: string) {
    const colors = {
      'pending': 'bg-yellow-100 text-yellow-800',
      'completed': 'bg-green-100 text-green-800',
      'failed': 'bg-red-100 text-red-800',
      'refunded': 'bg-gray-100 text-gray-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  }

  // Search and filter transactions
  function filterTransactions() {
    const searchQuery = (document.getElementById('search') as HTMLInputElement).value.toLowerCase();
    const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement).value;
    const dateFilter = (document.getElementById('date-filter') as HTMLSelectElement).value;

    filteredTransactions = currentTransactions.filter(transaction => {
      // Search filter
      const matchesSearch = 
        transaction.customerEmail.toLowerCase().includes(searchQuery) ||
        (transaction.transactionId && transaction.transactionId.toLowerCase().includes(searchQuery));

      // Status filter
      const matchesStatus = !statusFilter || transaction.status === statusFilter;

      // Date filter
      const matchesDate = !dateFilter || filterByDate(transaction.createdAt, dateFilter);

      return matchesSearch && matchesStatus && matchesDate;
    });

    renderTransactions();
    updateTransactionsCount();
  }

  // Filter by date
  function filterByDate(dateString: string, dateRange: string): boolean {
    const transactionDate = new Date(dateString);
    const now = new Date();

    switch (dateRange) {
      case 'today':
        return transactionDate.toDateString() === now.toDateString();
      case 'week':
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        return transactionDate >= weekAgo;
      case 'month':
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        return transactionDate >= monthAgo;
      case 'quarter':
        const quarterAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
        return transactionDate >= quarterAgo;
      default:
        return true;
    }
  }



  // View transaction details
  function viewTransaction(transactionId: string) {
    const transaction = currentTransactions.find(t => t.id === transactionId);
    if (!transaction) return;

    const modal = document.getElementById('transaction-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');

    if (modal && modalTitle && modalContent) {
      modalTitle.textContent = `Transaction ${transaction.transactionId || transaction.id}`;
      
      modalContent.innerHTML = `
        <div class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">Transaction ID</label>
              <p class="text-sm text-gray-900">${transaction.transactionId || 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Status</label>
              <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(transaction.status)}">
                ${transaction.status}
              </span>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Amount</label>
              <p class="text-sm text-gray-900">₹${transaction.amount.toLocaleString()}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Currency</label>
              <p class="text-sm text-gray-900">${transaction.currency}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Payment Method</label>
              <p class="text-sm text-gray-900">${transaction.paymentMethod}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Date</label>
              <p class="text-sm text-gray-900">${new Date(transaction.createdAt).toLocaleString()}</p>
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700">Customer Email</label>
            <p class="text-sm text-gray-900">${transaction.customerEmail}</p>
          </div>
        </div>
      `;

      modal.classList.remove('hidden');
    }
  }

  // Refund transaction
  function refundTransaction(transactionId: string) {
    if (!confirm('Are you sure you want to refund this transaction?')) {
      return;
    }

    try {
      // In a real application, this would call a payment gateway API
      alert('Refund functionality would be implemented with payment gateway integration');
    } catch (error) {
      alert('Failed to process refund');
      console.error('Error processing refund:', error);
    }
  }

  // Export transactions to CSV
  function exportTransactions() {
    try {
      const headers = ['Transaction ID', 'Customer Email', 'Amount', 'Status', 'Payment Method', 'Date'];
      const rows = filteredTransactions.map(t => [
        t.transactionId || 'N/A',
        t.customerEmail,
        `${t.amount} ${t.currency}`,
        t.status,
        t.paymentMethod,
        new Date(t.createdAt).toLocaleDateString()
      ]);

      const csvContent = [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `transactions-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      alert('Failed to export transactions');
      console.error('Error exporting transactions:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
    // Search and filter inputs
    document.getElementById('search')?.addEventListener('input', filterTransactions);
    document.getElementById('status-filter')?.addEventListener('change', filterTransactions);
    document.getElementById('date-filter')?.addEventListener('change', filterTransactions);

    // Pagination controls
    document.getElementById('items-per-page')?.addEventListener('change', changeItemsPerPage);
    document.getElementById('prev-page')?.addEventListener('click', prevPage);
    document.getElementById('next-page')?.addEventListener('click', nextPage);
    document.getElementById('refresh-transactions')?.addEventListener('click', loadBillingData);

    // Export button
    document.getElementById('export-btn')?.addEventListener('click', exportTransactions);

    // Modal close button
    document.getElementById('close-modal')?.addEventListener('click', () => {
      document.getElementById('transaction-modal')?.classList.add('hidden');
    });

    // Close modal when clicking outside
    document.getElementById('transaction-modal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        (e.currentTarget as HTMLElement).classList.add('hidden');
      }
    });
  }

  // Initialize page when DOM loads
  document.addEventListener('DOMContentLoaded', initializeBillingPage);

  // Make functions globally available for onclick handlers
  (window as any).viewTransaction = viewTransaction;
  (window as any).refundTransaction = refundTransaction;
  (window as any).goToPage = goToPage;
  (window as any).nextPage = nextPage;
  (window as any).prevPage = prevPage;
  (window as any).changeItemsPerPage = changeItemsPerPage;
</script>
