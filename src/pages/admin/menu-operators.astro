---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Manage Menu Operators - Admin Panel">
  <div class="p-6">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Menu Operators Management</h1>
      <p class="mt-2 text-gray-600">Manage users with Menu Operator role and their permissions</p>
    </div>

    <!-- Current Menu Operators -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900">Current Menu Operators</h2>
      </div>
      <div class="p-6">
        <div id="menu-operators-list" class="space-y-4">
          <!-- Menu operators will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Assign New Menu Operator -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900">Assign Menu Operator Role</h2>
      </div>
      <div class="p-6">
        <form id="assign-role-form" class="space-y-4">
          <div>
            <label for="user-email" class="block text-sm font-medium text-gray-700">User Email</label>
            <input
              type="email"
              id="user-email"
              name="email"
              required
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="user@example.com"
            />
          </div>
          <div>
            <label for="full-name" class="block text-sm font-medium text-gray-700">Full Name (Optional)</label>
            <input
              type="text"
              id="full-name"
              name="fullName"
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="John Doe"
            />
          </div>
          <div>
            <label for="phone" class="block text-sm font-medium text-gray-700">Phone (Optional)</label>
            <input
              type="tel"
              id="phone"
              name="phone"
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="+1234567890"
            />
          </div>
          <button
            type="submit"
            class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Assign Menu Operator Role
          </button>
        </form>
      </div>
    </div>

    <!-- All Users List -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900">All Users</h2>
        <p class="text-sm text-gray-600 mt-1">Click on a user to assign Menu Operator role</p>
      </div>
      <div class="p-6">
        <div id="all-users-list" class="space-y-2">
          <!-- All users will be loaded here -->
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Supabase configuration
  const supabaseUrl = 'YOUR_SUPABASE_URL';
  const supabaseKey = 'YOUR_SUPABASE_ANON_KEY';
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Load menu operators
  async function loadMenuOperators() {
    try {
      const { data: operators, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('role', 'menu_operator')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading menu operators:', error);
        return;
      }

      displayMenuOperators(operators);
    } catch (error) {
      console.error('Error loading menu operators:', error);
    }
  }

  // Display menu operators
  function displayMenuOperators(operators) {
    const container = document.getElementById('menu-operators-list');
    
    if (!operators || operators.length === 0) {
      container.innerHTML = '<p class="text-gray-500 text-center py-8">No Menu Operators assigned yet</p>';
      return;
    }

    container.innerHTML = operators.map(operator => `
      <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
        <div class="flex-1">
          <h3 class="font-medium text-gray-900">${operator.full_name}</h3>
          <p class="text-sm text-gray-600">${operator.email}</p>
          <p class="text-sm text-gray-500">${operator.phone || 'No phone'}</p>
        </div>
        <div class="flex items-center space-x-4">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            operator.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }">
            ${operator.is_active ? 'Active' : 'Inactive'}
          </span>
          <button
            onclick="removeMenuOperator('${operator.email}')"
            class="text-red-600 hover:text-red-800 text-sm font-medium"
          >
            Remove Role
          </button>
        </div>
      </div>
    `).join('');
  }

  // Load all users
  async function loadAllUsers() {
    try {
      const { data: users, error } = await supabase
        .rpc('list_all_users');

      if (error) {
        console.error('Error loading users:', error);
        return;
      }

      displayAllUsers(users);
    } catch (error) {
      console.error('Error loading users:', error);
    }
  }

  // Display all users
  function displayAllUsers(users) {
    const container = document.getElementById('all-users-list');
    
    if (!users || users.length === 0) {
      container.innerHTML = '<p class="text-gray-500 text-center py-8">No users found</p>';
      return;
    }

    container.innerHTML = users.map(user => `
      <div 
        class="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer ${
          user.current_role === 'menu_operator' ? 'bg-blue-50 border-blue-200' : ''
        }"
        onclick="${user.current_role !== 'menu_operator' ? `assignMenuOperator('${user.email}', '${user.full_name}')` : ''}"
      >
        <div class="flex-1">
          <h3 class="font-medium text-gray-900">${user.full_name}</h3>
          <p class="text-sm text-gray-600">${user.email}</p>
          <p class="text-xs text-gray-500">Joined: ${new Date(user.created_at).toLocaleDateString()}</p>
        </div>
        <div class="flex items-center space-x-2">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            user.current_role === 'menu_operator' 
              ? 'bg-blue-100 text-blue-800' 
              : user.current_role === 'No Role'
              ? 'bg-gray-100 text-gray-800'
              : 'bg-yellow-100 text-yellow-800'
          }">
            ${user.current_role}
          </span>
          ${user.current_role === 'menu_operator' ? '' : '<span class="text-blue-600 text-sm">Click to assign</span>'}
        </div>
      </div>
    `).join('');
  }

  // Assign Menu Operator role
  async function assignMenuOperator(email, fullName = null, phone = null) {
    try {
      // Get user ID
      const { data: user, error: userError } = await supabase
        .from('auth.users')
        .select('id')
        .eq('email', email)
        .single();

      if (userError || !user) {
        throw new Error('User not found with email: ' + email);
      }

      // Update or insert profile with Menu Operator role
      const { data, error } = await supabase
        .from('profiles')
        .upsert({
          user_id: user.id,
          full_name: fullName || email.split('@')[0],
          email: email,
          phone: phone,
          role: 'menu_operator',
          is_active: true,
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_id'
        });

      if (error) {
        throw error;
      }

      alert('Menu Operator role assigned successfully!');
      loadMenuOperators();
      loadAllUsers();
    } catch (error) {
      console.error('Error assigning role:', error);
      alert('Error assigning role: ' + error.message);
    }
  }

  // Remove Menu Operator role
  async function removeMenuOperator(email) {
    if (!confirm(`Are you sure you want to remove Menu Operator role from ${email}?`)) {
      return;
    }

    try {
      // Get user ID
      const { data: user, error: userError } = await supabase
        .from('auth.users')
        .select('id')
        .eq('email', email)
        .single();

      if (userError || !user) {
        throw new Error('User not found with email: ' + email);
      }

      // Update profile to customer role
      const { data, error } = await supabase
        .from('profiles')
        .update({
          role: 'customer',
          updated_at: new Date().toISOString()
        })
        .eq('user_id', user.id);

      if (error) {
        throw error;
      }

      alert('Menu Operator role removed successfully!');
      loadMenuOperators();
      loadAllUsers();
    } catch (error) {
      console.error('Error removing role:', error);
      alert('Error removing role: ' + error.message);
    }
  }

  // Handle form submission
  document.getElementById('assign-role-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const fullName = formData.get('fullName');
    const phone = formData.get('phone');
    
    await assignMenuOperator(email, fullName, phone);
    
    // Reset form
    e.target.reset();
  });

  // Make functions global
  window.assignMenuOperator = assignMenuOperator;
  window.removeMenuOperator = removeMenuOperator;

  // Load data on page load
  document.addEventListener('DOMContentLoaded', () => {
    loadMenuOperators();
    loadAllUsers();
  });
</script>
