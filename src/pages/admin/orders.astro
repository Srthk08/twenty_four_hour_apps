---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Orders Management - DevExpress">
    <div class="space-y-6">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Orders Management</h1>
        <p class="text-gray-600 mt-2">View and manage all customer orders</p>
      </div>

      <!-- Search and Filters -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <!-- Search -->
          <div class="md:col-span-2">
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search Orders</label>
            <div class="relative">
              <input
                type="text"
                id="search"
                placeholder="Search by order ID, customer name, or email..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              />
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Status Filter -->
          <div>
            <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Statuses</option>
              <option value="pending">Pending</option>
              <option value="confirmed">Confirmed</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          <!-- Date Filter -->
          <div>
            <label for="date-filter" class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
            <select id="date-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
              <option value="">All Time</option>
              <option value="today">Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
              <option value="quarter">This Quarter</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Orders Table -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">All Orders</h3>
            <div class="flex items-center space-x-3">
              <span id="orders-count" class="text-sm text-gray-500">No orders</span>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="orders-tbody" class="bg-white divide-y divide-gray-200">
              <tr>
                <td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading orders...</td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        <div class="bg-white px-6 py-3 border-t border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-700">Show</span>
              <select id="items-per-page" class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-primary-500">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
              <span class="text-sm text-gray-700">entries</span>
            </div>
            
            <div class="flex items-center space-x-2">
              <button id="refresh-orders" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Refresh
              </button>
              <button id="prev-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Previous
              </button>
              <div id="page-numbers" class="flex items-center space-x-1">
                <!-- Page numbers will be generated dynamically -->
              </div>
              <button id="next-page" class="px-3 py-1 text-sm text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                Next
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Order Details Modal -->
      <div id="order-modal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
        <div class="fixed inset-0 z-10 overflow-y-auto">
          <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl">
              <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="flex items-center justify-between mb-4">
                  <h3 id="modal-title" class="text-lg font-medium text-gray-900">Order Details</h3>
                  <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <div id="modal-content" class="space-y-6">
                  <!-- Order details will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</AdminLayout>

<script>
  import { supabase } from '../../lib/supabase';

  let currentOrders = [];
  let filteredOrders = [];
  
  // Pagination variables
  let currentPage = 1;
  let itemsPerPage = 10;
  let totalPages = 1;

  // Initialize orders page
  function initializeOrdersPage() {
    loadOrders();
    setupEventListeners();
  }

  // Load all orders
  async function loadOrders() {
    try {
      // Create a single example order
      const exampleOrder = {
        id: 'example-order-1',
        orderNumber: 'ORD-2024-001',
        customerName: 'John Doe',
        customerEmail: 'john.doe@example.com',
        serviceName: 'Web Development',
        serviceType: 'custom',
        status: 'pending',
        amount: 15000,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      currentOrders = [exampleOrder];
      filteredOrders = [...currentOrders];
      
      // Reset pagination when loading new orders
      currentPage = 1;
      
      renderOrders();
      updateOrdersCount();
      
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  }

  // Render orders in table
  function renderOrders() {
    const tbody = document.getElementById('orders-tbody');
    if (!tbody) return;

    if (filteredOrders.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
              </svg>
              <p class="text-lg font-medium text-gray-900 mb-2">No orders found</p>
              <p class="text-gray-500">Try adjusting your search or filters</p>
            </div>
          </td>
        </tr>
      `;
      updatePagination();
      return;
    }

    // Calculate pagination
    totalPages = Math.ceil(filteredOrders.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedOrders = filteredOrders.slice(startIndex, endIndex);

    tbody.innerHTML = paginatedOrders.map(order => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${order.orderNumber || order.id || 'N/A'}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mr-3">
              <span class="text-sm font-medium text-primary-600">${(order.customerName || order.customer_name || 'U').charAt(0).toUpperCase()}</span>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${order.customerName || order.customer_name || 'No Name'}</div>
              <div class="text-sm text-gray-500">${order.customerEmail || order.customer_email || 'No Email'}</div>
            </div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${order.serviceName || order.service_name || 'No Service'}</div>
          <div class="text-sm text-gray-500 capitalize">${order.serviceType || order.service_type || 'N/A'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(order.status)}">
            ${(order.status || 'pending').replace('_', ' ')}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ₹${(order.amount || order.total_amount || 0).toLocaleString()}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${order.createdAt || order.created_at ? new Date(order.createdAt || order.created_at).toLocaleDateString() : 'N/A'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <div class="flex space-x-2">
            <button 
              onclick="viewOrder('${order.id}')"
              class="text-primary-600 hover:text-primary-900"
            >
              View
            </button>
            <button 
              onclick="updateOrderStatus('${order.id}')"
              class="text-green-600 hover:text-green-900"
            >
              Update
            </button>
          </div>
        </td>
      </tr>
    `).join('');
    
    // Update pagination controls
    updatePagination();
  }

  // Update orders count
  function updateOrdersCount() {
    const countElement = document.getElementById('orders-count');
    if (countElement) {
      countElement.textContent = `Showing ${filteredOrders.length} of ${currentOrders.length} orders`;
    }
  }

  // Update pagination controls
  function updatePagination() {
    const pageNumbers = document.getElementById('page-numbers');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (!pageNumbers || !prevButton || !nextButton) return;
    
    // Update previous button
    prevButton.disabled = currentPage === 1;
    prevButton.classList.toggle('opacity-50', currentPage === 1);
    prevButton.classList.toggle('cursor-not-allowed', currentPage === 1);
    
    // Update next button
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.classList.toggle('opacity-50', currentPage === totalPages || totalPages === 0);
    nextButton.classList.toggle('cursor-not-allowed', currentPage === totalPages || totalPages === 0);
    
    // Generate page numbers
    let pageNumbersHTML = '';
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      pageNumbersHTML += `
        <button 
          class="px-3 py-1 text-sm border rounded-md transition-colors ${
            isActive 
              ? 'bg-primary-50 text-primary-700 border-primary-200' 
              : 'text-gray-700 bg-white border-gray-300 hover:bg-gray-50'
          }"
          onclick="goToPage(${i})"
        >
          ${i}
        </button>
      `;
    }
    
    pageNumbers.innerHTML = pageNumbersHTML;
  }

  // Go to specific page
  function goToPage(page) {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    renderOrders();
  }

  // Go to next page
  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      renderOrders();
    }
  }

  // Go to previous page
  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderOrders();
    }
  }

  // Change items per page
  function changeItemsPerPage() {
    const select = document.getElementById('items-per-page');
    if (select) {
      itemsPerPage = parseInt(select.value);
      currentPage = 1; // Reset to first page
      renderOrders();
    }
  }

  // Get status color
  function getStatusColor(status: string) {
    const colors = {
      'pending': 'bg-yellow-100 text-yellow-800',
      'confirmed': 'bg-blue-100 text-blue-800',
      'in_progress': 'bg-purple-100 text-purple-800',
      'completed': 'bg-green-100 text-green-800',
      'cancelled': 'bg-red-100 text-red-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  }

  // Search and filter orders
  function filterOrders() {
    const searchQuery = (document.getElementById('search') as HTMLInputElement).value.toLowerCase();
    const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement).value;
    const dateFilter = (document.getElementById('date-filter') as HTMLSelectElement).value;

    filteredOrders = currentOrders.filter(order => {
      // Search filter
      const orderNumber = order.orderNumber || order.id || '';
      const customerName = order.customerName || order.customer_name || '';
      const customerEmail = order.customerEmail || order.customer_email || '';
      const serviceName = order.serviceName || order.service_name || '';
      
      const matchesSearch = 
        orderNumber.toLowerCase().includes(searchQuery) ||
        customerName.toLowerCase().includes(searchQuery) ||
        customerEmail.toLowerCase().includes(searchQuery) ||
        serviceName.toLowerCase().includes(searchQuery);

      // Status filter
      const matchesStatus = !statusFilter || order.status === statusFilter;

      // Date filter
      const orderDate = order.createdAt || order.created_at;
      const matchesDate = !dateFilter || !orderDate || filterByDate(orderDate, dateFilter);

      return matchesSearch && matchesStatus && matchesDate;
    });

    renderOrders();
    updateOrdersCount();
  }

  // Filter by date
  function filterByDate(dateString: string, dateRange: string): boolean {
    const orderDate = new Date(dateString);
    const now = new Date();

    switch (dateRange) {
      case 'today':
        return orderDate.toDateString() === now.toDateString();
      case 'week':
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        return orderDate >= weekAgo;
      case 'month':
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        return orderDate >= monthAgo;
      case 'quarter':
        const quarterAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
        return orderDate >= quarterAgo;
      default:
        return true;
    }
  }

  // View order details
  function viewOrder(orderId: string) {
    const order = currentOrders.find(o => o.id === orderId);
    if (!order) {
      console.error('Order not found:', orderId);
      alert('Order not found');
      return;
    }

    const modal = document.getElementById('order-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');

    if (modal && modalTitle && modalContent) {
      modalTitle.textContent = `Order ${order.orderNumber}`;
      
      modalContent.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Order Information -->
          <div class="space-y-4">
            <h4 class="text-md font-medium text-gray-900">Order Information</h4>
            <div class="space-y-2">
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Order Number:</span>
                <span class="text-sm font-medium text-gray-900">${order.orderNumber || order.id}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Status:</span>
                <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(order.status)}">
                  ${(order.status || 'pending').replace('_', ' ')}
                </span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Payment Status:</span>
                <span class="text-sm font-medium text-gray-900">${order.paymentStatus || 'Pending'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Amount:</span>
                <span class="text-sm font-medium text-gray-900">₹${(order.amount || 0).toLocaleString()}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Created:</span>
                <span class="text-sm text-gray-900">${order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</span>
              </div>
            </div>
          </div>

          <!-- Customer Information -->
          <div class="space-y-4">
            <h4 class="text-md font-medium text-gray-900">Customer Information</h4>
            <div class="space-y-2">
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Name:</span>
                <span class="text-sm font-medium text-gray-900">${order.customerName || 'No Name'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-500">Email:</span>
                <span class="text-sm font-medium text-gray-900">${order.customerEmail || 'No Email'}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Service Details -->
        <div class="space-y-4">
          <h4 class="text-md font-medium text-gray-900">Service Details</h4>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-sm text-gray-500">Service:</span>
              <span class="text-sm font-medium text-gray-900">${order.serviceName || 'No Service'}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-sm text-gray-500">Type:</span>
              <span class="text-sm font-medium text-gray-900 capitalize">${order.serviceType || 'N/A'}</span>
            </div>
          </div>
        </div>
      `;

      modal.classList.remove('hidden');
    }
  }

  // Update order status
  async function updateOrderStatus(orderId: string) {
    const order = currentOrders.find(o => o.id === orderId);
    if (!order) {
      console.error('Order not found:', orderId);
      alert('Order not found');
      return;
    }

    const newStatus = prompt(
      `Current status: ${order.status || 'No status'}\n\nEnter new status:\n- pending\n- confirmed\n- in_progress\n- completed\n- cancelled`,
      order.status || 'pending'
    );

    if (newStatus && newStatus !== order.status) {
      try {
        // Update local array only (since this is example data)
        const orderIndex = currentOrders.findIndex(o => o.id === orderId);
        if (orderIndex > -1) {
          currentOrders[orderIndex].status = newStatus;
          currentOrders[orderIndex].updatedAt = new Date().toISOString();
          filteredOrders = [...currentOrders];
          renderOrders();
          updateOrdersCount();
        }

        alert('Order status updated successfully!');
      } catch (error) {
        alert('Failed to update order status');
        console.error('Error updating order status:', error);
      }
    }
  }



  // Setup event listeners
  function setupEventListeners() {
    // Search and filter inputs
    document.getElementById('search')?.addEventListener('input', filterOrders);
    document.getElementById('status-filter')?.addEventListener('change', filterOrders);
    document.getElementById('date-filter')?.addEventListener('change', filterOrders);

    // Pagination controls
    document.getElementById('items-per-page')?.addEventListener('change', changeItemsPerPage);
    document.getElementById('prev-page')?.addEventListener('click', prevPage);
    document.getElementById('next-page')?.addEventListener('click', nextPage);
    document.getElementById('refresh-orders')?.addEventListener('click', loadOrders);

    // Modal close button
    document.getElementById('close-modal')?.addEventListener('click', () => {
      document.getElementById('order-modal')?.classList.add('hidden');
    });

    // Close modal when clicking outside
    document.getElementById('order-modal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        (e.currentTarget as HTMLElement).classList.add('hidden');
      }
    });
  }

  // Initialize page when DOM loads
  document.addEventListener('DOMContentLoaded', initializeOrdersPage);

  // Make functions globally available for onclick handlers
  (window as any).viewOrder = viewOrder;
  (window as any).updateOrderStatus = updateOrderStatus;
  (window as any).goToPage = goToPage;
  (window as any).nextPage = nextPage;
  (window as any).prevPage = prevPage;
  (window as any).changeItemsPerPage = changeItemsPerPage;
</script>
