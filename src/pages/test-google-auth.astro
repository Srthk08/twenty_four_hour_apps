---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Google Auth Test - DevExpress">
  <section class="py-20 bg-gray-50 min-h-screen">
    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
      <h1 class="text-2xl font-bold text-center mb-8">Google Auth Test</h1>
      
      <div id="status" class="mb-6 p-4 rounded-lg hidden">
        <p id="status-text"></p>
      </div>
      
      <button 
        id="test-google-btn"
        class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors"
      >
        Test Google Authentication
      </button>
      
      <div id="debug-info" class="mt-8 p-4 bg-gray-100 rounded-lg">
        <h3 class="font-bold mb-2">Debug Information:</h3>
        <div id="debug-content"></div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';

  const SUPABASE_URL = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
  const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
  
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

  function showStatus(message, type = 'info') {
    const status = document.getElementById('status');
    const statusText = document.getElementById('status-text');
    
    if (status && statusText) {
      statusText.textContent = message;
      status.className = `mb-6 p-4 rounded-lg ${
        type === 'error' ? 'bg-red-100 text-red-800' :
        type === 'success' ? 'bg-green-100 text-green-800' :
        'bg-blue-100 text-blue-800'
      }`;
      status.classList.remove('hidden');
    }
  }

  function updateDebugInfo(info) {
    const debugContent = document.getElementById('debug-content');
    if (debugContent) {
      debugContent.innerHTML = `
        <pre class="text-xs overflow-x-auto">${JSON.stringify(info, null, 2)}</pre>
      `;
    }
  }

  async function testGoogleAuth() {
    try {
      showStatus('Testing Google authentication...', 'info');
      
      // First, let's check if we can connect to Supabase
      const { data: healthCheck, error: healthError } = await supabase.auth.getSession();
      
      updateDebugInfo({
        timestamp: new Date().toISOString(),
        supabaseUrl: SUPABASE_URL,
        currentOrigin: window.location.origin,
        expectedRedirect: `${window.location.origin}/auth/callback`,
        supabaseHealth: healthError ? 'Error' : 'OK',
        healthError: healthError?.message || null
      });

      if (healthError) {
        showStatus(`Supabase connection error: ${healthError.message}`, 'error');
        return;
      }

      showStatus('Supabase connected. Testing Google OAuth...', 'info');

      // Now test Google OAuth
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });

      if (error) {
        console.error('Google OAuth Error:', error);
        
        let diagnosis = 'Unknown error';
        let solution = 'Check the debug information below.';
        
        if (error.message.includes('Provider not found') || error.message.includes('not configured')) {
          diagnosis = 'Google provider is not configured in Supabase';
          solution = 'Go to Supabase Dashboard → Authentication → Providers → Enable Google';
        } else if (error.message.includes('redirect_uri_mismatch')) {
          diagnosis = 'Redirect URI mismatch in Google Cloud Console';
          solution = `Add this exact URI to Google Cloud Console: ${window.location.origin}/auth/callback`;
        } else if (error.message.includes('invalid_client')) {
          diagnosis = 'Invalid Google Client ID or Secret';
          solution = 'Check your Google Cloud Console credentials in Supabase';
        }

        showStatus(`❌ ${diagnosis}`, 'error');
        
        updateDebugInfo({
          timestamp: new Date().toISOString(),
          error: error.message,
          diagnosis: diagnosis,
          solution: solution,
          supabaseUrl: SUPABASE_URL,
          redirectUri: `${window.location.origin}/auth/callback`,
          expectedSupabaseRedirect: `${SUPABASE_URL}/auth/v1/callback`
        });
        
        return;
      }

      showStatus('✅ Google OAuth initiated successfully! You should be redirected to Google.', 'success');
      
    } catch (err) {
      console.error('Test error:', err);
      showStatus(`Test failed: ${err.message}`, 'error');
      
      updateDebugInfo({
        timestamp: new Date().toISOString(),
        error: err.message,
        stack: err.stack
      });
    }
  }

  // Add event listener
  document.getElementById('test-google-btn')?.addEventListener('click', testGoogleAuth);

  // Initial debug info
  updateDebugInfo({
    timestamp: new Date().toISOString(),
    currentUrl: window.location.href,
    supabaseUrl: SUPABASE_URL,
    redirectUri: `${window.location.origin}/auth/callback`,
    userAgent: navigator.userAgent
  });
</script>
