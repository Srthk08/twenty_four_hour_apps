---
import Layout from '../layouts/Layout.astro';
import AuthGuard from '../components/AuthGuard.astro';
---

<Layout title="Dashboard - DevExpress">
  <AuthGuard>
    <section class="py-12 bg-gray-50 min-h-screen">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Welcome Header -->
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900 mb-2">
            Welcome back, <span id="user-welcome">User</span>!
          </h1>
          <p class="text-gray-600">Manage your projects and orders from your dashboard.</p>
        </div>

        <!-- Quick Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Active Orders</p>
                <p class="text-2xl font-bold text-gray-900">0</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Completed</p>
                <p class="text-2xl font-bold text-gray-900">0</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
              <div class="p-2 bg-purple-100 rounded-lg">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Total Spent</p>
                <p class="text-2xl font-bold text-gray-900">$0</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Orders -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">Recent Orders</h2>
          </div>
          <div class="p-6">
            <div class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No orders yet</h3>
              <p class="mt-1 text-sm text-gray-500">Get started by creating your first order.</p>
              <div class="mt-6">
                <a href="/products" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  Browse Products
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </AuthGuard>
</Layout>

<script>
  console.log('üöÄ Dashboard loaded - using global auth manager');

  // Function to update user info - INTEGRATED WITH SUPABASE
  async function updateUserInfo() {
    console.log('üîÑ Updating user info...');
    
    let userData = null;
    let source = '';
    
    // First, try to get from global auth manager
    const authManager = window.globalAuthManager || window.simpleAuthManager;
    if (authManager && authManager.isUserLoggedIn() && authManager.currentUser) {
      userData = authManager.currentUser;
      source = 'auth-manager';
      console.log('‚úÖ Found user data in auth manager:', userData.email);
    } else if (window.supabase) {
      // Try to get from Supabase session
      try {
        const { data: { session }, error } = await window.supabase.auth.getSession();
        if (!error && session?.user) {
          userData = session.user;
          source = 'supabase-session';
          console.log('‚úÖ Found user data in Supabase session:', userData.email);
        }
      } catch (error) {
        console.log('Error getting Supabase session:', error);
      }
    }
    
    // Fallback: Check storage locations
    if (!userData) {
      const sources = [
        { key: 'simple-auth-session', storage: sessionStorage, path: 'user' },
        { key: 'simple-auth-user', storage: localStorage, path: null },
        { key: 'simple-auth-session', storage: localStorage, path: 'user' }
      ];
      
      for (const sourceInfo of sources) {
        try {
          const data = sourceInfo.storage.getItem(sourceInfo.key);
          if (data) {
            const parsed = JSON.parse(data);
            userData = sourceInfo.path ? parsed[sourceInfo.path] : parsed;
            if (userData && userData.email) {
              source = sourceInfo.key;
              console.log(`‚úÖ Found user data in ${sourceInfo.key}:`, userData.email);
              break;
            }
          }
        } catch (error) {
          console.log(`Error reading ${sourceInfo.key}:`, error);
        }
      }
    }
    
    // If still no data, redirect to login
    if (!userData) {
      console.log('‚ùå No user data found, redirecting to login');
      window.location.href = '/login';
      return;
    }

    // Update UI with user data
    const welcomeElement = document.getElementById('user-welcome');
    if (welcomeElement) {
      const displayName = userData.full_name || userData.user_metadata?.full_name || userData.email?.split('@')[0] || 'User';
      welcomeElement.textContent = displayName;
      console.log(`‚úÖ Updated welcome message with: ${displayName}`);
    }

    console.log(`‚úÖ User info updated from ${source}:`, userData.email);
  }

  // Initialize dashboard
  function initializeDashboard() {
    console.log('üöÄ Initializing dashboard...');
    
    // Wait for auth manager to be ready
    const checkAuth = () => {
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      if (authManager) {
        console.log('‚úÖ Auth manager ready, updating user info');
        updateUserInfo();
      } else {
        console.log('‚è≥ Auth manager not ready, retrying...');
        setTimeout(checkAuth, 200);
      }
    };
    
    // Start checking after a short delay
    setTimeout(checkAuth, 500);
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDashboard);
  } else {
    initializeDashboard();
  }

  console.log('‚úÖ Dashboard script initialized with global auth manager');
</script>
