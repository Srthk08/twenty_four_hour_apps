---
import Layout from '../layouts/Layout.astro';
import AuthGuard from '../components/AuthGuard.astro';
---

<Layout title="Dashboard - DevExpress">
  <AuthGuard>
    <section class="py-12 bg-gray-50 min-h-screen">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Welcome Header -->
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900 mb-2">
            Welcome back, <span id="user-welcome">User</span>!
          </h1>
          <p class="text-gray-600">Manage your projects and orders from your dashboard.</p>
        </div>


        <!-- Product Customization Form (shown when product is selected) -->
        <div id="product-customization-form" class="bg-white rounded-lg shadow-sm p-8 hidden">
          <div class="flex items-center justify-between mb-8">
            <h2 class="text-3xl font-bold text-gray-900">Project Requirements</h2>
            <button id="close-customization-form" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
              </div>
          
          <!-- Product Details Display -->
          <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 mb-8 border border-blue-200">
            <div class="flex items-center justify-between">
              <div>
                <h3 id="selected-product-name" class="text-xl font-bold text-gray-900 mb-2">Selected Product</h3>
                <p class="text-sm text-blue-600 font-medium">Customize your project requirements below</p>
              </div>
              <div class="text-right">
                <p id="selected-product-price" class="text-3xl font-bold text-primary-600">₹0</p>
                <p class="text-sm text-gray-500">Base Price</p>
              </div>
            </div>
          </div>

          <!-- Complete Customization Form -->
          <form id="customization-form" class="space-y-8">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <!-- Left Column -->
              <div class="space-y-6">
                <!-- Project Name -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Project Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="projectName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter your project name" required>
                </div>

                <!-- App Name -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    App Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="appName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter your app name" required>
                </div>

                <!-- Restaurant Name (only for restaurant products) -->
                <div id="restaurant-name-field" class="hidden">
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Restaurant Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="restaurantName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter restaurant name">
                </div>

                <!-- Logo Upload (Required for all products) -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Upload Logo <span class="text-red-500">*</span>
                  </label>
                  <div id="restaurant-logo-upload-area" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors cursor-pointer" onclick="const el = document.getElementById('restaurant-logo-upload'); if(el) el.click(); else console.error('restaurant-logo-upload element not found in HTML onclick');">
                    <div class="flex flex-col items-center">
                      <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <p class="text-gray-600 mb-2">Click to upload logo</p>
                      <p class="text-sm text-gray-500">PNG, JPG, SVG up to 10MB</p>
                    </div>
                    <input type="file" name="restaurantLogo" accept="image/*" class="hidden" id="restaurant-logo-upload">
                    <div id="restaurant-logo-preview" class="hidden mt-4">
                      <img id="restaurant-logo-preview-img" class="w-20 h-20 object-cover rounded-lg mx-auto" alt="Logo preview">
                      <p id="restaurant-logo-filename" class="text-sm text-gray-600 mt-2"></p>
                      <button type="button" id="restaurant-logo-remove" class="mt-2 text-sm text-red-600 hover:text-red-800">Remove Logo</button>
                    </div>
                  </div>
                </div>

          </div>

              <!-- Right Column -->
              <div class="space-y-6">
                <!-- Contact Person -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Contact Person <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="contactPerson" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Your full name" required>
                </div>

                <!-- Product Description -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Product Description <span class="text-red-500">*</span>
                  </label>
                  <textarea name="productDescription" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg resize-none" placeholder="Describe your product requirements and features" required></textarea>
                </div>

                <!-- Cuisine Type (only for restaurant products) -->
                <div id="cuisine-type-field" class="hidden">
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Cuisine Type <span class="text-red-500">*</span>
                  </label>
                  <select name="cuisineType" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg">
                    <option value="">Select cuisine type</option>
                    <option value="indian">Indian</option>
                    <option value="chinese">Chinese</option>
                    <option value="italian">Italian</option>
                    <option value="mexican">Mexican</option>
                    <option value="thai">Thai</option>
                    <option value="japanese">Japanese</option>
                    <option value="korean">Korean</option>
                    <option value="mediterranean">Mediterranean</option>
                    <option value="american">American</option>
                    <option value="other">Other</option>
                  </select>
                </div>

                <!-- Contact Information Section -->
                <div class="border-t pt-6">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">Contact Information</h3>
                  
                  <!-- Email -->
                  <div class="mb-4">
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Email <span class="text-red-500">*</span>
                    </label>
                    <input type="email" name="email" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="your.email@example.com" required>
                  </div>

                  <!-- Phone Number -->
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Phone Number <span class="text-red-500">*</span>
                    </label>
                    <input type="tel" name="phone" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="+91 9876543210" required>
                  </div>
                </div>
              </div>
            </div>

            <!-- Color Customization -->
            <div class="border-t pt-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Color Customization</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Primary Color -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Primary Color <span class="text-red-500">*</span>
                  </label>
                  <div class="flex items-center space-x-3">
                    <input type="color" name="primaryColor" value="#3B82F6" class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer">
                    <input type="text" name="primaryColorText" value="#3B82F6" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="#3B82F6">
                  </div>
                </div>

                <!-- Secondary Color -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Secondary Color
                  </label>
                  <div class="flex items-center space-x-3">
                    <input type="color" name="secondaryColor" value="#10B981" class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer">
                    <input type="text" name="secondaryColorText" value="#10B981" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="#10B981">
                  </div>
                </div>

                <!-- Accent Color -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Accent Color
                  </label>
                  <div class="flex items-center space-x-3">
                    <input type="color" name="accentColor" value="#F59E0B" class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer">
                    <input type="text" name="accentColorText" value="#F59E0B" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="#F59E0B">
                  </div>
                </div>

                <!-- Text Color -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Text Color
                  </label>
                  <div class="flex items-center space-x-3">
                    <input type="color" name="textColor" value="#1F2937" class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer">
                    <input type="text" name="textColorText" value="#1F2937" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="#1F2937">
                  </div>
                </div>
              </div>
            </div>

            <!-- Additional Requirements -->
            <div class="border-t pt-6">
              <label class="block text-sm font-semibold text-gray-700 mb-2">
                Additional Requirements
              </label>
              <textarea name="additionalRequirements" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Describe any specific requirements or features you need..."></textarea>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-4 pt-6 border-t">
              <button type="button" id="cancel-customization" class="px-8 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 font-medium">
                Cancel
              </button>
              <button type="button" id="test-save" class="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 font-medium">
                Test Save to Database
              </button>
              <button type="button" id="simple-test" class="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 font-medium">
                Simple Test
              </button>
              <button type="button" id="direct-save" class="px-8 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 font-medium">
                Direct Save
              </button>
              <button type="submit" class="px-8 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 font-medium">
                Save and Make Payment
              </button>
            </div>
          </form>
        </div>

        <!-- Order Menu System Custom Form (shown when Order Menu System is selected) -->
        <div id="order-menu-customization-form" class="bg-white rounded-lg shadow-sm p-8 hidden">
          <div class="flex items-center justify-between mb-8">
            <h2 class="text-3xl font-bold text-gray-900">Order Menu System Requirements</h2>
            <button id="close-order-menu-form" class="text-gray-400 hover:text-gray-600" onclick="console.log('Close button clicked directly!'); document.getElementById('order-menu-customization-form').classList.add('hidden'); window.history.replaceState({}, document.title, window.location.pathname); const recentActivity = document.getElementById('recent-activity'); if(recentActivity) { recentActivity.style.display = 'block'; recentActivity.classList.remove('hidden'); recentActivity.style.opacity = '1'; recentActivity.style.transform = 'translateY(0)'; }">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
              </div>
          
          <!-- Product Details Display -->
          <div class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg p-6 mb-8 border border-amber-200">
            <div class="text-center">
              <h3 id="order-menu-product-name" class="text-2xl font-bold text-gray-900 mb-2">Order Menu System</h3>
              <p class="text-amber-600 font-medium">Complete order management system with digital menu integration, real-time order tracking, and payment processing</p>
          </div>
        </div>

          <!-- Order Menu System Form -->
          <form id="order-menu-form" class="space-y-8">
            <!-- Pricing Section - Top on Mobile, Right on Desktop -->
            <div class="lg:hidden mb-6">
              <div class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg p-6 border border-amber-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Pricing Details</h3>
                <div class="space-y-2">
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">Base Price:</span>
                    <span class="font-medium">₹999</span>
                  </div>
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">GST (18%):</span>
                    <span class="font-medium">₹180</span>
                  </div>
                  <div class="flex justify-between items-center font-bold text-lg border-t pt-2 mt-2">
                    <span>Total Price:</span>
                    <span class="text-amber-600">₹1,179</span>
                  </div>
                </div>
              </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <!-- Left Column - Form Fields -->
              <div class="space-y-6">
                <!-- Project Name -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Project Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="projectName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter your project name" required>
                </div>

                <!-- Restaurant Name -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Restaurant Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="restaurantName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter restaurant name" required>
                </div>

                <!-- Owner Name -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Owner Name <span class="text-red-500">*</span>
                  </label>
                  <input type="text" name="ownerName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Enter owner name" required>
                </div>

                <!-- Contact Information Section -->
                <div class="border-t pt-6">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">Contact Information</h3>
                  
                  <!-- Contact Person -->
                  <div class="mb-4">
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Contact Person <span class="text-red-500">*</span>
                    </label>
                    <input type="text" name="contactPerson" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Your full name" required>
                  </div>
                  
                  <!-- Email -->
                  <div class="mb-4">
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Email <span class="text-red-500">*</span>
                    </label>
                    <input type="email" name="email" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="your.email@example.com" required>
                  </div>

                  <!-- Phone Number -->
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Phone Number <span class="text-red-500">*</span>
                    </label>
                    <input type="tel" name="phone" id="phone-input" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="+91 9876543210" required maxlength="15" pattern="(\+91[0-9]{10}|[0-9]{10})" title="Please enter 10 digits or +91 followed by 10 digits">
                    <div id="phone-error" class="hidden text-red-500 text-sm mt-1">Phone number must be 10 digits or +91 followed by 10 digits</div>
                  </div>
                </div>

                <!-- Professional Address -->
                <div class="space-y-4 border-t pt-6">
                  <h4 class="text-lg font-semibold text-gray-700">Restaurant Address <span class="text-red-500">*</span></h4>
                  
                  <!-- House/Flat Number -->
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      House/Flat Number <span class="text-red-500">*</span>
                    </label>
                    <input type="text" name="houseNumber" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="e.g., 123, Flat 4B" required>
                  </div>

                  <!-- Address Line 1 -->
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      Address Line 1 <span class="text-red-500">*</span>
                    </label>
                    <input type="text" name="addressLine1" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="e.g., Main Street, Sector 15" required>
                  </div>

                  <!-- City and State Row -->
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              City <span class="text-red-500">*</span>
            </label>
            <div class="relative">
              <input type="text" name="city" id="city-input" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Type to search city..." required autocomplete="off">
              <div id="city-suggestions" class="hidden absolute z-10 w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-48 overflow-y-auto mt-1"></div>
            </div>
            <div id="city-error" class="hidden text-red-500 text-sm mt-1">Please select a valid city</div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              State <span class="text-red-500">*</span>
            </label>
            <div class="relative">
              <input type="text" name="state" id="state-input" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Type to search state..." required autocomplete="off">
              <div id="state-suggestions" class="hidden absolute z-10 w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-48 overflow-y-auto mt-1"></div>
            </div>
            <div id="state-error" class="hidden text-red-500 text-sm mt-1">Please select a valid state</div>
          </div>
                  </div>

        <!-- Pincode and Country Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Pincode <span class="text-red-500">*</span>
            </label>
            <input type="text" name="pincode" id="pincode-input" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="e.g., 400001" required maxlength="6" pattern="[0-9]{6}" title="Please enter exactly 6 digits">
            <div id="pincode-error" class="hidden text-red-500 text-sm mt-1">Pincode must be exactly 6 digits</div>
          </div>
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">
                        Country <span class="text-red-500">*</span>
                      </label>
                      <select name="country" id="country-select" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" required>
                        <option value="India" selected>India</option>
                        <option value="United States">United States</option>
                        <option value="United Kingdom">United Kingdom</option>
                        <option value="Canada">Canada</option>
                        <option value="Australia">Australia</option>
                        <option value="Germany">Germany</option>
                        <option value="France">France</option>
                        <option value="Japan">Japan</option>
                        <option value="Singapore">Singapore</option>
                        <option value="UAE">UAE</option>
                        <option value="Other">Other</option>
                      </select>
                    </div>
                  </div>
                </div>

                <!-- Logo Upload (Optional for OMS) -->
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Upload Logo <span class="text-gray-500">(Optional)</span>
                  </label>
                  <div id="order-menu-logo-upload-area" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors cursor-pointer" onclick="document.getElementById('order-menu-logo-upload').click()">
                    <div class="flex flex-col items-center">
                      <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <p class="text-gray-600 mb-2">Click to upload restaurant logo</p>
                      <p class="text-sm text-gray-500">PNG, JPG, SVG up to 10MB</p>
                    </div>
                  </div>
                  <input type="file" name="restaurantLogo" accept="image/*" class="hidden" id="order-menu-logo-upload">
                  <div id="order-menu-logo-preview" class="hidden mt-4">
                    <img id="order-menu-logo-preview-img" class="w-20 h-20 object-cover rounded-lg mx-auto" alt="Logo preview">
                    <p id="order-menu-logo-filename" class="text-sm text-gray-600 mt-2"></p>
                    <button type="button" id="order-menu-logo-remove" class="mt-2 text-sm text-red-600 hover:text-red-800">Remove Logo</button>
                  </div>
                </div>

                <!-- Menu Photos Upload (Required for OMS) -->
                <div>
                  <label class="block text-lg font-semibold text-gray-700 mb-2">
                    Upload Menu Photos <span class="text-red-500">*</span>
                  </label>
                  <p class="text-sm text-gray-600 mb-4">Upload multiple menu photos. Max 5MB per photo. At least 1 photo required.</p>
                  
                  <div id="menu-photos-upload-area" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors cursor-pointer bg-gray-50">
                    <div class="flex flex-col items-center">
                      <svg class="w-16 h-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                      <p class="text-gray-700 mb-2 font-medium">Click to upload menu photos</p>
                      <p class="text-sm text-gray-500">PNG, JPG, JPEG up to 5MB each</p>
                      <div class="mt-3 flex items-center text-xs text-gray-400">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Multiple photos allowed
                      </div>
                    </div>
                    <input type="file" name="menuPhotos" accept="image/*" multiple class="hidden" id="menu-photos-upload" required>
                  </div>
                  
                  <div id="menu-photos-preview" class="hidden mt-6">
                    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4" id="menu-photos-grid">
                      <!-- Photos will be added here dynamically -->
                    </div>
                  </div>
                </div>

                <!-- Error and Success Messages -->
                <div id="validation-errors" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Validation errors will appear here -->
                </div>
                <div id="menu-photos-error" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Menu photos errors will appear here -->
                </div>
                <div id="phone-validation-error" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Phone validation errors will appear here -->
                </div>
                <div id="address-validation-error" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Address validation errors will appear here -->
                </div>
                <div id="email-validation-error" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Email validation errors will appear here -->
                </div>
                <div id="file-size-error" class="hidden bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded mb-4">
                  <!-- File size errors will appear here -->
                </div>
                <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4">
                  <!-- Success messages will appear here -->
                </div>
                <div id="warning-message" class="hidden bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded mb-4">
                  <!-- Warning messages will appear here -->
                </div>
                <div id="popup-message" class="hidden bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded mb-4">
                  <!-- Popup messages will appear here -->
                </div>
                <div id="error-message" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
                  <!-- Error messages will appear here -->
                </div>

              </div>

              <!-- Right Column - Pricing & Contact -->
              <div class="space-y-6">
                <!-- Pricing Information - Hidden on Mobile, Visible on Desktop -->
                <div class="hidden lg:block bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                  <!-- Header -->
                  <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">
                    <div class="flex items-center justify-between">
                      <div>
                        <h3 class="text-xl font-bold text-white">Order Summary</h3>
                        <p class="text-blue-100 text-sm">Order Menu System</p>
                      </div>
                      <div class="bg-white bg-opacity-20 rounded-lg p-2">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Pricing Details -->
                  <div class="p-6">
                    <div class="space-y-4">
                      <!-- Base Price -->
                      <div class="flex items-center justify-between py-3 border-b border-gray-100">
                        <div class="flex items-center space-x-3">
                          <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                          <span class="text-gray-700 font-medium">Base Package</span>
                        </div>
                        <span class="text-lg font-semibold text-gray-900">₹999</span>
                      </div>
                      
                      <!-- GST -->
                      <div class="flex items-center justify-between py-3 border-b border-gray-100">
                        <div class="flex items-center space-x-3">
                          <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <span class="text-gray-700 font-medium">GST (18%)</span>
                        </div>
                        <span class="text-lg font-semibold text-gray-900">₹180</span>
                      </div>
                      
                      <!-- Features -->
                      <div class="py-3 border-b border-gray-100">
                        <div class="flex items-center space-x-3 mb-3">
                          <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                          <span class="text-gray-700 font-medium">Included Features</span>
                        </div>
                        <div class="ml-5 space-y-2">
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Custom Menu Design
                          </div>
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Online Ordering System
                          </div>
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Admin Dashboard
                          </div>
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Mobile Responsive
                          </div>
                        </div>
                      </div>
                      
                      <!-- Total -->
                      <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-4">
                        <div class="flex items-center justify-between">
                          <div>
                            <span class="text-lg font-bold text-gray-900">Total Amount</span>
                            <p class="text-sm text-gray-600">Including all taxes</p>
                          </div>
                          <div class="text-right">
                            <span class="text-3xl font-bold text-indigo-600">₹1,179</span>
                            <p class="text-sm text-gray-500">One-time payment</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

              </div>
            </div>



            <!-- Additional Requirements -->
            <div class="border-t pt-6">
              <label class="block text-sm font-semibold text-gray-700 mb-2">
                Additional Requirements
              </label>
              <textarea name="additionalRequirements" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg" placeholder="Describe any specific requirements or features you need..."></textarea>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-4 pt-6 border-t">
              <button type="button" id="cancel-order-menu" class="px-8 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 font-medium" onclick="console.log('Cancel button clicked directly!'); document.getElementById('order-menu-customization-form').classList.add('hidden'); window.history.replaceState({}, document.title, window.location.pathname); const recentActivity = document.getElementById('recent-activity'); if(recentActivity) { recentActivity.style.display = 'block'; recentActivity.classList.remove('hidden'); recentActivity.style.opacity = '1'; recentActivity.style.transform = 'translateY(0)'; }">
                Cancel
              </button>
              <button type="submit" class="px-8 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 font-medium">
                Save and Make Payment
              </button>
            </div>
          </form>
        </div>

        <!-- Recent Activity -->
        <div id="recent-activity" class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
          <div class="text-center py-8">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No recent activity</h3>
            <p class="mt-1 text-sm text-gray-500">Start by browsing our products and placing your first order.</p>
            <div class="mt-6">
              <a href="/products" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                Browse Products
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>
  </AuthGuard>
</Layout>

<script>
  // Import the FIXED database helper
  import { saveCustomizationForm } from '../lib/customization-db.js';

  // Menu Photos Array
  let menuPhotos = [];
  
  console.log('Dashboard loaded - using global auth manager');

  // Function to fetch user profile from Supabase
  async function fetchUserProfile(userId) {
    try {
      console.log('🔍 Fetching user profile from Supabase for user:', userId);
      const { supabase } = await import('../lib/supabase');
      
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        console.error('Error fetching user profile:', error);
        return null;
      }

      console.log('✅ User profile fetched from Supabase:', data);
      return data;
    } catch (error) {
      console.error('Error in fetchUserProfile:', error);
      return null;
    }
  }

  // Function to update user info - ENHANCED FOR SUPABASE
  async function updateUserInfo() {
    console.log('🔄 Updating user info...');
    
    // CRITICAL: Check if user is actually logged in first
    const authManager = window.globalAuthManager || window.simpleAuthManager;
    if (!authManager || !authManager.isUserLoggedIn()) {
      console.log('❌ User not logged in - showing generic welcome message');
      
      // Update welcome message to generic text
      const userWelcome = document.getElementById('user-welcome');
      if (userWelcome) {
        userWelcome.textContent = 'Guest';
        console.log('👋 Welcome message updated to: Guest');
      }
      
      console.log('✅ Dashboard updated for guest user');
      return;
    }
    
    // Get authenticated user data
    let userData = null;
    let source = '';
    
    // Get current user from auth manager
    const currentUser = authManager.getCurrentUser();
    if (currentUser && currentUser.email) {
      userData = currentUser;
      source = 'auth-manager';
      console.log(`✅ Found authenticated user data:`, userData.email);
    }
    
    // If still no data, try to get from storage (but only if user is logged in)
    if (!userData) {
      console.log('No auth manager data, checking storage...');
      const sources = [
        { key: 'simple-auth-session', storage: sessionStorage, path: 'user' },
        { key: 'simple-auth-user', storage: localStorage, path: null },
        { key: 'simple-auth-session', storage: localStorage, path: 'user' }
      ];
      
      for (const sourceInfo of sources) {
        try {
          const data = sourceInfo.storage.getItem(sourceInfo.key);
          if (data) {
            const parsed = JSON.parse(data);
            userData = sourceInfo.path ? parsed[sourceInfo.path] : parsed;
            if (userData && userData.email) {
              source = sourceInfo.key;
              console.log(`✅ Found user data in ${sourceInfo.key}:`, userData.email);
              break;
            }
          }
        } catch (error) {
          console.log(`Error reading ${sourceInfo.key}:`, error);
        }
      }
    }
    
    // If still no data, show generic message (don't create mock data)
    if (!userData) {
      console.log('❌ No authenticated user data found');
      
      // Update welcome message to generic text
      const userWelcome = document.getElementById('user-welcome');
      if (userWelcome) {
        userWelcome.textContent = 'Guest';
        console.log('👋 Welcome message updated to: Guest');
      }
      
      console.log('✅ Dashboard updated for guest user');
      return;
    }
    
    // Normalize user data structure for Supabase
    if (userData) {
      // Handle Supabase user metadata
      if (userData.user_metadata) {
        userData.full_name = userData.user_metadata.full_name || userData.full_name;
        userData.phone = userData.user_metadata.phone || userData.phone;
        userData.company_name = userData.user_metadata.company_name || userData.company_name;
      }
      
      // If we have incomplete data, try to fetch from Supabase
      if (userData.id && (!userData.full_name || userData.full_name === 'User' || !userData.phone || userData.phone === 'Not set')) {
        console.log('🔄 Incomplete user data, fetching from Supabase...');
        try {
          const profileData = await fetchUserProfile(userData.id);
          if (profileData) {
            // Merge profile data with existing user data
            userData = {
              ...userData,
              ...profileData,
              email: userData.email || profileData.email
            };
            console.log('✅ Enhanced user data with profile:', userData);
          }
        } catch (error) {
          console.log('Error fetching profile data:', error);
        }
      }
      
      // Ensure we have the required fields (but don't create fake data)
      userData.full_name = userData.full_name || userData.fullName || 'User';
      userData.phone = userData.phone || 'Not set';
      userData.company_name = userData.company_name || userData.companyName || 'Not set';
      // Don't create fake email - only use real authenticated email
      if (!userData.email) {
        console.log('❌ No email found in authenticated user data');
        return;
      }
      
      console.log('📋 Final normalized user data:', userData);
    }
    
    // Update the dashboard elements (only welcome message remains)
    
    // Update welcome message
    const userWelcome = document.getElementById('user-welcome');
    if (userWelcome) {
      const displayName = userData.full_name || userData.fullName || userData.email?.split('@')[0] || 'User';
      userWelcome.textContent = displayName;
      console.log('👋 Welcome message updated to:', displayName);
    }
    
    console.log(`✅ Dashboard updated successfully from ${source}`);
    
    // Force update welcome message
    setTimeout(() => {
      console.log('🔄 Force update welcome message...');
      const userWelcome = document.getElementById('user-welcome');
      if (userWelcome) {
        const displayName = userData.full_name || userData.fullName || userData.email?.split('@')[0] || 'User';
        userWelcome.textContent = displayName;
        console.log('Force updated welcome to:', userWelcome.textContent);
      }
    }, 100);
  }

  // Handle product selection and customization form
  function handleProductSelection() {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('product');
    const price = urlParams.get('price');
    
    console.log('🔍 Checking for product selection:', { productId, price });
    
    if (productId && price) {
      console.log('✅ Product selected, showing customization form');
      
      // Get product details from actual products data (matching products-data.ts)
      const products = [
        { id: '1', name: 'Restaurant Menu System', description: 'Digital menu system with QR code integration, online ordering, and real-time updates. Perfect for restaurants looking to modernize their customer experience.', price: 25000, type: 'restaurant' },
        { id: '2', name: 'Android TV App', description: 'Custom Android TV applications with beautiful UI, content management, and remote control support. Perfect for streaming services and media companies.', price: 55000, type: 'non-restaurant' },
        { id: '3', name: 'Streaming Mobile App', description: 'Mobile streaming applications for iOS and Android with custom features, user authentication, and content management.', price: 35000, type: 'non-restaurant' },
        { id: '4', name: 'Restaurant Website', description: 'Professional restaurant website with online ordering, menu display, and customer management features.', price: 20000, type: 'restaurant' },
        { id: '5', name: 'Order Menu System', description: 'Complete order management system with digital menu integration, real-time order tracking, and payment processing. Perfect for restaurants looking to streamline their ordering process.', price: 999, type: 'order-menu' }
      ];
      
      const selectedProduct = products.find(p => p.id === productId);
      
      if (selectedProduct) {
        // Hide all forms first with smooth transition
        const productForm = document.getElementById('product-customization-form');
        const orderMenuForm = document.getElementById('order-menu-customization-form');
        const recentActivity = document.getElementById('recent-activity');
        
        // Smooth hide transitions
        if (productForm && !productForm.classList.contains('hidden')) {
          productForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
          productForm.style.opacity = '0';
          productForm.style.transform = 'translateY(-10px)';
          setTimeout(() => productForm.classList.add('hidden'), 300);
        }
        
        if (orderMenuForm && !orderMenuForm.classList.contains('hidden')) {
          orderMenuForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
          orderMenuForm.style.opacity = '0';
          orderMenuForm.style.transform = 'translateY(-10px)';
          setTimeout(() => orderMenuForm.classList.add('hidden'), 300);
        }
        
        if (recentActivity && !recentActivity.classList.contains('hidden')) {
          recentActivity.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
          recentActivity.style.opacity = '0';
          recentActivity.style.transform = 'translateY(-10px)';
          setTimeout(() => recentActivity.classList.add('hidden'), 300);
        }
        
        // Show appropriate form with smooth transition after hiding
        setTimeout(() => {
          // Force common price for Order Menu System
          const forcedPrice = selectedProduct.type === 'order-menu' ? 999 : parseInt(price);
          if (selectedProduct.type === 'order-menu') {
            // Show Order Menu System form
            document.getElementById('order-menu-product-name').textContent = selectedProduct.name;
            // Price is now displayed in the right column pricing section
            
            const orderMenuForm = document.getElementById('order-menu-customization-form');
            orderMenuForm.classList.remove('hidden');
            orderMenuForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
            orderMenuForm.style.opacity = '0';
            orderMenuForm.style.transform = 'translateY(10px)';
            
            setTimeout(() => {
              orderMenuForm.style.opacity = '1';
              orderMenuForm.style.transform = 'translateY(0)';
              // Reinitialize pincode autocomplete when form becomes visible
              if (window.reinitializePincodeAutocomplete) {
                window.reinitializePincodeAutocomplete();
              }
            }, 50);
    } else {
            // Show regular customization form
            document.getElementById('selected-product-name').textContent = selectedProduct.name;
            document.getElementById('selected-product-price').textContent = `₹${forcedPrice.toLocaleString()}`;
            
            // Show/hide cuisine type and restaurant name based on product type
            const cuisineField = document.getElementById('cuisine-type-field');
            const restaurantNameField = document.getElementById('restaurant-name-field');
            
            if (selectedProduct.type === 'restaurant') {
              cuisineField.classList.remove('hidden');
              cuisineField.querySelector('select').required = true;
              restaurantNameField.classList.remove('hidden');
              restaurantNameField.querySelector('input').required = true;
            } else {
              cuisineField.classList.add('hidden');
              cuisineField.querySelector('select').required = false;
              restaurantNameField.classList.add('hidden');
              restaurantNameField.querySelector('input').required = false;
            }
            
            const productForm = document.getElementById('product-customization-form');
            productForm.classList.remove('hidden');
            productForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
            productForm.style.opacity = '0';
            productForm.style.transform = 'translateY(10px)';
            
            setTimeout(() => {
              productForm.style.opacity = '1';
              productForm.style.transform = 'translateY(0)';
            }, 50);
          }
        }, 350);
        
        // Auto-fill user details when form is shown (with longer delay)
        setTimeout(() => autofillUserDetails(), 500);
        
        // Don't clear URL parameters immediately - let them persist for refresh
        // window.history.replaceState({}, document.title, window.location.pathname);
      }
    }
  }

  // City and State data arrays
  const indianCities = [
    'Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', 'Kolkata', 'Pune', 'Ahmedabad', 'Jaipur', 'Surat',
    'Lucknow', 'Kanpur', 'Nagpur', 'Indore', 'Thane', 'Bhopal', 'Visakhapatnam', 'Pimpri-Chinchwad', 'Patna', 'Vadodara',
    'Ghaziabad', 'Ludhiana', 'Agra', 'Nashik', 'Faridabad', 'Meerut', 'Rajkot', 'Kalyan-Dombivali', 'Vasai-Virar', 'Varanasi',
    'Srinagar', 'Aurangabad', 'Navi Mumbai', 'Solapur', 'Vijayawada', 'Kolhapur', 'Amritsar', 'Noida', 'Ranchi', 'Howrah',
    'Coimbatore', 'Raipur', 'Jabalpur', 'Gwalior', 'Chandigarh', 'Tiruchirappalli', 'Mysore', 'Bhubaneswar', 'Kochi', 'Bhavnagar',
    'Salem', 'Warangal', 'Guntur', 'Bhiwandi', 'Amravati', 'Nanded', 'Sangli', 'Malegaon', 'Ulhasnagar', 'Jalgaon',
    'Latur', 'Ahmadnagar', 'Dhule', 'Ichalkaranji', 'Parbhani', 'Jalna', 'Bhusawal', 'Panvel', 'Satara', 'Beed',
    'Yavatmal', 'Kamptee', 'Gondia', 'Barshi', 'Achalpur', 'Osmanabad', 'Nandurbar', 'Wardha', 'Udgir', 'Amalner',
    'Akot', 'Pandharpur', 'Shirpur', 'Parli', 'Pathri', 'Sinnar', 'Shirur', 'Mangrulpir', 'Phaltan', 'Pulgaon',
    'Pimpri', 'Pachora', 'Paratwada', 'Pusad', 'Purna', 'Rahuri', 'Rajura', 'Ramtek', 'Ratnagiri', 'Raver',
    'Risod', 'Sailu', 'Sangamner', 'Sasvad', 'Satana', 'Shahpur', 'Shegaon', 'Shendurjana', 'Shirdi', 'Shrigonda',
    'Shrirampur', 'Sillod', 'Soyagaon', 'Talegaon Dabhade', 'Talode', 'Tasgaon', 'Telhara', 'Tirora', 'Tuljapur', 'Tumsar',
    'Uchgaon', 'Umarga', 'Umarkhed', 'Umred', 'Uran', 'Uran Islampur', 'Vadgaon Kasba', 'Vaijapur', 'Vasai', 'Virar',
    'Vita', 'Wadgaon Road', 'Wai', 'Wani', 'Warora', 'Warud', 'Washim', 'Yawal', 'Yevla'
  ];

  const indianStates = [
    'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',
    'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',
    'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal',
    'Andaman and Nicobar Islands', 'Chandigarh', 'Dadra and Nagar Haveli and Daman and Diu', 'Delhi', 'Jammu and Kashmir', 'Ladakh', 'Lakshadweep', 'Puducherry'
  ];

  // Form validation functions
  function setupFormValidation() {
    const pincodeInput = document.getElementById('pincode-input');
    const cityInput = document.getElementById('city-input');
    const stateInput = document.getElementById('state-input');
    const phoneInput = document.getElementById('phone-input');
    
    // Pincode validation - only allow numbers and exactly 6 digits
    if (pincodeInput) {
      pincodeInput.addEventListener('input', function(e) {
        // Remove any non-numeric characters
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
        
        // Limit to 6 digits
        if (e.target.value.length > 6) {
          e.target.value = e.target.value.slice(0, 6);
        }
        
        // Show/hide error message
        const errorDiv = document.getElementById('pincode-error');
        if (e.target.value.length > 0 && e.target.value.length !== 6) {
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });
    }
    
    // City validation - searchable dropdown
    if (cityInput) {
      const citySuggestions = document.getElementById('city-suggestions');
      
      cityInput.addEventListener('input', function(e) {
        const query = e.target.value.toLowerCase();
        const filteredCities = indianCities.filter(city => 
          city.toLowerCase().includes(query)
        );
        
        // Show/hide suggestions
        if (query.length > 0 && filteredCities.length > 0) {
          citySuggestions.innerHTML = filteredCities.map(city => 
            `<div class="px-4 py-2 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0" data-value="${city}">${city}</div>`
          ).join('');
          citySuggestions.classList.remove('hidden');
        } else {
          citySuggestions.classList.add('hidden');
        }
        
        // Show/hide error message
        const errorDiv = document.getElementById('city-error');
        if (e.target.value === '' || !indianCities.includes(e.target.value)) {
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });
      
      // Handle suggestion clicks
      citySuggestions.addEventListener('click', function(e) {
        if (e.target.dataset.value) {
          cityInput.value = e.target.dataset.value;
          citySuggestions.classList.add('hidden');
          // Hide error message
          document.getElementById('city-error').classList.add('hidden');
        }
      });
      
      // Hide suggestions when clicking outside
      document.addEventListener('click', function(e) {
        if (!cityInput.contains(e.target) && !citySuggestions.contains(e.target)) {
          citySuggestions.classList.add('hidden');
        }
      });
    }
    
    // State validation - searchable dropdown
    if (stateInput) {
      const stateSuggestions = document.getElementById('state-suggestions');
      
      stateInput.addEventListener('input', function(e) {
        const query = e.target.value.toLowerCase();
        const filteredStates = indianStates.filter(state => 
          state.toLowerCase().includes(query)
        );
        
        // Show/hide suggestions
        if (query.length > 0 && filteredStates.length > 0) {
          stateSuggestions.innerHTML = filteredStates.map(state => 
            `<div class="px-4 py-2 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0" data-value="${state}">${state}</div>`
          ).join('');
          stateSuggestions.classList.remove('hidden');
        } else {
          stateSuggestions.classList.add('hidden');
        }
        
        // Show/hide error message
        const errorDiv = document.getElementById('state-error');
        if (e.target.value === '' || !indianStates.includes(e.target.value)) {
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });
      
      // Handle suggestion clicks
      stateSuggestions.addEventListener('click', function(e) {
        if (e.target.dataset.value) {
          stateInput.value = e.target.dataset.value;
          stateSuggestions.classList.add('hidden');
          // Hide error message
          document.getElementById('state-error').classList.add('hidden');
        }
      });
      
      // Hide suggestions when clicking outside
      document.addEventListener('click', function(e) {
        if (!stateInput.contains(e.target) && !stateSuggestions.contains(e.target)) {
          stateSuggestions.classList.add('hidden');
        }
      });
    }
    
    // Phone number validation - allow 10 digits or +91 + 10 digits
    if (phoneInput) {
      phoneInput.addEventListener('input', function(e) {
        let value = e.target.value;
        
        // Allow +91 at the beginning, then only numbers
        if (value.startsWith('+91')) {
          // Keep +91 and allow only numbers after it
          value = '+91' + value.substring(3).replace(/[^0-9]/g, '');
          // Limit to +91 + 10 digits = 13 characters total
          if (value.length > 13) {
            value = value.slice(0, 13);
          }
        } else {
          // If not starting with +91, allow only numbers
          value = value.replace(/[^0-9]/g, '');
          // Limit to 10 digits
          if (value.length > 10) {
            value = value.slice(0, 10);
          }
        }
        
        e.target.value = value;
        
        // Show/hide error message
        const errorDiv = document.getElementById('phone-error');
        const isValid = (value.length === 10) || (value.length === 13 && value.startsWith('+91'));
        
        if (value.length > 0 && !isValid) {
          errorDiv.classList.remove('hidden');
        } else {
          errorDiv.classList.add('hidden');
        }
      });
    }
  }
  
  function validateFormFields() {
    const pincodeInput = document.getElementById('pincode-input');
    const cityInput = document.getElementById('city-input');
    const stateInput = document.getElementById('state-input');
    const phoneInput = document.getElementById('phone-input');
    
    let isValid = true;
    
    // Validate pincode
    if (pincodeInput && (!pincodeInput.value || pincodeInput.value.length !== 6 || !/^[0-9]{6}$/.test(pincodeInput.value))) {
      const errorDiv = document.getElementById('pincode-error');
      errorDiv.classList.remove('hidden');
      isValid = false;
    }
    
    // Validate city - must be from valid cities list
    if (cityInput && (!cityInput.value || !indianCities.includes(cityInput.value))) {
      const errorDiv = document.getElementById('city-error');
      errorDiv.classList.remove('hidden');
      isValid = false;
    }
    
    // Validate state - must be from valid states list
    if (stateInput && (!stateInput.value || !indianStates.includes(stateInput.value))) {
      const errorDiv = document.getElementById('state-error');
      errorDiv.classList.remove('hidden');
      isValid = false;
    }
    
    // Validate phone number - accept 10 digits or +91 + 10 digits
    if (phoneInput && (!phoneInput.value || !(/^[0-9]{10}$/.test(phoneInput.value) || /^\+91[0-9]{10}$/.test(phoneInput.value)))) {
      const errorDiv = document.getElementById('phone-error');
      errorDiv.classList.remove('hidden');
      isValid = false;
    }
    
    if (!isValid) {
      // Show validation errors inline instead of alert
      const errorDiv = document.getElementById('validation-errors');
      if (errorDiv) {
        errorDiv.classList.remove('hidden');
        errorDiv.textContent = 'Please fix the validation errors before submitting the form.';
      }
    }
    
    return isValid;
  }

  // Handle Order Menu System form
  function handleOrderMenuForm() {
    const form = document.getElementById('order-menu-form');
    console.log('handleOrderMenuForm called - form found:', form);
    const closeBtn = document.getElementById('close-order-menu-form');
    const cancelBtn = document.getElementById('cancel-order-menu');
    const logoUpload = document.getElementById('order-menu-logo-upload');
    const logoUploadArea = document.getElementById('order-menu-logo-upload-area');
    const logoPreview = document.getElementById('order-menu-logo-preview');
    const logoPreviewImg = document.getElementById('order-menu-logo-preview-img');
    const logoFilename = document.getElementById('order-menu-logo-filename');
    const logoRemoveBtn = document.getElementById('order-menu-logo-remove');
    const menuPhotosUpload = document.getElementById('menu-photos-upload');
    const menuPhotosUploadArea = document.getElementById('menu-photos-upload-area');
    const menuPhotosPreview = document.getElementById('menu-photos-preview');
    const menuPhotosGrid = document.getElementById('menu-photos-grid');
    
    console.log('menuPhotosPreview element found:', menuPhotosPreview);
    console.log('menuPhotosGrid element found:', menuPhotosGrid);
    console.log('menuPhotosUpload element found:', menuPhotosUpload);
    
    // Test if file input exists
    if (!menuPhotosUpload) {
      console.error('CRITICAL: File input element not found! Creating fallback...');
      
      // Create a fallback file input
      const fallbackInput = document.createElement('input');
      fallbackInput.type = 'file';
      fallbackInput.name = 'menuPhotos';
      fallbackInput.accept = 'image/*';
      fallbackInput.multiple = true;
      fallbackInput.className = 'hidden';
      fallbackInput.id = 'menu-photos-upload';
      
      // Add it to the form
      const form = document.getElementById('order-menu-form');
      if (form) {
        form.appendChild(fallbackInput);
        console.log('Fallback file input created and added to form');
      }
    } else {
      console.log('File input element found successfully');
    }
    const removeAllMenuPhotosBtn = document.getElementById('remove-all-menu-photos');
    
    // Menu Photos Upload Functionality
    if (menuPhotosUploadArea && menuPhotosUpload) {
      menuPhotosUploadArea.addEventListener('click', () => {
        menuPhotosUpload.click();
      });

      // File input change handler
      menuPhotosUpload.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        
        if (files.length > 0) {
          // Validate file sizes (5MB max per file)
          const validFiles = files.filter(file => {
            const fileSizeMB = file.size / (1024 * 1024);
            return fileSizeMB <= 5;
          });
          
          if (validFiles.length !== files.length) {
            // Show file size error inline instead of alert
            const errorDiv = document.getElementById('file-size-error');
            if (errorDiv) {
              errorDiv.classList.remove('hidden');
              errorDiv.textContent = `Some files were too large. Only files under 5MB are allowed. ${validFiles.length}/${files.length} files uploaded.`;
            }
          }
          
          // Add all valid files to the array
          menuPhotos = [...menuPhotos, ...validFiles];
          
          // Update preview
          updateMenuPhotosPreview();
          
          // Reset visual warning styles
          menuPhotosUploadArea.classList.remove('border-red-300', 'bg-red-50');
          menuPhotosUploadArea.classList.add('border-gray-300', 'bg-gray-50');
          
          // Show success message and add more button
          menuPhotosUploadArea.innerHTML = `
            <div class="flex flex-col items-center">
              <svg class="w-16 h-16 text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 13l4 4L19 7"></path>
              </svg>
              <p class="text-green-600 mb-2 font-medium">${validFiles.length} photo(s) uploaded successfully</p>
              <p class="text-sm text-gray-500">Total: ${menuPhotos.length} photos uploaded</p>
              <button type="button" onclick="document.getElementById('menu-photos-upload').click()" class="mt-4 px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white font-medium rounded-lg transition-all transform hover:scale-105 shadow-lg">
                <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add More Photos
              </button>
            </div>
          `;
          
          // Reset file input
          menuPhotosUpload.value = '';
        }
      });
    }

    // Update menu photos preview
    function updateMenuPhotosPreview() {
      if (menuPhotos.length > 0) {
        menuPhotosPreview.classList.remove('hidden');
        menuPhotosGrid.innerHTML = '';
        
        // Add photo counter header
        const counterDiv = document.createElement('div');
        counterDiv.className = 'col-span-full mb-4 p-4 bg-green-50 border border-green-200 rounded-lg';
        counterDiv.innerHTML = `
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <svg class="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <div>
                <span class="text-green-800 font-semibold text-lg">${menuPhotos.length} Photo(s) Uploaded</span>
                <p class="text-sm text-green-600">Menu photos ready for your order system</p>
              </div>
            </div>
            <button type="button" onclick="removeAllMenuPhotos()" class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white text-sm font-medium rounded-lg transition-colors">
              <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
              Remove All
            </button>
          </div>
        `;
        menuPhotosGrid.appendChild(counterDiv);
        
        // Add individual photo previews
        menuPhotos.forEach((file, index) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const photoDiv = document.createElement('div');
            photoDiv.className = 'relative group bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow';
            photoDiv.innerHTML = `
              <div class="relative">
                <img src="${e.target.result}" alt="Menu photo ${index + 1}" class="w-full h-32 object-cover">
                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center">
                  <button type="button" class="opacity-0 group-hover:opacity-100 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm hover:bg-red-600 transition-all duration-200 shadow-lg" onclick="removeMenuPhoto(${index})">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              </div>
              <div class="p-3">
                <p class="text-sm text-gray-700 font-medium truncate">${file.name}</p>
                <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
              </div>
            `;
            menuPhotosGrid.appendChild(photoDiv);
          };
          reader.readAsDataURL(file);
        });
      } else {
        menuPhotosPreview.classList.add('hidden');
      }
    }

    // Remove individual menu photo
    window.removeMenuPhoto = (index) => {
      console.log('removeMenuPhoto called, index:', index);
      console.log('Before removal - menuPhotos length:', menuPhotos.length);
      menuPhotos.splice(index, 1);
      console.log('After removal - menuPhotos length:', menuPhotos.length);
      updateMenuPhotosPreview();
      
      // Reset upload area if no photos
      if (menuPhotos.length === 0) {
        menuPhotosUploadArea.innerHTML = `
          <div class="flex flex-col items-center">
            <svg class="w-16 h-16 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <p class="text-red-600 mb-2 font-medium">Menu photos required!</p>
            <p class="text-sm text-gray-500 mb-2">Please upload at least one menu photo to continue</p>
            <div class="mt-3 flex items-center text-xs text-red-500 font-medium">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              This field is mandatory
            </div>
          </div>
        `;
        // Add red border to indicate required field
        menuPhotosUploadArea.classList.add('border-red-300', 'bg-red-50');
        menuPhotosUploadArea.classList.remove('border-gray-300', 'bg-gray-50');
      }
    };

    // Remove all menu photos
    window.removeAllMenuPhotos = () => {
      console.log('removeAllMenuPhotos called');
      console.log('Before removal - menuPhotos length:', menuPhotos.length);
      menuPhotos = [];
      console.log('After removal - menuPhotos length:', menuPhotos.length);
      updateMenuPhotosPreview();
      menuPhotosUpload.value = '';
      
      // Reset upload area with warning
      menuPhotosUploadArea.innerHTML = `
        <div class="flex flex-col items-center">
          <svg class="w-16 h-16 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
          <p class="text-red-600 mb-2 font-medium">Menu photos required!</p>
          <p class="text-sm text-gray-500 mb-2">Please upload at least one menu photo to continue</p>
          <div class="mt-3 flex items-center text-xs text-red-500 font-medium">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            This field is mandatory
          </div>
        </div>
      `;
      // Add red border to indicate required field
      menuPhotosUploadArea.classList.add('border-red-300', 'bg-red-50');
      menuPhotosUploadArea.classList.remove('border-gray-300', 'bg-gray-50');
    };

    const addMenuItemBtn = document.getElementById('add-menu-item');
    const menuItemsContainer = document.getElementById('menu-items-container');
    const categoryInput = document.getElementById('oms-category-input');
    const addCategoryBtn = document.getElementById('oms-add-category-btn');
    const clearAllCategoriesBtn = document.getElementById('oms-clear-all-categories-btn');
    const categoryPills = document.getElementById('oms-category-pills');
    const currentCategoryEl = document.getElementById('oms-current-category');
    const prevBtn = document.getElementById('oms-prev-page');
    const nextBtn = document.getElementById('oms-next-page');
    const pageIndicator = document.getElementById('oms-page-indicator');

    // Category state
    const categories = [];
    let currentCategoryIndex = -1;
    const ITEMS_PER_PAGE = 6;
    let currentPage = 1;

    function renderCategoryPills() {
      categoryPills.innerHTML = '';
      categories.forEach((cat, idx) => {
        const pill = document.createElement('button');
        pill.type = 'button';
        pill.className = `px-3 py-1 rounded-full text-sm ${idx === currentCategoryIndex ? 'bg-amber-600 text-white' : 'bg-gray-100'} flex items-center`;
        // Build button-like content with spacing between text and x
        const label = document.createElement('span');
        label.textContent = cat;
        label.className = 'mr-2';
        pill.appendChild(label);
        const x = document.createElement('span');
        x.textContent = '✕';
        x.className = 'text-xs opacity-70 hover:opacity-100 ml-1';
        x.addEventListener('click', (e) => {
          e.stopPropagation();
          // Remove this category and any items with it
          const removed = categories.splice(idx, 1)[0];
          if (currentCategoryIndex >= categories.length) currentCategoryIndex = categories.length - 1;
          // Remove category from visible item rows' category inputs if matched
          menuItemsContainer.querySelectorAll('.menu-item-row').forEach(row => {
            const input = row.querySelector('.oms-category-field');
            if (input && input.value === removed) {
              input.value = '';
            }
          });
          currentCategoryEl.textContent = categories[currentCategoryIndex] || 'Uncategorized';
          renderCategoryPills();
          filterItemsByCategory();
        });
        pill.appendChild(x);
        pill.addEventListener('click', () => {
          currentCategoryIndex = idx;
          currentCategoryEl.textContent = cat;
          renderCategoryPills();
          filterItemsByCategory();
        });
        categoryPills.appendChild(pill);
      });
    }
    // Remove selected button intentionally removed per request

    // Clear all categories
    clearAllCategoriesBtn?.addEventListener('click', () => {
      categories.splice(0, categories.length);
      currentCategoryIndex = -1;
      currentCategoryEl.textContent = 'Uncategorized';
      renderCategoryPills();
      filterItemsByCategory();
      // Do not delete items, just clear their category values
      menuItemsContainer.querySelectorAll('.oms-category-field').forEach((el) => el.value = '');
    });

    addCategoryBtn?.addEventListener('click', () => {
      const value = categoryInput.value.trim();
      if (!value) return;
      if (!categories.includes(value)) {
        categories.push(value);
        currentCategoryIndex = categories.length - 1;
        currentCategoryEl.textContent = value;
        renderCategoryPills();
        // Apply to visible category inputs
        menuItemsContainer.querySelectorAll('.oms-category-field').forEach((el) => {
          if (!el.value) el.value = value;
        });
        categoryInput.value = '';
      }
    });

    function filterItemsByCategory() {
      const allItems = Array.from(menuItemsContainer.querySelectorAll('.menu-item-row'));
      // Show all first
      allItems.forEach(row => row.style.display = '');
      // Filter by category if selected
      if (currentCategoryIndex >= 0) {
        const cat = categories[currentCategoryIndex];
        allItems.forEach(row => {
          const input = row.querySelector('.oms-category-field');
          if (input && input.value && input.value !== cat) {
            row.style.display = 'none';
          }
        });
      }
      // Then paginate
      const visible = allItems.filter(r => r.style.display !== 'none');
      const totalPages = Math.max(1, Math.ceil(visible.length / ITEMS_PER_PAGE));
      currentPage = Math.min(currentPage, totalPages);
      pageIndicator.textContent = `Page ${currentPage} / ${totalPages}`;
      visible.forEach((row, idx) => {
        const pageOfItem = Math.floor(idx / ITEMS_PER_PAGE) + 1;
        row.style.display = (pageOfItem === currentPage) ? '' : 'none';
      });
    }

    prevBtn?.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage -= 1;
        filterItemsByCategory();
      }
    });

    nextBtn?.addEventListener('click', () => {
      currentPage += 1;
      filterItemsByCategory();
    });
    
    logoUpload?.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const fileName = file.name;
        const fileSize = (file.size / 1024 / 1024).toFixed(2);
        logoUploadArea.innerHTML = `
          <div class="flex flex-col items-center">
            <svg class="w-12 h-12 text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <p class="text-green-600 mb-1 font-medium">Logo uploaded successfully</p>
            <p class="text-sm text-gray-500">${fileName} (${fileSize} MB)</p>
          </div>
        `;
      }
    });


    // Menu style selection functionality
    const menuStyleOptions = document.querySelectorAll('.menu-style-option');
    menuStyleOptions.forEach(option => {
      option.addEventListener('click', () => {
        // Remove selected class from all options
        menuStyleOptions.forEach(opt => {
          opt.classList.remove('border-primary-500', 'bg-primary-50');
          opt.classList.add('border-gray-200');
        });
        
        // Add selected class to clicked option
        option.classList.remove('border-gray-200');
        option.classList.add('border-primary-500', 'bg-primary-50');
        
        // Check the radio button
        const radio = option.querySelector('input[type="radio"]');
        if (radio) {
          radio.checked = true;
        }
      });
    });
    
    // Color picker synchronization for Order Menu form
    function syncOrderMenuColorInputs() {
      const colorInputs = form?.querySelectorAll('input[type="color"]');
      const textInputs = form?.querySelectorAll('input[name$="ColorText"]');
      
      colorInputs?.forEach((colorInput, index) => {
        const textInput = textInputs?.[index];
        if (textInput) {
          // Sync color picker to text input
          colorInput.addEventListener('input', () => {
            textInput.value = colorInput.value;
          });
          
          // Sync text input to color picker
          textInput.addEventListener('input', () => {
            if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
              colorInput.value = textInput.value;
            }
          });
        }
      });
    }
    
    syncOrderMenuColorInputs();
    
    // Add menu item functionality
    let menuItemCount = 1;
    addMenuItemBtn?.addEventListener('click', () => {
      const menuItemRow = document.createElement('div');
      menuItemRow.className = 'menu-item-row grid grid-cols-1 md:grid-cols-4 gap-4 mb-4 p-4 border border-gray-200 rounded-lg';
      menuItemRow.innerHTML = `
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Item Name</label>
          <input type="text" name="menuItems[${menuItemCount}][item_name]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="e.g., Margherita Pizza" required>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Price (₹)</label>
          <input type="number" name="menuItems[${menuItemCount}][price]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="299" step="0.01" required>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
          <input type="text" name="menuItems[${menuItemCount}][item_category]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 oms-category-field" placeholder="Type or pick from pills" required>
        </div>
        <div class="flex items-end">
          <button type="button" class="remove-menu-item px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm">
            Remove
          </button>
        </div>
      `;
      menuItemsContainer?.appendChild(menuItemRow);
      menuItemCount++;
      // Apply current category automatically
      if (currentCategoryIndex >= 0) {
        const currentCat = categories[currentCategoryIndex];
        const catInput = menuItemRow.querySelector('.oms-category-field');
        if (catInput && !catInput.value) catInput.value = currentCat;
      }
      filterItemsByCategory();
    });
    
    // Remove menu item functionality
    menuItemsContainer?.addEventListener('click', (e) => {
      if (e.target.classList.contains('remove-menu-item')) {
        e.target.closest('.menu-item-row').remove();
        filterItemsByCategory();
      }
    });

    // Initial filter
    filterItemsByCategory();
    
    // Close form handlers
    closeBtn?.addEventListener('click', () => {
      showBrowseProductsSection();
      // Clear URL parameters when form is closed
      window.history.replaceState({}, document.title, window.location.pathname);
    });
    
    cancelBtn?.addEventListener('click', () => {
      showBrowseProductsSection();
      // Clear URL parameters when form is closed
      window.history.replaceState({}, document.title, window.location.pathname);
    });
    
    // Form submission - simplified validation
    console.log('Adding form submission event listener to form:', form);
    if (form) {
      form.addEventListener('submit', async (e) => {
        console.log('Form submit event triggered!');
        e.preventDefault();
        
        // CRITICAL: Check if user is logged in before allowing form submission
        const authManager = window.globalAuthManager || window.simpleAuthManager;
        if (!authManager || !authManager.isUserLoggedIn()) {
          alert('❌ Please log in to submit this form. You must be authenticated to place an order.');
          return;
        }
      
      const formData = new FormData(form);
      const formDataObj = Object.fromEntries(formData);
      
      // Validate menu photos are uploaded (Required for Order Menu System)
      console.log('Form submission - menuPhotos length:', menuPhotos.length);
      if (menuPhotos.length === 0) {
        // Show menu photos error inline instead of alert
        const errorDiv = document.getElementById('menu-photos-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please upload at least one menu photo. This field is required for Order Menu System.';
        }
        console.log('Form submission blocked - no menu photos');
        return;
      }
      console.log('Form submission allowed - menu photos present');

      // Validate phone number
      if (!formDataObj.phone || formDataObj.phone.trim() === '') {
        // Show phone error inline instead of alert
        const errorDiv = document.getElementById('phone-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter your phone number. This field is required.';
        }
        return;
      }

      // Validate restaurant address fields
      if (!formDataObj.houseNumber || formDataObj.houseNumber.trim() === '') {
        // Show address error inline instead of alert
        const errorDiv = document.getElementById('address-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter house/flat number. This field is required.';
        }
        return;
      }
      if (!formDataObj.addressLine1 || formDataObj.addressLine1.trim() === '') {
        const errorDiv = document.getElementById('address-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter address line 1. This field is required.';
        }
        return;
      }
      if (!formDataObj.city || formDataObj.city.trim() === '') {
        const errorDiv = document.getElementById('address-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter city. This field is required.';
        }
        return;
      }
      if (!formDataObj.state || formDataObj.state.trim() === '') {
        const errorDiv = document.getElementById('address-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter state. This field is required.';
        }
        return;
      }
      if (!formDataObj.pincode || formDataObj.pincode.trim() === '') {
        const errorDiv = document.getElementById('address-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter pincode. This field is required.';
        }
        return;
      }

      // Validate email
      if (!formDataObj.email || formDataObj.email.trim() === '') {
        // Show email error inline instead of alert
        const errorDiv = document.getElementById('email-validation-error');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Please enter your email address. This field is required.';
        }
        return;
      }
      
      console.log('📝 Order Menu requirements saved:', formDataObj);
      
      // Clear all error messages
      const errorDivs = ['validation-errors', 'menu-photos-error', 'phone-validation-error', 'address-validation-error', 'email-validation-error', 'file-size-error', 'warning-message', 'popup-message', 'error-message'];
      errorDivs.forEach(id => {
        const div = document.getElementById(id);
        if (div) div.classList.add('hidden');
      });
      
      // Create order menu requirements object
      const orderMenuRequirements = {
        productId: '5',
        productName: 'Order Menu System',
        productDescription: 'Complete order management system with digital menu integration, real-time order tracking, and payment processing. Perfect for restaurants looking to streamline their ordering process.',
        productPrice: '₹1,179',
        projectName: formDataObj.projectName,
        restaurantName: formDataObj.restaurantName,
        ownerName: formDataObj.ownerName,
        houseNumber: formDataObj.houseNumber,
        addressLine1: formDataObj.addressLine1,
        city: formDataObj.city,
        state: formDataObj.state,
        pincode: formDataObj.pincode,
        country: formDataObj.country,
        contactPerson: formDataObj.contactPerson,
        email: formDataObj.email,
        phone: formDataObj.phone,
        additionalRequirements: formDataObj.additionalRequirements,
        restaurantLogo: formDataObj.restaurantLogo,
        menuPhotos: menuPhotos || [],
        timestamp: new Date().toISOString()
      };
      
      try {
        // Save Order Menu System to Supabase OMS table
        console.log('💾 Saving OMS data to Supabase...');
        
        // Get Supabase client
        const { supabase } = await import('../lib/supabase');
        
        // Check if Supabase is available
        if (!supabase) {
          console.error('❌ Supabase not available, saving locally only');
          const existingRequirements = JSON.parse(localStorage.getItem('order-menu-requirements') || '[]');
          existingRequirements.push(orderMenuRequirements);
          localStorage.setItem('order-menu-requirements', JSON.stringify(existingRequirements));
          // Show success message inline instead of alert
          const successDiv = document.getElementById('success-message');
          if (successDiv) {
            successDiv.classList.remove('hidden');
            successDiv.textContent = 'Order Menu requirements saved locally! Our team will contact you soon.';
          }
        } else {
          // Save to Supabase using OMS function
          const { data: customizationData, error: customizationError } = await supabase.rpc('upsert_oms_customization', {
            p_user_email: data.email,
            p_project_name: data.projectName,
            p_restaurant_name: data.restaurantName,
            p_owner_name: data.ownerName,
            p_restaurant_address: `${data.houseNumber}, ${data.addressLine1}, ${data.city}, ${data.state} ${data.pincode}, ${data.country}`,
            p_contact_person: data.contactPerson,
            p_phone_number: data.phone,
            p_house_number: data.houseNumber,
            p_address_line1: data.addressLine1,
            p_city: data.city,
            p_state: data.state,
            p_pincode: data.pincode,
            p_country: data.country,
            p_contact_person: data.contactPerson,
            p_phone_number: data.phone,
            p_user_id: null,
            p_logo_url: null,
            p_logo_filename: null,
            p_logo_size: null,
            p_additional_requirements: data.additionalRequirements || ''
          });
          
          if (customizationError) {
            console.error('❌ Error saving to Supabase:', customizationError);
            // Fallback to localStorage
            const existingRequirements = JSON.parse(localStorage.getItem('order-menu-requirements') || '[]');
            existingRequirements.push(orderMenuRequirements);
            localStorage.setItem('order-menu-requirements', JSON.stringify(existingRequirements));
            // Show success message inline instead of alert
          const successDiv = document.getElementById('success-message');
          if (successDiv) {
            successDiv.classList.remove('hidden');
            successDiv.textContent = 'Order Menu requirements saved locally! Our team will contact you soon.';
          }
          } else if (customizationData && customizationData.length > 0) {
            const result = customizationData[0];
            if (result.is_duplicate) {
              // Show duplicate data warning based on duplicate type
              let duplicateMessage = '';
              if (result.duplicate_type === 'exact') {
                duplicateMessage = 'This exact data has already been submitted. Please check your existing orders or contact support if you need to make changes.';
              } else if (result.duplicate_type === 'contact') {
                duplicateMessage = 'Data with the same contact person and phone number already exists. The existing record has been updated with your new project information.';
              } else if (result.duplicate_type === 'restaurant') {
                duplicateMessage = 'A restaurant with this name already exists, but your project name is different. A new record has been created.';
              } else {
                duplicateMessage = 'This data has already been submitted. Please check your existing orders or contact support if you need to make changes.';
              }
              
              const warningDiv = document.getElementById('warning-message');
              if (warningDiv) {
                warningDiv.classList.remove('hidden');
                warningDiv.textContent = `⚠️ ${duplicateMessage}`;
              }
            } else {
              console.log('✅ OMS data saved to Supabase with ID:', result.data_id);
              // Show success message inline instead of alert
              const successDiv = document.getElementById('success-message');
              if (successDiv) {
                successDiv.classList.remove('hidden');
                successDiv.textContent = 'Order Menu requirements saved successfully! Opening payment page...';
              }
              // Open payment link in new tab to avoid console errors
              const paymentWindow = window.open('https://payments.pabbly.com/subscribe/68c084369dbcfe4b619b80ce/six-months-inr', '_blank');
              
              // Check if popup was blocked
              if (!paymentWindow) {
                // Show popup blocked message inline instead of alert
                const popupDiv = document.getElementById('popup-message');
                if (popupDiv) {
                  popupDiv.classList.remove('hidden');
                  popupDiv.textContent = 'Please allow popups for this site to proceed with payment, or click the payment link manually.';
                }
                // Fallback: show payment link
                const paymentLink = document.createElement('div');
                paymentLink.innerHTML = `
                  <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                              background: white; padding: 20px; border: 2px solid #4CAF50; 
                              border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 9999;">
                    <h3 style="color: #4CAF50; margin-bottom: 15px;">Payment Required</h3>
                    <p style="margin-bottom: 15px;">Please complete your payment to proceed:</p>
                    <a href="https://payments.pabbly.com/subscribe/68c084369dbcfe4b619b80ce/six-months-inr" 
                       target="_blank" style="display: inline-block; padding: 10px 20px; 
                       background: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">
                      Open Payment Page
                    </a>
                    <button onclick="this.parentElement.remove()" style="margin-left: 10px; padding: 10px 15px; 
                            background: #f44336; color: white; border: none; border-radius: 5px; cursor: pointer;">
                      Close
                    </button>
                  </div>
                `;
                document.body.appendChild(paymentLink);
              } else {
                // Show success message and redirect to congratulations page
                setTimeout(() => {
                  window.location.href = '/orders?order=success&product=order-menu-system';
                }, 2000);
              }
            }
          } else {
            console.error('❌ No data returned from OMS function');
            // Fallback to localStorage
            const existingRequirements = JSON.parse(localStorage.getItem('order-menu-requirements') || '[]');
            existingRequirements.push(orderMenuRequirements);
            localStorage.setItem('order-menu-requirements', JSON.stringify(existingRequirements));
            // Show success message inline instead of alert
          const successDiv = document.getElementById('success-message');
          if (successDiv) {
            successDiv.classList.remove('hidden');
            successDiv.textContent = 'Order Menu requirements saved locally! Our team will contact you soon.';
          }
          }
        }
        
        // Clear URL parameters to show browse products section
        window.history.replaceState({}, document.title, window.location.pathname);
        // Show Browse Products section with smooth transition
        showBrowseProductsSection();
        // Clear form
        form.reset();
      } catch (error) {
        console.error('Error saving order menu requirements:', error);
        // Show error message inline instead of alert
        const errorDiv = document.getElementById('error-message');
        if (errorDiv) {
          errorDiv.classList.remove('hidden');
          errorDiv.textContent = 'Error saving order menu requirements. Please try again.';
        }
      }
    });


    // Logo upload functionality for Order Menu System
    console.log('OMS Logo upload elements:', {
      logoUpload: !!logoUpload,
      logoUploadArea: !!logoUploadArea,
      logoPreview: !!logoPreview,
      logoPreviewImg: !!logoPreviewImg,
      logoFilename: !!logoFilename,
      logoRemoveBtn: !!logoRemoveBtn
    });
    
    // Setup logo upload functionality
    function setupLogoUpload() {
      const logoUpload = document.getElementById('order-menu-logo-upload');
      const logoUploadArea = document.getElementById('order-menu-logo-upload-area');
      
      console.log('Setting up logo upload - elements found:', {
        logoUpload: !!logoUpload,
        logoUploadArea: !!logoUploadArea
      });
      
      if (logoUpload && logoUploadArea) {
        // Remove any existing event listeners
        logoUploadArea.replaceWith(logoUploadArea.cloneNode(true));
        const newLogoUploadArea = document.getElementById('order-menu-logo-upload-area');
        
        // Add click handler
        newLogoUploadArea.addEventListener('click', (e) => {
          console.log('Logo upload area clicked!');
          e.preventDefault();
          e.stopPropagation();
          console.log('Triggering file input click...');
          logoUpload.click();
          console.log('File input click triggered');
        });
        
        console.log('Logo upload click handler attached successfully');
      } else {
        console.error('Logo upload elements not found!');
      }
    }
    
    // Setup logo upload immediately
    setupLogoUpload();
    
    // Also setup when form becomes visible
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const form = document.getElementById('order-menu-customization-form');
          if (form && !form.classList.contains('hidden')) {
            console.log('Order menu form is now visible, setting up logo upload...');
            setupLogoUpload();
          }
        }
      });
    });
    
    const orderMenuForm = document.getElementById('order-menu-customization-form');
    if (orderMenuForm) {
      observer.observe(orderMenuForm, { attributes: true, attributeFilter: ['class'] });
    }
    
    // Logo upload change handler
    if (logoUpload) {
      logoUpload.addEventListener('change', (e) => {
        console.log('OMS Logo upload change event triggered');
        const file = e.target.files[0];
        if (file) {
          console.log('File selected:', file.name);
          const reader = new FileReader();
          reader.onload = (e) => {
            console.log('File reader onload triggered');
            logoPreviewImg.src = e.target.result;
            logoFilename.textContent = file.name;
            logoPreview.classList.remove('hidden');
            // Update upload area to show success state instead of hiding it
            console.log('Updating logoUploadArea innerHTML');
            logoUploadArea.innerHTML = `
              <div class="flex flex-col items-center">
                <svg class="w-12 h-12 text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <p class="text-green-600 mb-1 font-medium">Logo uploaded successfully</p>
                <p class="text-sm text-gray-500">${file.name}</p>
                <button type="button" id="change-logo-btn-oms" class="mt-2 text-sm text-blue-600 hover:text-blue-800 underline" style="display: block !important; visibility: visible !important;">Change Logo</button>
              </div>
            `;
            
            // Add event listener to the new button
            const changeLogoBtn = document.getElementById('change-logo-btn-oms');
            if (changeLogoBtn) {
              changeLogoBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                const fileInput = document.getElementById('order-menu-logo-upload');
                if (fileInput) {
                  fileInput.click();
                } else {
                  console.error('order-menu-logo-upload element not found when clicking change logo button');
                }
              });
            }
            
            console.log('LogoUploadArea innerHTML updated');
          };
          reader.readAsDataURL(file);
        }
      });

      // Remove logo functionality
      logoRemoveBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        logoUpload.value = '';
        logoPreview.classList.add('hidden');
        // Reset upload area to original state
        logoUploadArea.innerHTML = `
          <div class="flex flex-col items-center">
            <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <p class="text-gray-600 mb-2">Click to upload restaurant logo</p>
            <p class="text-sm text-gray-500">PNG, JPG, SVG up to 10MB</p>
          </div>
        `;
      });
    }


    // Close form handlers using event delegation
    console.log('Setting up Order Menu form event listeners...');
    console.log('Close button found:', closeBtn);
    console.log('Cancel button found:', cancelBtn);
    
    // Use event delegation to ensure buttons work even if they're not immediately available
    document.addEventListener('click', (e) => {
      if (e.target && e.target.id === 'close-order-menu-form') {
        console.log('Close button clicked via delegation!');
        e.preventDefault();
        document.getElementById('order-menu-customization-form').classList.add('hidden');
        window.history.replaceState({}, document.title, window.location.pathname);
        setTimeout(() => showBrowseProductsSection(), 100);
      }
      
      if (e.target && e.target.id === 'cancel-order-menu') {
        console.log('Cancel button clicked via delegation!');
        e.preventDefault();
        document.getElementById('order-menu-customization-form').classList.add('hidden');
        window.history.replaceState({}, document.title, window.location.pathname);
        setTimeout(() => showBrowseProductsSection(), 100);
      }
    });
    } else {
      console.error('Form not found - cannot add event listener');
    }
    
    // Add real-time validation for form fields
    setupFormValidation();
    
    // Add click listener to submit button as primary validation
    const submitButton = form?.querySelector('button[type="submit"]');
    if (submitButton) {
      console.log('Adding click listener to submit button:', submitButton);
      submitButton.addEventListener('click', (e) => {
        console.log('Submit button clicked!');
        
        // Check menu photos validation
        if (menuPhotos.length === 0) {
          // Show menu photos error inline instead of alert
          const errorDiv = document.getElementById('menu-photos-error');
          if (errorDiv) {
            errorDiv.classList.remove('hidden');
            errorDiv.textContent = 'Please upload at least one menu photo. This field is required for Order Menu System.';
          }
          e.preventDefault();
          e.stopPropagation();
          return false;
        }
        
        // Validate form fields before submission
        if (!validateFormFields()) {
          e.preventDefault();
          e.stopPropagation();
          return false;
        }
        
        console.log('Menu photos validation passed, allowing submission');
        // Let the form submit normally
      });
    } else {
      console.error('Submit button not found');
    }
  }

  // Handle form submission
  function handleFormSubmission() {
    const form = document.getElementById('customization-form');
    const closeBtn = document.getElementById('close-customization-form');
    const cancelBtn = document.getElementById('cancel-customization');
    const logoUpload = document.getElementById('restaurant-logo-upload');
    const logoUploadArea = document.getElementById('restaurant-logo-upload-area');
    const logoPreview = document.getElementById('restaurant-logo-preview');
    const logoPreviewImg = document.getElementById('restaurant-logo-preview-img');
    const logoFilename = document.getElementById('restaurant-logo-filename');
    const logoRemoveBtn = document.getElementById('restaurant-logo-remove');
    
    // Initialize logo upload area click handler
    if (logoUploadArea) {
      logoUploadArea.onclick = () => {
        const el = document.getElementById('restaurant-logo-upload');
        if (el) el.click();
        else console.error('restaurant-logo-upload element not found in initial handler');
      };
    }

    logoUpload?.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          logoPreviewImg.src = e.target.result;
          logoFilename.textContent = file.name;
          logoPreview.classList.remove('hidden');
          // Update upload area to show success state instead of hiding it
          logoUploadArea.innerHTML = `
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <p class="text-green-600 mb-1 font-medium">Logo uploaded successfully</p>
              <p class="text-sm text-gray-500">${file.name}</p>
              <button type="button" onclick="const el = document.getElementById('restaurant-logo-upload'); if(el) el.click(); else console.error('restaurant-logo-upload element not found in button onclick');" class="mt-2 text-sm text-blue-600 hover:text-blue-800">Change Logo</button>
            </div>
          `;
        };
        reader.readAsDataURL(file);
      }
    });

    // Remove logo functionality
    logoRemoveBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      logoUpload.value = '';
      logoPreview.classList.add('hidden');
      // Reset upload area to original state
      logoUploadArea.innerHTML = `
        <div class="flex flex-col items-center">
          <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <p class="text-gray-600 mb-2">Click to upload logo</p>
          <p class="text-sm text-gray-500">PNG, JPG, SVG up to 10MB</p>
        </div>
      `;
      // Re-add click handler
      logoUploadArea.onclick = () => {
        const el = document.getElementById('restaurant-logo-upload');
        if (el) el.click();
        else console.error('restaurant-logo-upload element not found in reset handler');
      };
    });
    
    // Color picker synchronization
    function syncColorInputs() {
      const colorInputs = form?.querySelectorAll('input[type="color"]');
      const textInputs = form?.querySelectorAll('input[name$="ColorText"]');
      
      colorInputs?.forEach((colorInput, index) => {
        const textInput = textInputs?.[index];
        if (textInput) {
          // Sync color picker to text input
          colorInput.addEventListener('input', () => {
            textInput.value = colorInput.value;
          });
          
          // Sync text input to color picker
          textInput.addEventListener('input', () => {
            if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
              colorInput.value = textInput.value;
            }
          });
        }
      });
    }
    
    syncColorInputs();
    
    // Close form handlers
    closeBtn?.addEventListener('click', () => {
      showBrowseProductsSection();
      // Clear URL parameters when form is closed
      window.history.replaceState({}, document.title, window.location.pathname);
    });
    
    cancelBtn?.addEventListener('click', () => {
      showBrowseProductsSection();
      // Clear URL parameters when form is closed
      window.history.replaceState({}, document.title, window.location.pathname);
    });
    
    // Form submission - Save requirements only
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('🚀 FORM SUBMIT EVENT TRIGGERED!');
      console.log('🚀 Form element:', form);
      console.log('🚀 Event target:', e.target);
      
      // CRITICAL: Check if user is logged in before allowing form submission
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      if (!authManager || !authManager.isUserLoggedIn()) {
        alert('❌ Please log in to submit this form. You must be authenticated to place an order.');
        return;
      }
      
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      
      console.log('📝 Project requirements saved:', data);
      console.log('📝 Form data keys:', Object.keys(data));
      console.log('📝 Form data values:', Object.values(data));
      
      // Get product details first
      const productName = document.getElementById('selected-product-name').textContent;
      const productPrice = document.getElementById('selected-product-price').textContent;
      
      // Check if it's Order Menu System and save to database
      if (productName && productName.toLowerCase().includes('order menu')) {
        console.log('🧪 Order Menu System detected, saving to database...');
        
        // Prepare data for database
        const insertData = {
          project_name: data.projectName || 'Form Submit Project',
          restaurant_name: data.restaurantName || 'Form Submit Restaurant',
          owner_name: data.ownerName || 'Form Submit Owner',
          contact_person: data.contactPerson || 'Form Submit Contact',
          email: data.email || 'form@submit.com',
          phone_number: data.phone || '1234567890',
          house_flat_number: data.houseNumber || '123',
          address_line_1: data.addressLine1 || 'Form Submit Address',
          city: data.city || 'Form Submit City',
          state: data.state || 'Form Submit State',
          pincode: data.pincode || '123456',
          country: data.country || 'India',
          restaurant_logo_url: null,
          menu_photos_urls: [],
          additional_requirements: data.additionalRequirements || 'Form submit requirements',
          base_package_cost: 999.00,
          gst_amount: 180.00,
          total_amount: 1179.00,
          status: 'pending',
          payment_status: 'pending'
        };
        
        console.log('🧪 Insert data prepared:', insertData);
        
        try {
          console.log('🧪 Saving to Supabase...');
          const { data: result, error } = await window.supabase
            .from('order_customizations')
            .insert(insertData)
            .select();
            
          if (error) {
            console.error('❌ Form submit save failed:', error);
            alert('❌ Form submit save failed: ' + error.message);
          } else {
            console.log('✅ Form submit save successful!', result);
            alert('✅ Data saved successfully to Supabase!');
          }
        } catch (err) {
          console.error('❌ Form submit save error:', err);
          alert('❌ Form submit save error: ' + err.message);
        }
      } else {
        console.log('🧪 Not Order Menu System, skipping database save');
        console.log('🧪 Product name was:', productName);
      }
      
      // Create project requirements object
      const projectRequirements = {
        productId: new URLSearchParams(window.location.search).get('product') || '1',
        // product context
        productName,
        productPrice,
        projectName: data.projectName,
        appName: data.appName,
        contactPerson: data.contactPerson,
        productDescriptionCustom: data.productDescription,
        email: data.email,
        phone: data.phone,
        additionalRequirements: data.additionalRequirements,
        restaurantLogo: data.restaurantLogo,
        timestamp: new Date().toISOString()
      };
      
      // Always capture restaurant-specific fields if present (avoid ID mismatches)
      projectRequirements.restaurantName = data.restaurantName || projectRequirements.restaurantName || '';
      projectRequirements.cuisineType = data.cuisineType || projectRequirements.cuisineType || '';
      
      try {
        // Save to database using the helper function
        console.log('💾 Saving project form to database...');
        
        // Determine product type from the visible product name to avoid ID mismatches
        const normalize = (s) => (s || '').toLowerCase();
        const name = normalize(productName);
        let productType = 'restaurant-website';
        if (name.includes('order menu')) productType = 'restaurant-menu-system';
        else if (name.includes('restaurant website')) productType = 'restaurant-website';
        else if (name.includes('android tv')) productType = 'android-tv-app';
        else if (name.includes('streaming')) productType = 'streaming-mobile-app';

        // Upload logo to Supabase Storage (if provided)
        let logoUrl = projectRequirements.logoUrl || null;
        let logoFilename = projectRequirements.logoFilename || null;
        let logoMimeType = projectRequirements.logoMimeType || null;
        let logoSize = projectRequirements.logoSize || null;
        try {
          const fileInput = form.querySelector('input[name="restaurantLogo"]');
          const file = fileInput?.files?.[0];
          if (file) {
            const { supabase } = await import('../lib/supabase');
            // Normalize filename (no spaces), enforce max size 10MB, and use ArrayBuffer for reliability
            const safeName = file.name.replace(/\s+/g, '_');
            if (file.size > 10 * 1024 * 1024) {
              throw new Error('Logo file exceeds 10MB limit');
            }
            const path = `${Date.now()}_${safeName}`;
            const fileBuffer = await file.arrayBuffer();
            const { error: upErr } = await supabase.storage
              .from('logos')
              .upload(path, fileBuffer, { upsert: true, contentType: file.type, cacheControl: '3600' });
            if (!upErr) {
              const { data: pub } = supabase.storage.from('logos').getPublicUrl(path);
              logoUrl = pub?.publicUrl || null;
              // Fallback: create a long-lived signed URL if bucket isn't public
              if (!logoUrl) {
                const { data: signed, error: signErr } = await supabase.storage
                  .from('logos')
                  .createSignedUrl(path, 60 * 60 * 24 * 365); // 1 year
                if (!signErr) {
                  logoUrl = signed?.signedUrl || null;
                }
              }
              logoFilename = file.name;
              logoMimeType = file.type;
              logoSize = file.size;
            }
          }
        } catch (e) {
          console.warn('Logo upload skipped:', e);
        }
        
        // Upload menu photos to Supabase Storage (Required for Order Menu System)
        let menuPhotosUrls = [];
        if (name.includes('order menu') && menuPhotos.length > 0) {
          try {
            const { supabase } = await import('../lib/supabase');
            for (let i = 0; i < menuPhotos.length; i++) {
              const photo = menuPhotos[i];
              const safeName = photo.name.replace(/\s+/g, '_');
              const path = `menu_photos/${Date.now()}_${i}_${safeName}`;
              const fileBuffer = await photo.arrayBuffer();
              const { error: upErr } = await supabase.storage
                .from('logos')
                .upload(path, fileBuffer, { upsert: true, contentType: photo.type, cacheControl: '3600' });
              if (!upErr) {
                const { data: pub } = supabase.storage.from('logos').getPublicUrl(path);
                menuPhotosUrls.push({
                  url: pub?.publicUrl || null,
                  filename: photo.name,
                  mimeType: photo.type,
                  size: photo.size
                });
              }
            }
          } catch (e) {
            console.warn('Menu photos upload skipped:', e);
          }
        }
        
        const formData = {
          productName,
          productPrice,
          projectName: projectRequirements.projectName,
          contactPerson: projectRequirements.contactPerson,
          appName: projectRequirements.appName,
          productDescription: projectRequirements.productDescriptionCustom,
          restaurantName: projectRequirements.restaurantName,
          cuisineType: projectRequirements.cuisineType,
          email: projectRequirements.email,
          phone: projectRequirements.phone,
          primaryColor: projectRequirements.primaryColor,
          secondaryColor: projectRequirements.secondaryColor,
          accentColor: projectRequirements.accentColor,
          textColor: projectRequirements.textColor,
          additionalRequirements: projectRequirements.additionalRequirements,
          // logo info
          logoUrl,
          logoFilename,
          logoMimeType,
          logoSize,
          // menu photos info
          menuPhotosUrls: JSON.stringify(menuPhotosUrls)
        };

        const result = await saveCustomizationForm(formData, productType);
        
        if (result.success) {
          console.log('✅ Project form saved to Supabase database:', result.data);
          
          // Show success message with database confirmation
          alert(`✅ Project requirements saved to database successfully!\n\nRecord ID: ${result.data.id}\nProject: ${result.data.project_name}\nRestaurant: ${result.data.restaurant_name || 'N/A'}\nCuisine: ${result.data.cuisine_type || 'N/A'}\n\nOur team will contact you soon!`);
        } else {
          console.error('❌ Error saving to database:', result.error);
          
          // Fallback to localStorage
        const existingRequirements = JSON.parse(localStorage.getItem('project-requirements') || '[]');
        existingRequirements.push(projectRequirements);
        localStorage.setItem('project-requirements', JSON.stringify(existingRequirements));
        
          alert(`❌ Database save failed: ${result.error}\n\nData saved locally as backup. Our team will contact you soon.`);
        }
        
        // Clear URL parameters to show browse products section
        window.history.replaceState({}, document.title, window.location.pathname);
        
        // Show Browse Products section with smooth transition
        showBrowseProductsSection();
        
        // Clear form
        form.reset();
        
        // Reset logo upload area
        if (logoUploadArea) {
          logoUploadArea.innerHTML = `
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              <p class="text-gray-600 mb-2">Click to upload restaurant logo</p>
              <p class="text-sm text-gray-500">PNG, JPG, SVG up to 10MB</p>
            </div>
          `;
        }
        
      } catch (error) {
        console.error('Error saving requirements:', error);
        alert('Error saving project requirements. Please try again.');
      }
    });
  }

  // Show Browse Products section with smooth transition
  function showBrowseProductsSection() {
    console.log('🔄 Showing browse products section...');
    const productForm = document.getElementById('product-customization-form');
    const orderMenuForm = document.getElementById('order-menu-customization-form');
    const recentActivity = document.getElementById('recent-activity');
    
    console.log('Recent activity element found:', recentActivity);
    
    // Hide forms with smooth transition
    if (productForm && !productForm.classList.contains('hidden')) {
      console.log('Hiding product form...');
      productForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
      productForm.style.opacity = '0';
      productForm.style.transform = 'translateY(-10px)';
      setTimeout(() => productForm.classList.add('hidden'), 300);
    }
    
    if (orderMenuForm && !orderMenuForm.classList.contains('hidden')) {
      console.log('Hiding order menu form...');
      orderMenuForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
      orderMenuForm.style.opacity = '0';
      orderMenuForm.style.transform = 'translateY(-10px)';
      setTimeout(() => orderMenuForm.classList.add('hidden'), 300);
    }
    
    // Show Browse Products section with smooth transition
    setTimeout(() => {
      if (recentActivity) {
        console.log('Showing recent activity section...');
        recentActivity.style.display = 'block'; // Ensure it's visible
        recentActivity.classList.remove('hidden');
        recentActivity.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
        recentActivity.style.opacity = '0';
        recentActivity.style.transform = 'translateY(10px)';
        
        setTimeout(() => {
          recentActivity.style.opacity = '1';
          recentActivity.style.transform = 'translateY(0)';
          console.log('✅ Browse products section is now visible');
          console.log('Recent activity display style:', recentActivity.style.display);
          console.log('Recent activity class list:', recentActivity.classList.toString());
        }, 50);
      } else {
        console.error('❌ Recent activity element not found!');
      }
    }, 350);
  }

  // Make function globally accessible
  window.showBrowseProductsSection = showBrowseProductsSection;

  // Auto-fill user details in forms - ONLY when user is properly authenticated
  function autofillUserDetails() {
    console.log('🔄 Attempting to auto-fill user details...');
    
    // Wait for auth manager to be available
    const waitForAuthManager = () => {
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      
      // CRITICAL: Check if user is actually logged in before proceeding
      if (!authManager || !authManager.isUserLoggedIn()) {
        console.log('❌ User not logged in - skipping auto-fill');
        return false;
      }
      
      const currentUser = authManager.getCurrentUser();
      console.log('👤 Current user from auth manager:', currentUser);
      
      // Additional check: ensure we have valid user data
      if (!currentUser || !currentUser.email) {
        console.log('❌ No valid user data found - skipping auto-fill');
        return false;
      }
      
      // Verify user is properly authenticated (not just cached data)
      if (!currentUser.id && !currentUser.user_id) {
        console.log('❌ User lacks proper authentication ID - skipping auto-fill');
        return false;
      }
      
      console.log('✅ User is properly authenticated - proceeding with auto-fill');
      
      if (currentUser && currentUser.email) {
        console.log('📧 Auto-filling email:', currentUser.email);
        const emailFields = document.querySelectorAll('input[name="email"], input[type="email"]');
        emailFields.forEach(field => {
          field.value = currentUser.email;
          field.dispatchEvent(new Event('input', { bubbles: true }));
          field.dispatchEvent(new Event('change', { bubbles: true }));
          console.log('✅ Filled email field:', field);
        });
      }
      
      if (currentUser && currentUser.phone) {
        console.log('📱 Auto-filling phone:', currentUser.phone);
        const phoneFields = document.querySelectorAll('input[name="phone"], input[type="tel"]');
        phoneFields.forEach(field => {
          field.value = currentUser.phone;
          field.dispatchEvent(new Event('input', { bubbles: true }));
          field.dispatchEvent(new Event('change', { bubbles: true }));
          console.log('✅ Filled phone field:', field);
        });
      }
      
      if (currentUser && currentUser.full_name) {
        console.log('👤 Auto-filling contact person:', currentUser.full_name);
        const contactPersonFields = document.querySelectorAll('input[name="contactPerson"]');
        contactPersonFields.forEach(field => {
          field.value = currentUser.full_name;
          field.dispatchEvent(new Event('input', { bubbles: true }));
          field.dispatchEvent(new Event('change', { bubbles: true }));
          console.log('✅ Filled contact person field:', field);
        });
      }
      
      // Note: Removed auto-filling of company name, restaurant name, and owner name
      // Only contact details (email, phone) and contact person name are auto-filled
      // Other fields should be filled manually by the user
      
      console.log('✅ Auto-fill completed with auth manager data');
      return true;
    };
    
    // Try immediate fill
    if (!waitForAuthManager()) {
      // If auth manager not ready, wait for it
      let attempts = 0;
      const maxAttempts = 50; // 5 seconds
      const interval = setInterval(() => {
        attempts++;
        if (waitForAuthManager() || attempts >= maxAttempts) {
          clearInterval(interval);
        if (attempts >= maxAttempts) {
          console.log('⏰ Auth manager timeout - user appears to be not logged in');
          console.log('❌ No authenticated user found - forms will remain empty');
          return;
        }
        }
      }, 100);
    }
  }

  // Update user info when page loads
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Dashboard DOM loaded - initializing with global auth manager');
    
    // Check URL parameters immediately to prevent blinking
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('product');
    const price = urlParams.get('price');
    
    const recentActivity = document.getElementById('recent-activity');
    
    // Show recent activity only if there are NO URL parameters (no product selected)
    if (!productId || !price) {
      if (recentActivity) {
        recentActivity.style.display = 'block';
        recentActivity.classList.remove('hidden');
        console.log('✅ Showing browse products section - no product selected');
      }
      // Ensure forms are hidden when no product is selected
      const productForm = document.getElementById('product-customization-form');
      const orderMenuForm = document.getElementById('order-menu-customization-form');
      if (productForm) productForm.classList.add('hidden');
      if (orderMenuForm) orderMenuForm.classList.add('hidden');
    } else {
      // Hide recent activity if there are URL parameters (product selected)
      if (recentActivity) {
        recentActivity.style.display = 'none';
        recentActivity.classList.add('hidden');
        console.log('✅ Hiding browse products section - product selected');
      }
    }
    
    // Remove page load transition to prevent bluish screen
      document.body.style.opacity = '1';
    
    // Check if we should show a form based on URL parameters (fix refresh issue)
    if (productId && price) {
      console.log('URL parameters detected - showing form for product:', productId);
      // Show the appropriate form based on product ID
      const products = [
        { id: '1', name: 'Restaurant Menu System', description: 'Digital menu system with QR code integration, online ordering, and real-time updates. Perfect for restaurants looking to modernize their customer experience.', price: 25000, type: 'restaurant' },
        { id: '2', name: 'Android TV App', description: 'Custom Android TV applications with beautiful UI, content management, and remote control support. Perfect for streaming services and media companies.', price: 55000, type: 'non-restaurant' },
        { id: '3', name: 'Streaming Mobile App', description: 'Mobile streaming applications for iOS and Android with custom features, user authentication, and content management.', price: 35000, type: 'non-restaurant' },
        { id: '4', name: 'Restaurant Website', description: 'Professional restaurant website with online ordering, menu display, and customer management features.', price: 20000, type: 'restaurant' },
        { id: '5', name: 'Order Menu System', description: 'Complete order management system with digital menu integration, real-time order tracking, and payment processing. Perfect for restaurants looking to streamline their ordering process.', price: 999, type: 'order-menu' }
      ];
      
      const selectedProduct = products.find(p => p.id === productId);
      if (selectedProduct) {
        // Update product details
        document.getElementById('selected-product-name').textContent = selectedProduct.name;
        document.getElementById('selected-product-price').textContent = `₹${selectedProduct.price.toLocaleString()}`;
        
        // Update Order Menu System product details
        document.getElementById('order-menu-product-name').textContent = selectedProduct.name;
        // Price is now displayed in the right column pricing section
        
        // Show appropriate form with smooth transition
        const recentActivity = document.getElementById('recent-activity');
        const productForm = document.getElementById('product-customization-form');
        const orderMenuForm = document.getElementById('order-menu-customization-form');
        
        // Hide recent activity with smooth transition
        if (recentActivity) {
          recentActivity.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
          recentActivity.style.opacity = '0';
          recentActivity.style.transform = 'translateY(-10px)';
          
          setTimeout(() => {
            recentActivity.classList.add('hidden');
          }, 300);
        }
        
        // Show appropriate form with smooth transition
        setTimeout(() => {
          if (selectedProduct.type === 'order-menu') {
            if (orderMenuForm) {
              orderMenuForm.classList.remove('hidden');
              orderMenuForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
              orderMenuForm.style.opacity = '0';
              orderMenuForm.style.transform = 'translateY(10px)';
              
              setTimeout(() => {
                orderMenuForm.style.opacity = '1';
                orderMenuForm.style.transform = 'translateY(0)';
              }, 50);
            }
          } else {
            if (productForm) {
              productForm.classList.remove('hidden');
              productForm.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
              productForm.style.opacity = '0';
              productForm.style.transform = 'translateY(10px)';
              
              setTimeout(() => {
                productForm.style.opacity = '1';
                productForm.style.transform = 'translateY(0)';
              }, 50);
            }
            
            // Show/hide cuisine type and restaurant name field
            const cuisineField = document.getElementById('cuisine-type-field');
            const restaurantNameField = document.getElementById('restaurant-name-field');
            
            if (selectedProduct.type === 'restaurant') {
              cuisineField.classList.remove('hidden');
              cuisineField.querySelector('select').setAttribute('required', 'required');
              restaurantNameField.classList.remove('hidden');
              restaurantNameField.querySelector('input').setAttribute('required', 'required');
            } else {
              cuisineField.classList.add('hidden');
              cuisineField.querySelector('select').removeAttribute('required');
              restaurantNameField.classList.add('hidden');
              restaurantNameField.querySelector('input').removeAttribute('required');
            }
          }
        }, 300);
        
        // Auto-fill user details when form is shown (with longer delay)
        setTimeout(() => autofillUserDetails(), 500);
      }
    }
    
    // Handle product selection
    handleProductSelection();
    
    // Handle form functionality
    handleFormSubmission();
    
    // Handle Order Menu form functionality
    handleOrderMenuForm();
    
    // Auto-fill user details (try multiple times)
    autofillUserDetails();
    setTimeout(() => autofillUserDetails(), 1000);
    setTimeout(() => autofillUserDetails(), 2000);
    
    // Watch for form visibility changes and auto-fill when forms become visible
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const target = mutation.target;
          if (target.id === 'product-customization-form' || target.id === 'order-menu-customization-form') {
            if (!target.classList.contains('hidden')) {
              console.log('👁️ Form became visible, auto-filling...');
              setTimeout(() => autofillUserDetails(), 100);
            }
          }
        }
      });
    });
    
    // Observe both forms for class changes
    const productForm = document.getElementById('product-customization-form');
    const orderMenuForm = document.getElementById('order-menu-customization-form');
    
    if (productForm) observer.observe(productForm, { attributes: true, attributeFilter: ['class'] });
    if (orderMenuForm) observer.observe(orderMenuForm, { attributes: true, attributeFilter: ['class'] });
    
    // Try multiple times with different delays to ensure data loads
    updateUserInfo(); // Immediate
    setTimeout(() => updateUserInfo(), 100);
    setTimeout(() => updateUserInfo(), 500);
    setTimeout(() => updateUserInfo(), 1000);
    setTimeout(() => updateUserInfo(), 2000);
    
    // Double-check browse products section visibility after page load
    setTimeout(() => {
      const urlParams = new URLSearchParams(window.location.search);
      const productId = urlParams.get('product');
      const price = urlParams.get('price');
      
      const recentActivity = document.getElementById('recent-activity');
      
      // Only show browse products section if no product is selected
      if (!productId || !price) {
        if (recentActivity) {
          recentActivity.style.display = 'block';
          recentActivity.classList.remove('hidden');
          console.log('✅ Browse products section confirmed visible - no product selected');
        }
      } else {
        if (recentActivity) {
          recentActivity.style.display = 'none';
          console.log('✅ Browse products section confirmed hidden - product selected');
        }
      }
    }, 1000);
  });
  
  // Also try when window loads
  window.addEventListener('load', () => {
    console.log('Window loaded - trying again');
    updateUserInfo();
  });
  
  // Try every 2 seconds for the first 10 seconds
  let attempts = 0;
  const maxAttempts = 5;
  const interval = setInterval(() => {
    attempts++;
    console.log(`Attempt ${attempts} to load user data...`);
    updateUserInfo();
    
    if (attempts >= maxAttempts) {
      clearInterval(interval);
      console.log('Max attempts reached');
    }
  }, 2000);
  
  // Listen for auth state changes
  window.addEventListener('user-logged-in', () => {
    console.log('User logged in event received in dashboard');
    updateUserInfo();
  });
  
  window.addEventListener('user-logged-out', () => {
    console.log('User logged out event received in dashboard');
    updateUserInfo();
  });
  
  // Logout functionality removed (was in Quick Actions section)
  
  
  console.log('✅ Dashboard script initialized with global auth manager');

  // Pincode-based autocomplete functionality
  const pincodeData = {
    '400001': { city: 'Mumbai', state: 'Maharashtra' },
    '400002': { city: 'Mumbai', state: 'Maharashtra' },
    '400003': { city: 'Mumbai', state: 'Maharashtra' },
    '400004': { city: 'Mumbai', state: 'Maharashtra' },
    '400005': { city: 'Mumbai', state: 'Maharashtra' },
    '400006': { city: 'Mumbai', state: 'Maharashtra' },
    '400007': { city: 'Mumbai', state: 'Maharashtra' },
    '400008': { city: 'Mumbai', state: 'Maharashtra' },
    '400009': { city: 'Mumbai', state: 'Maharashtra' },
    '400010': { city: 'Mumbai', state: 'Maharashtra' },
    '110001': { city: 'New Delhi', state: 'Delhi' },
    '110002': { city: 'New Delhi', state: 'Delhi' },
    '110003': { city: 'New Delhi', state: 'Delhi' },
    '110004': { city: 'New Delhi', state: 'Delhi' },
    '110005': { city: 'New Delhi', state: 'Delhi' },
    '110006': { city: 'New Delhi', state: 'Delhi' },
    '110007': { city: 'New Delhi', state: 'Delhi' },
    '110008': { city: 'New Delhi', state: 'Delhi' },
    '110009': { city: 'New Delhi', state: 'Delhi' },
    '110010': { city: 'New Delhi', state: 'Delhi' },
    '560001': { city: 'Bangalore', state: 'Karnataka' },
    '560002': { city: 'Bangalore', state: 'Karnataka' },
    '560003': { city: 'Bangalore', state: 'Karnataka' },
    '560004': { city: 'Bangalore', state: 'Karnataka' },
    '560005': { city: 'Bangalore', state: 'Karnataka' },
    '560006': { city: 'Bangalore', state: 'Karnataka' },
    '560007': { city: 'Bangalore', state: 'Karnataka' },
    '560008': { city: 'Bangalore', state: 'Karnataka' },
    '560009': { city: 'Bangalore', state: 'Karnataka' },
    '560010': { city: 'Bangalore', state: 'Karnataka' },
    '600001': { city: 'Chennai', state: 'Tamil Nadu' },
    '600002': { city: 'Chennai', state: 'Tamil Nadu' },
    '600003': { city: 'Chennai', state: 'Tamil Nadu' },
    '600004': { city: 'Chennai', state: 'Tamil Nadu' },
    '600005': { city: 'Chennai', state: 'Tamil Nadu' },
    '600006': { city: 'Chennai', state: 'Tamil Nadu' },
    '600007': { city: 'Chennai', state: 'Tamil Nadu' },
    '600008': { city: 'Chennai', state: 'Tamil Nadu' },
    '600009': { city: 'Chennai', state: 'Tamil Nadu' },
    '600010': { city: 'Chennai', state: 'Tamil Nadu' },
    '700001': { city: 'Kolkata', state: 'West Bengal' },
    '700002': { city: 'Kolkata', state: 'West Bengal' },
    '700003': { city: 'Kolkata', state: 'West Bengal' },
    '700004': { city: 'Kolkata', state: 'West Bengal' },
    '700005': { city: 'Kolkata', state: 'West Bengal' },
    '700006': { city: 'Kolkata', state: 'West Bengal' },
    '700007': { city: 'Kolkata', state: 'West Bengal' },
    '700008': { city: 'Kolkata', state: 'West Bengal' },
    '700009': { city: 'Kolkata', state: 'West Bengal' },
    '700010': { city: 'Kolkata', state: 'West Bengal' },
    '380001': { city: 'Ahmedabad', state: 'Gujarat' },
    '380002': { city: 'Ahmedabad', state: 'Gujarat' },
    '380003': { city: 'Ahmedabad', state: 'Gujarat' },
    '380004': { city: 'Ahmedabad', state: 'Gujarat' },
    '380005': { city: 'Ahmedabad', state: 'Gujarat' },
    '380006': { city: 'Ahmedabad', state: 'Gujarat' },
    '380007': { city: 'Ahmedabad', state: 'Gujarat' },
    '380008': { city: 'Ahmedabad', state: 'Gujarat' },
    '380009': { city: 'Ahmedabad', state: 'Gujarat' },
    '380010': { city: 'Ahmedabad', state: 'Gujarat' },
    '411001': { city: 'Pune', state: 'Maharashtra' },
    '411002': { city: 'Pune', state: 'Maharashtra' },
    '411003': { city: 'Pune', state: 'Maharashtra' },
    '411004': { city: 'Pune', state: 'Maharashtra' },
    '411005': { city: 'Pune', state: 'Maharashtra' },
    '411006': { city: 'Pune', state: 'Maharashtra' },
    '411007': { city: 'Pune', state: 'Maharashtra' },
    '411008': { city: 'Pune', state: 'Maharashtra' },
    '411009': { city: 'Pune', state: 'Maharashtra' },
    '411010': { city: 'Pune', state: 'Maharashtra' },
    // More rural pincodes
    '302001': { city: 'Jaipur', state: 'Rajasthan' },
    '302002': { city: 'Jaipur', state: 'Rajasthan' },
    '302003': { city: 'Jaipur', state: 'Rajasthan' },
    '302004': { city: 'Jaipur', state: 'Rajasthan' },
    '302005': { city: 'Jaipur', state: 'Rajasthan' },
    '302006': { city: 'Jaipur', state: 'Rajasthan' },
    '302007': { city: 'Jaipur', state: 'Rajasthan' },
    '302008': { city: 'Jaipur', state: 'Rajasthan' },
    '302009': { city: 'Jaipur', state: 'Rajasthan' },
    '302010': { city: 'Jaipur', state: 'Rajasthan' },
    '641001': { city: 'Coimbatore', state: 'Tamil Nadu' },
    '641002': { city: 'Coimbatore', state: 'Tamil Nadu' },
    '641003': { city: 'Coimbatore', state: 'Tamil Nadu' },
    '641004': { city: 'Coimbatore', state: 'Tamil Nadu' },
    '641005': { city: 'Coimbatore', state: 'Tamil Nadu' },
    '625001': { city: 'Madurai', state: 'Tamil Nadu' },
    '625002': { city: 'Madurai', state: 'Tamil Nadu' },
    '625003': { city: 'Madurai', state: 'Tamil Nadu' },
    '625004': { city: 'Madurai', state: 'Tamil Nadu' },
    '625005': { city: 'Madurai', state: 'Tamil Nadu' },
    '570001': { city: 'Mysore', state: 'Karnataka' },
    '570002': { city: 'Mysore', state: 'Karnataka' },
    '570003': { city: 'Mysore', state: 'Karnataka' },
    '570004': { city: 'Mysore', state: 'Karnataka' },
    '570005': { city: 'Mysore', state: 'Karnataka' },
    '580001': { city: 'Hubli', state: 'Karnataka' },
    '580002': { city: 'Hubli', state: 'Karnataka' },
    '580003': { city: 'Hubli', state: 'Karnataka' },
    '580004': { city: 'Hubli', state: 'Karnataka' },
    '580005': { city: 'Hubli', state: 'Karnataka' },
    '500001': { city: 'Hyderabad', state: 'Telangana' },
    '500002': { city: 'Hyderabad', state: 'Telangana' },
    '500003': { city: 'Hyderabad', state: 'Telangana' },
    '500004': { city: 'Hyderabad', state: 'Telangana' },
    '500005': { city: 'Hyderabad', state: 'Telangana' },
    '500006': { city: 'Hyderabad', state: 'Telangana' },
    '500007': { city: 'Hyderabad', state: 'Telangana' },
    '500008': { city: 'Hyderabad', state: 'Telangana' },
    '500009': { city: 'Hyderabad', state: 'Telangana' },
    '500010': { city: 'Hyderabad', state: 'Telangana' },
    // More common Indian pincodes
    '110001': { city: 'Delhi', state: 'Delhi' },
    '110002': { city: 'Delhi', state: 'Delhi' },
    '110003': { city: 'Delhi', state: 'Delhi' },
    '110004': { city: 'Delhi', state: 'Delhi' },
    '110005': { city: 'Delhi', state: 'Delhi' },
    '110006': { city: 'Delhi', state: 'Delhi' },
    '110007': { city: 'Delhi', state: 'Delhi' },
    '110008': { city: 'Delhi', state: 'Delhi' },
    '110009': { city: 'Delhi', state: 'Delhi' },
    '110010': { city: 'Delhi', state: 'Delhi' },
    '560001': { city: 'Bangalore', state: 'Karnataka' },
    '560002': { city: 'Bangalore', state: 'Karnataka' },
    '560003': { city: 'Bangalore', state: 'Karnataka' },
    '560004': { city: 'Bangalore', state: 'Karnataka' },
    '560005': { city: 'Bangalore', state: 'Karnataka' },
    '560006': { city: 'Bangalore', state: 'Karnataka' },
    '560007': { city: 'Bangalore', state: 'Karnataka' },
    '560008': { city: 'Bangalore', state: 'Karnataka' },
    '560009': { city: 'Bangalore', state: 'Karnataka' },
    '560010': { city: 'Bangalore', state: 'Karnataka' },
    '600001': { city: 'Chennai', state: 'Tamil Nadu' },
    '600002': { city: 'Chennai', state: 'Tamil Nadu' },
    '600003': { city: 'Chennai', state: 'Tamil Nadu' },
    '600004': { city: 'Chennai', state: 'Tamil Nadu' },
    '600005': { city: 'Chennai', state: 'Tamil Nadu' },
    '600006': { city: 'Chennai', state: 'Tamil Nadu' },
    '600007': { city: 'Chennai', state: 'Tamil Nadu' },
    '600008': { city: 'Chennai', state: 'Tamil Nadu' },
    '600009': { city: 'Chennai', state: 'Tamil Nadu' },
    '600010': { city: 'Chennai', state: 'Tamil Nadu' },
    '700001': { city: 'Kolkata', state: 'West Bengal' },
    '700002': { city: 'Kolkata', state: 'West Bengal' },
    '700003': { city: 'Kolkata', state: 'West Bengal' },
    '700004': { city: 'Kolkata', state: 'West Bengal' },
    '700005': { city: 'Kolkata', state: 'West Bengal' },
    '700006': { city: 'Kolkata', state: 'West Bengal' },
    '700007': { city: 'Kolkata', state: 'West Bengal' },
    '700008': { city: 'Kolkata', state: 'West Bengal' },
    '700009': { city: 'Kolkata', state: 'West Bengal' },
    '700010': { city: 'Kolkata', state: 'West Bengal' }
  };


  // Pincode autocomplete functionality
  function initializePincodeAutocomplete() {
    const pincodeInput = document.getElementById('pincode-input');
    const cityInput = document.getElementById('city-input');
    const stateInput = document.getElementById('state-input');
    const citySuggestions = document.getElementById('city-suggestions');
    const stateSuggestions = document.getElementById('state-suggestions');

    if (pincodeInput && cityInput && stateInput) {
      console.log('Initializing pincode autocomplete...');
      
      // Pincode-based autofill
      pincodeInput.addEventListener('input', function() {
        const pincode = this.value.trim();
        console.log('Pincode entered:', pincode);
        if (pincode.length === 6 && pincodeData[pincode]) {
          console.log('Found pincode data:', pincodeData[pincode]);
          cityInput.value = pincodeData[pincode].city;
          stateInput.value = pincodeData[pincode].state;
          // Set country to India when pincode is found
          const countrySelect = document.getElementById('country-select');
          if (countrySelect) {
            countrySelect.value = 'India';
          }
        }
      });

      // City autocomplete
      cityInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        if (query.length > 0) {
          const filtered = indianCities.filter(city => 
            city.toLowerCase().includes(query)
          );
          showSuggestions(citySuggestions, filtered, cityInput);
        } else {
          hideSuggestions(citySuggestions);
        }
      });

      // State autocomplete
      stateInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        if (query.length > 0) {
          const filtered = indianStates.filter(state => 
            state.toLowerCase().includes(query)
          );
          showSuggestions(stateSuggestions, filtered, stateInput);
        } else {
          hideSuggestions(stateSuggestions);
        }
      });

      // Hide suggestions when clicking outside
      document.addEventListener('click', function(e) {
        if (!cityInput.contains(e.target) && !citySuggestions.contains(e.target)) {
          hideSuggestions(citySuggestions);
        }
        if (!stateInput.contains(e.target) && !stateSuggestions.contains(e.target)) {
          hideSuggestions(stateSuggestions);
        }
      });
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    initializePincodeAutocomplete();
    // Try again after a short delay
    setTimeout(initializePincodeAutocomplete, 500);
    setTimeout(initializePincodeAutocomplete, 1000);
    setTimeout(initializePincodeAutocomplete, 2000);
  });
  
  // Also try to initialize when the form becomes visible (for dynamic forms)
  setTimeout(initializePincodeAutocomplete, 3000);
  setTimeout(initializePincodeAutocomplete, 5000);
  
  // Reinitialize when Order Menu System form is shown
  function reinitializePincodeAutocomplete() {
    console.log('Reinitializing pincode autocomplete...');
    initializePincodeAutocomplete();
  }
  
  // Make it globally available for form visibility changes
  window.reinitializePincodeAutocomplete = reinitializePincodeAutocomplete;

  // Add test save button functionality
  document.addEventListener('DOMContentLoaded', function() {
    const testSaveBtn = document.getElementById('test-save');
    if (testSaveBtn) {
      testSaveBtn.addEventListener('click', async function() {
        console.log('🧪 Test save button clicked!');
        
        const form = document.getElementById('requirements-form');
        if (form) {
          const formData = new FormData(form);
          const data = Object.fromEntries(formData);
          console.log('🧪 Test save - Form data:', data);
          
          await testDirectOrderCustomizationSave(data);
        } else {
          console.error('❌ Form not found for test save');
        }
      });
    }
    
    // Simple test button
    const simpleTestBtn = document.getElementById('simple-test');
    if (simpleTestBtn) {
      simpleTestBtn.addEventListener('click', async function() {
        console.log('🔵 Simple test button clicked!');
        alert('🔵 Simple test button works!');
        
        // Test basic data insertion
        const testData = {
          project_name: 'Simple Test Project',
          restaurant_name: 'Simple Test Restaurant',
          owner_name: 'Simple Test Owner',
          contact_person: 'Simple Test Contact',
          email: 'test@example.com',
          phone_number: '1234567890',
          house_flat_number: '123',
          address_line_1: 'Test Address',
          city: 'Test City',
          state: 'Test State',
          pincode: '123456',
          country: 'India',
          restaurant_logo_url: null,
          menu_photos_urls: [],
          additional_requirements: 'Simple test requirements',
          base_package_cost: 999.00,
          gst_amount: 180.00,
          total_amount: 1179.00,
          status: 'pending',
          payment_status: 'pending'
        };
        
        console.log('🔵 Simple test data:', testData);
        
        try {
          const { data: result, error } = await window.supabase
            .from('order_customizations')
            .insert(testData)
            .select();
            
          if (error) {
            console.error('❌ Simple test failed:', error);
            alert('❌ Simple test failed: ' + error.message);
          } else {
            console.log('✅ Simple test successful!', result);
            alert('✅ Simple test successful! Data saved to database.');
          }
        } catch (err) {
          console.error('❌ Simple test error:', err);
          alert('❌ Simple test error: ' + err.message);
        }
      });
    }
    
    // Function to find and setup form
    function setupForm() {
      const form = document.getElementById('requirements-form');
      console.log('🔍 Form found:', !!form);
      console.log('🔍 Form element:', form);
      
      if (form) {
        console.log('✅ Form found, adding event listener...');
        
        // Override the form submission completely
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          console.log('🚀 FORCE FORM SUBMISSION TRIGGERED!');
          alert('🚀 Form submission detected!');
          
          // Get form data
          const formData = new FormData(form);
          const data = Object.fromEntries(formData);
          console.log('🚀 Form data collected:', data);
          
          // Always try to save to order_customizations
          try {
            const insertData = {
              project_name: data.projectName || 'Manual Test Project',
              restaurant_name: data.restaurantName || 'Manual Test Restaurant',
              owner_name: data.ownerName || 'Manual Test Owner',
              contact_person: data.contactPerson || 'Manual Test Contact',
              email: data.email || 'manual@test.com',
              phone_number: data.phone || '1234567890',
              house_flat_number: data.houseNumber || '123',
              address_line_1: data.addressLine1 || 'Manual Test Address',
              city: data.city || 'Manual Test City',
              state: data.state || 'Manual Test State',
              pincode: data.pincode || '123456',
              country: data.country || 'India',
              restaurant_logo_url: null,
              menu_photos_urls: [],
              additional_requirements: data.additionalRequirements || 'Manual test requirements',
              base_package_cost: 999.00,
              gst_amount: 180.00,
              total_amount: 1179.00,
              status: 'pending',
              payment_status: 'pending'
            };
            
            console.log('🚀 Insert data prepared:', insertData);
            
            const { data: result, error } = await window.supabase
              .from('order_customizations')
              .insert(insertData)
              .select();
              
            if (error) {
              console.error('❌ Force save failed:', error);
              alert('❌ Save failed: ' + error.message);
            } else {
              console.log('✅ Force save successful!', result);
              alert('✅ Data saved successfully to order_customizations table!');
            }
          } catch (err) {
            console.error('❌ Force save error:', err);
            alert('❌ Save error: ' + err.message);
          }
        });
        
        return true;
      } else {
        console.log('⏳ Form not found yet, will retry...');
        return false;
      }
    }
    
    // Try to setup form immediately
    if (!setupForm()) {
      // If form not found, try again after delays
      setTimeout(() => {
        console.log('🔄 Retrying form setup after 1 second...');
        if (!setupForm()) {
          setTimeout(() => {
            console.log('🔄 Retrying form setup after 3 seconds...');
            if (!setupForm()) {
              setTimeout(() => {
                console.log('🔄 Retrying form setup after 5 seconds...');
                setupForm();
              }, 5000);
            }
          }, 3000);
        }
      }, 1000);
    }
    
    // Also add a global form submission handler
    document.addEventListener('submit', function(e) {
      console.log('🌍 Global form submission detected!');
      console.log('🌍 Form element:', e.target);
      console.log('🌍 Form ID:', e.target.id);
      
      if (e.target.id === 'requirements-form') {
        console.log('🌍 Requirements form submitted globally!');
        alert('🌍 Global form submission detected!');
      }
    });
    
    // Add direct click listener to Save and Make Payment button
    console.log('🔍 Looking for save button...');
    
    // First try to find the button inside the order-menu-form
    const orderMenuForm = document.getElementById('order-menu-form');
    let targetButton = null;
    
    if (orderMenuForm) {
      console.log('🔍 Order menu form found:', orderMenuForm);
      targetButton = orderMenuForm.querySelector('button[type="submit"]');
      console.log('🔍 Save button in order menu form:', targetButton);
    }
    
    // If not found, try to find by text content
    if (!targetButton) {
      const allButtons = document.querySelectorAll('button');
      console.log('🔍 All buttons found:', allButtons.length);
      
      for (let button of allButtons) {
        if (button.textContent.includes('Save and Make Payment')) {
          // Check if this button is inside the order-menu-form
          if (orderMenuForm && orderMenuForm.contains(button)) {
            targetButton = button;
            console.log('🔍 Found save button by text in order menu form:', targetButton);
            break;
          }
        }
      }
    }
    
    if (targetButton) {
      console.log('🔴 Save button found:', targetButton);
      let isSaving = false; // Flag to prevent duplicate saves
      targetButton.addEventListener('click', async function(e) {
        console.log('🔴 Save button clicked directly!');
        e.preventDefault();
        
        // Prevent duplicate saves
        if (isSaving) {
          console.log('⚠️ Save already in progress, ignoring duplicate click');
          return;
        }
        isSaving = true;
        
        // Get the form
        const form = document.getElementById('order-menu-form');
        if (!form) {
          console.error('❌ Order menu form not found for save button');
          alert('❌ Form not found!');
          return;
        }
        
        // Get form data
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        console.log('🔴 Save button - Form data:', data);
        
        // Check if form has data
        if (Object.keys(data).length === 0) {
          console.error('❌ No form data found for save button');
          alert('❌ No form data found! Please fill out the form first.');
          return;
        }
        
        // Prepare data for database
        const insertData = {
          project_name: data.projectName || 'Save Button Project',
          restaurant_name: data.restaurantName || 'Save Button Restaurant',
          owner_name: data.ownerName || 'Save Button Owner',
          contact_person: data.contactPerson || 'Save Button Contact',
          email: data.email || 'save@button.com',
          phone_number: data.phone || '1234567890',
          house_flat_number: data.houseNumber || '123',
          address_line_1: data.addressLine1 || 'Save Button Address',
          city: data.city || 'Save Button City',
          state: data.state || 'Save Button State',
          pincode: data.pincode || '123456',
          country: data.country || 'India',
          restaurant_logo_url: null,
          menu_photos_urls: [],
          additional_requirements: data.additionalRequirements || 'Save button requirements',
          base_package_cost: 999.00,
          gst_amount: 180.00,
          total_amount: 1179.00,
          status: 'pending',
          payment_status: 'pending'
        };
        
        console.log('🔴 Save button - Insert data:', insertData);
        
        try {
          console.log('🔴 Save button - Saving to Supabase...');
          
          // Import Supabase client
          const { supabase } = await import('../lib/supabase');
          
          if (!supabase) {
            console.error('❌ Supabase client not available');
            alert('❌ Form submission error: Supabase client not loaded. Please refresh the page and try again.');
            return;
          }
          
          const { data: result, error } = await supabase
            .from('order_customizations')
            .insert(insertData)
            .select();
            
          if (error) {
            console.error('❌ Save button save failed:', error);
            alert('❌ Form submission failed: ' + error.message);
          } else {
            console.log('✅ Save button save successful!', result);
            
            // Clear the form after successful save
            form.reset();
            
            // Clear file inputs specifically
            const logoInput = form.querySelector('input[name="restaurantLogo"]');
            const menuPhotosInput = form.querySelector('input[name="menuPhotos"]');
            
            if (logoInput) {
              logoInput.value = '';
              console.log('✅ Logo input cleared');
            }
            
            if (menuPhotosInput) {
              menuPhotosInput.value = '';
              console.log('✅ Menu photos input cleared');
            }
            
            // Clear Order Menu System specific preview elements
            const orderMenuLogoPreview = document.getElementById('order-menu-logo-preview');
            const orderMenuLogoPreviewImg = document.getElementById('order-menu-logo-preview-img');
            const orderMenuLogoFilename = document.getElementById('order-menu-logo-filename');
            const menuPhotosPreview = document.getElementById('menu-photos-preview');
            const menuPhotosGrid = document.getElementById('menu-photos-grid');
            
            if (orderMenuLogoPreview) {
              orderMenuLogoPreview.classList.add('hidden');
              console.log('✅ Order menu logo preview hidden');
            }
            
            if (orderMenuLogoPreviewImg) {
              orderMenuLogoPreviewImg.src = '';
              console.log('✅ Order menu logo preview image cleared');
            }
            
            if (orderMenuLogoFilename) {
              orderMenuLogoFilename.textContent = '';
              console.log('✅ Order menu logo filename cleared');
            }
            
            if (menuPhotosPreview) {
              menuPhotosPreview.classList.add('hidden');
              console.log('✅ Menu photos preview hidden');
            }
            
            if (menuPhotosGrid) {
              menuPhotosGrid.innerHTML = '';
              console.log('✅ Menu photos grid cleared');
            }
            
            // Reset upload areas to original state
            const logoUploadArea = document.getElementById('order-menu-logo-upload-area');
            const menuPhotosUploadArea = document.getElementById('menu-photos-upload-area');
            
            if (logoUploadArea) {
              logoUploadArea.innerHTML = `
                <div class="flex flex-col items-center">
                  <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                  </svg>
                  <p class="text-gray-600 mb-2">Click to upload logo</p>
                  <p class="text-sm text-gray-500">PNG, JPG, GIF up to 10MB</p>
                </div>
              `;
              console.log('✅ Logo upload area reset to original state');
            }
            
            if (menuPhotosUploadArea) {
              menuPhotosUploadArea.innerHTML = `
                <div class="flex flex-col items-center">
                  <svg class="w-16 h-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <p class="text-gray-600 mb-2">Click to upload photos</p>
                  <p class="text-sm text-gray-500">PNG, JPG, GIF up to 5MB each</p>
                </div>
              `;
              console.log('✅ Menu photos upload area reset to original state');
            }
            
            // Reset global variables
            if (typeof menuPhotos !== 'undefined') {
              menuPhotos = [];
              console.log('✅ Menu photos array cleared');
            }
            
            // Show success message
            alert('✅ Form submitted successfully!');
          }
        } catch (err) {
          console.error('❌ Save button save error:', err);
          alert('❌ Form submission error: ' + err.message);
        } finally {
          // Reset the flag after save operation completes
          isSaving = false;
        }
      });
    } else {
      console.error('❌ Save button not found!');
    }
    
    // Global click handler removed to prevent duplicate saves
    
    // Direct save button - this will definitely work
    const directSaveBtn = document.getElementById('direct-save');
    if (directSaveBtn) {
      directSaveBtn.addEventListener('click', async function() {
        console.log('🔴 Direct save button clicked!');
        alert('🔴 Direct save button clicked!');
        
        // Get form data directly
        const form = document.getElementById('requirements-form');
        console.log('🔴 Direct save - Form found:', !!form);
        
        if (!form) {
          console.error('❌ Form not found for direct save');
          alert('❌ Form not found! Please make sure the form is visible.');
          
          // Try to find all forms on the page
          const allForms = document.querySelectorAll('form');
          console.log('🔴 All forms on page:', allForms);
          console.log('🔴 Form IDs:', Array.from(allForms).map(f => f.id));
          
          return;
        }
        
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        console.log('🔴 Direct save - Form data:', data);
        
        // Prepare data for database
        const insertData = {
          project_name: data.projectName || 'Direct Save Project',
          restaurant_name: data.restaurantName || 'Direct Save Restaurant',
          owner_name: data.ownerName || 'Direct Save Owner',
          contact_person: data.contactPerson || 'Direct Save Contact',
          email: data.email || 'direct@save.com',
          phone_number: data.phone || '1234567890',
          house_flat_number: data.houseNumber || '123',
          address_line_1: data.addressLine1 || 'Direct Save Address',
          city: data.city || 'Direct Save City',
          state: data.state || 'Direct Save State',
          pincode: data.pincode || '123456',
          country: data.country || 'India',
          restaurant_logo_url: null,
          menu_photos_urls: [],
          additional_requirements: data.additionalRequirements || 'Direct save requirements',
          base_package_cost: 999.00,
          gst_amount: 180.00,
          total_amount: 1179.00,
          status: 'pending',
          payment_status: 'pending'
        };
        
        console.log('🔴 Direct save - Insert data:', insertData);
        
        try {
          const { data: result, error } = await window.supabase
            .from('order_customizations')
            .insert(insertData)
            .select();
            
          if (error) {
            console.error('❌ Direct save failed:', error);
            alert('❌ Direct save failed: ' + error.message);
          } else {
            console.log('✅ Direct save successful!', result);
            alert('✅ Direct save successful! Data saved to database.');
          }
        } catch (err) {
          console.error('❌ Direct save error:', err);
          alert('❌ Direct save error: ' + err.message);
        }
      });
    }
    
    // Order Menu System test buttons removed
  });

  function showSuggestions(container, suggestions, input) {
    if (suggestions.length === 0) {
      hideSuggestions(container);
      return;
    }

    container.innerHTML = '';
    suggestions.slice(0, 5).forEach(suggestion => {
      const div = document.createElement('div');
      div.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer border-b border-gray-200';
      div.textContent = suggestion;
      div.addEventListener('click', function() {
        input.value = suggestion;
        hideSuggestions(container);
      });
      container.appendChild(div);
    });

    container.classList.remove('hidden');
    container.style.position = 'absolute';
    container.style.zIndex = '10';
    container.style.width = input.offsetWidth + 'px';
    container.style.top = (input.offsetTop + input.offsetHeight) + 'px';
    container.style.left = input.offsetLeft + 'px';
  }

  function hideSuggestions(container) {
    container.classList.add('hidden');
  }

  // Test function to directly save to order_customizations table
  async function testDirectOrderCustomizationSave(formData) {
    try {
      console.log('🧪 Starting direct save test...');
      console.log('🧪 Form data received:', formData);
      console.log('🧪 Form data keys:', Object.keys(formData));
      console.log('🧪 Form data values:', Object.values(formData));
      
      // Get current user
      const authManager = window.globalAuthManager || window.simpleAuthManager;
      const currentUser = authManager?.getCurrentUser();
      console.log('🧪 Current user:', currentUser);
      
      if (!currentUser) {
        console.error('❌ No user found for direct save test');
        return;
      }
      
      // Check if Supabase is available
      if (!window.supabase) {
        console.error('❌ Supabase not available for direct save test');
        alert('❌ Supabase not available! Check console for details.');
        return;
      }
      
      // Test Supabase connection
      console.log('🧪 Testing Supabase connection...');
      try {
        const { data: testData, error: testError } = await window.supabase
          .from('order_customizations')
          .select('count')
          .limit(1);
        
        if (testError) {
          console.error('❌ Supabase connection test failed:', testError);
          alert('❌ Supabase connection failed: ' + testError.message);
          return;
        } else {
          console.log('✅ Supabase connection test successful');
        }
      } catch (connError) {
        console.error('❌ Supabase connection error:', connError);
        alert('❌ Supabase connection error: ' + connError.message);
        return;
      }
      
      // Prepare data for order_customizations table using correct field names
      const insertData = {
        project_name: formData.projectName || 'Test Project',
        restaurant_name: formData.restaurantName || 'Test Restaurant',
        owner_name: formData.ownerName || 'Test Owner',
        contact_person: formData.contactPerson || 'Test Contact',
        email: formData.email || currentUser.email,
        phone_number: formData.phone || '1234567890',
        house_flat_number: formData.houseNumber || '123',
        address_line_1: formData.addressLine1 || 'Test Address',
        city: formData.city || 'Test City',
        state: formData.state || 'Test State',
        pincode: formData.pincode || '123456',
        country: formData.country || 'India',
        restaurant_logo_url: null, // Will be handled separately
        menu_photos_urls: [], // Will be handled separately
        additional_requirements: formData.additionalRequirements || 'Test requirements',
        base_package_cost: 999.00,
        gst_amount: 180.00,
        total_amount: 1179.00,
        status: 'pending',
        payment_status: 'pending'
      };
      
      console.log('🧪 Insert data prepared:', insertData);
      
      // Insert into order_customizations table
      const { data: result, error } = await window.supabase
        .from('order_customizations')
        .insert(insertData)
        .select();
        
      if (error) {
        console.error('❌ Direct save test failed:', error);
        console.error('❌ Error details:', JSON.stringify(error, null, 2));
      } else {
        console.log('✅ Direct save test successful!', result);
        alert('✅ Data saved successfully to order_customizations table!');
      }
      
    } catch (err) {
      console.error('❌ Direct save test error:', err);
    }
  }
</script>