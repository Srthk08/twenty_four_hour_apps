---
import MenuOperatorAdminLayout from '../../layouts/MenuOperatorAdminLayout.astro';
---

<MenuOperatorAdminLayout title="Menu Operator Dashboard - Product Customizations">
  <div class="max-w-7xl mx-auto">
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center justify-between mb-6">
        <div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Product Customizations Dashboard</h2>
          <p class="text-gray-600">Manage all product customizations, track progress, and handle customer requests.</p>
        </div>
        <div class="flex space-x-3">
          <button onclick="window.location.reload()" class="inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh Data
          </button>
        </div>
      </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Total Customizations Card -->
      <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
        </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-blue-600">Total Customizations</p>
              <p class="text-2xl font-bold text-blue-900" id="total-customizations">3</p>
          </div>
        </div>
      </div>

        <!-- Pending Customizations Card -->
        <div class="bg-yellow-50 rounded-lg p-6 border border-yellow-200">
        <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-yellow-600">Pending</p>
              <p class="text-2xl font-bold text-yellow-900" id="pending-customizations">1</p>
              </div>
            </div>
          </div>
          
        <!-- In Progress Card -->
        <div class="bg-orange-50 rounded-lg p-6 border border-orange-200">
        <div class="flex items-center">
            <div class="p-2 bg-orange-100 rounded-lg">
              <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-orange-600">In Progress</p>
              <p class="text-2xl font-bold text-orange-900" id="in-progress-customizations">1</p>
          </div>
        </div>
      </div>

        <!-- Completed Card -->
        <div class="bg-green-50 rounded-lg p-6 border border-green-200">
        <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-green-600">Completed</p>
              <p class="text-2xl font-bold text-green-900" id="completed-customizations">1</p>
          </div>
          </div>
        </div>
      </div>

      <!-- Detailed Data Sections -->
      <div class="mt-8 space-y-8">
        
        <!-- Product Customizations Section -->
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-bold text-gray-900">Product Customizations</h3>
          <div class="flex items-center space-x-2">
              <button id="refresh-customizations" class="text-gray-400 hover:text-gray-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product & Project</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer Details</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact Info</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
              <tbody id="customizations-table-body" class="bg-white divide-y divide-gray-200">
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">Restaurant Menu System</div>
                <div class="text-sm text-gray-500">Bella Vista Digital Menu</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">Maria Rodriguez</div>
                <div class="text-sm text-gray-500">Bella Vista Restaurant</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">maria@bellavista.com</div>
                <div class="text-sm text-gray-500">+1 (555) 123-4567</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  pending
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ₹25,000
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-15
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewCustomization('demo-1')">View</button>
                <button class="text-green-600 hover:text-green-900" onclick="processCustomization('demo-1')">Process</button>
              </td>
            </tr>
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">Android TV App</div>
                <div class="text-sm text-gray-500">Golden Dragon Streaming App</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">David Chen</div>
                <div class="text-sm text-gray-500">Golden Dragon Media</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">david@goldendragon.com</div>
                <div class="text-sm text-gray-500">+1 (555) 987-6543</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                  in_progress
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ₹55,000
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-12
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewCustomization('demo-2')">View</button>
                <button class="text-green-600 hover:text-green-900" onclick="processCustomization('demo-2')">Process</button>
              </td>
            </tr>
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">Restaurant Website</div>
                <div class="text-sm text-gray-500">Café Del Sol Website</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">Sophie Martin</div>
                <div class="text-sm text-gray-500">Café Del Sol</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">sophie@cafedelsol.com</div>
                <div class="text-sm text-gray-500">+1 (555) 456-7890</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  completed
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ₹15,000
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-10
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewCustomization('demo-3')">View</button>
                <button class="text-green-600 hover:text-green-900" onclick="processCustomization('demo-3')">Process</button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Menu Photos Section -->
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-bold text-gray-900">Menu Photos</h3>
          <div class="flex items-center space-x-2">
            <button id="refresh-photos" class="text-gray-400 hover:text-gray-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Photo</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Filename</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Uploaded</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody id="photos-table-body" class="bg-white divide-y divide-gray-200">
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <img src="https://via.placeholder.com/100x100/4F46E5/FFFFFF?text=BV" alt="Menu photo" class="w-12 h-12 rounded object-cover">
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">bella-vista-menu.jpg</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  completed
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2.4 MB
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-15
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewPhoto('photo-1')">View</button>
                <button class="text-green-600 hover:text-green-900" onclick="downloadText('photo-1')">Download</button>
              </td>
            </tr>
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <img src="https://via.placeholder.com/100x100/DC2626/FFFFFF?text=GD" alt="Menu photo" class="w-12 h-12 rounded object-cover">
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">golden-dragon-menu.jpg</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                  processing
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                1.8 MB
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-12
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewPhoto('photo-2')">View</button>
                <button class="text-gray-400 cursor-not-allowed" disabled>Download</button>
              </td>
            </tr>
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                <img src="https://via.placeholder.com/100x100/059669/FFFFFF?text=CD" alt="Menu photo" class="w-12 h-12 rounded object-cover">
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">cafe-del-sol-menu.jpg</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  completed
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                3.1 MB
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                2024-01-10
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewPhoto('photo-3')">View</button>
                <button class="text-green-600 hover:text-green-900" onclick="downloadText('photo-3')">Download</button>
              </td>
            </tr>
          </tbody>
        </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden file input for photo upload -->
  <input type="file" id="photo-upload-input" accept="image/*" class="hidden" />

<script>
  import { createClient } from '@supabase/supabase-js';

  // Supabase configuration
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('🔧 Supabase configuration:');
  console.log('- URL:', supabaseUrl);
  console.log('- Key:', supabaseKey ? 'Present' : 'Missing');

  // Global variables
  let currentUser = null;
  

  // Wait for Supabase to load with timeout
  function waitForSupabase() {
    return new Promise((resolve) => {
      let attempts = 0;
      const maxAttempts = 50; // 5 seconds max wait
      
      const checkSupabase = () => {
        attempts++;
        if (window.supabase) {
          try {
            supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
            console.log('✅ Supabase client initialized successfully');
            resolve(supabase);
          } catch (error) {
            console.error('❌ Error initializing Supabase:', error);
            resolve(null);
          }
        } else if (attempts < maxAttempts) {
          setTimeout(checkSupabase, 100);
        } else {
          console.warn('⚠️ Supabase not available after timeout, continuing with demo data');
          resolve(null);
        }
      };
      
      checkSupabase();
    });
  }

  // Initialize dashboard
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('📄 DOM Content Loaded - Starting Menu Operator Dashboard initialization');
    console.log('🔄 UPDATED: Product Customizations Dashboard Loading...');
    
    // Load demo data immediately - this ensures the page is never blank
    console.log('🔄 Loading demo data immediately...');
    loadDemoDataImmediately();
    
    // Setup event listeners immediately
    setupEventListeners();
    
    console.log('✅ Dashboard initialized with demo data - Page is ready!');
    
    // Try to load real data in background (non-blocking)
    setTimeout(async () => {
      try {
        console.log('🔄 Attempting to load real data in background...');
        await loadRealData();
        console.log('✅ Real data loaded successfully');
      } catch (error) {
        console.warn('⚠️ Could not load real data, continuing with demo data:', error.message);
      }
    }, 1000); // Wait 1 second before trying real data
  });
  
  // Additional fallback for window load
  window.addEventListener('load', () => {
    console.log('🔄 Window loaded - Ensuring dashboard is ready');
    // Force demo data if page is still loading
    if (document.getElementById('customizations-table-body').innerHTML.includes('Loading')) {
      console.log('🔄 Page still loading, forcing demo data');
      loadDemoDataImmediately();
    }
  });
  
  // Load demo data immediately
  function loadDemoDataImmediately() {
    console.log('🔄 Loading demo data immediately...');
    const demoCustomizations = getDemoProductCustomizations();
    const demoPhotos = getDemoMenuPhotos();
    
    displayProductCustomizations(demoCustomizations);
    displayMenuPhotos(demoPhotos);
    updateStatistics(demoCustomizations, demoPhotos);
    
    console.log('✅ Demo data loaded - Customizations:', demoCustomizations.length, 'Photos:', demoPhotos.length);
  }
  
  // Load real data from Supabase
  async function loadRealData() {
    try {
      console.log('🔄 Loading real data from Supabase...');
      
      // Wait for Supabase with timeout
      const supabaseClient = await waitForSupabase();
      
      if (!supabaseClient) {
        console.warn('⚠️ Supabase not available, keeping demo data');
        return;
      }
      
      // Load user profile
      await loadUserProfile();
      
      // Load customizations from product_customizations table
      const customizations = await loadRealProductCustomizations();
      const photos = await loadRealMenuPhotos();
      
      console.log('🔄 Real data fetched - Customizations:', customizations?.length || 0, 'Photos:', photos?.length || 0);
      
      // Only update if we have real data
      if (customizations && customizations.length > 0) {
        displayProductCustomizations(customizations);
        console.log('✅ Updated with real customizations data');
      }
      
      if (photos && photos.length > 0) {
        displayMenuPhotos(photos);
        console.log('✅ Updated with real photos data');
      }
      
      if (customizations || photos) {
        updateStatistics(customizations || [], photos || []);
        console.log('✅ Real data loaded and displayed successfully!');
      } else {
        console.log('ℹ️ No real data found, keeping demo data');
      }
      
    } catch (error) {
      console.warn('⚠️ Error loading real data, keeping demo data:', error.message);
    }
  }
  
  // Load data and display immediately
  async function loadDataAndDisplay() {
    try {
      console.log('🔄 Loading data from Supabase...');
      
      // Try to load real data first
      const customizations = await loadRealProductCustomizations();
      const photos = await loadRealMenuPhotos();
      
      // If no real data, use demo data
      if (!customizations || customizations.length === 0) {
        console.log('⚠️ No real customizations found, using demo data');
        const demoCustomizations = getDemoProductCustomizations();
        displayProductCustomizations(demoCustomizations);
        updateStatistics(demoCustomizations, photos || []);
      } else {
        displayProductCustomizations(customizations);
        updateStatistics(customizations, photos || []);
      }
      
      if (!photos || photos.length === 0) {
        console.log('⚠️ No real photos found, using demo data');
        const demoPhotos = getDemoMenuPhotos();
        displayMenuPhotos(demoPhotos);
      } else {
      displayMenuPhotos(photos);
      }
      
      console.log('✅ Data loaded and displayed');
      
    } catch (error) {
      console.error('❌ Error loading real data, using demo data:', error);
      
      // Fallback to demo data
      const demoCustomizations = getDemoProductCustomizations();
      const demoPhotos = getDemoMenuPhotos();
      
      displayProductCustomizations(demoCustomizations);
      displayMenuPhotos(demoPhotos);
      updateStatistics(demoCustomizations, demoPhotos);
      
      console.log('✅ Demo data loaded and displayed');
    }
  }
  
  // Load real product customizations from Supabase (from product_customizations table)
  async function loadRealProductCustomizations() {
    try {
      console.log('🔄 Attempting to load from product_customizations table...');
      console.log('🔄 Supabase client status:', supabase ? 'Available' : 'Not available');
      
      if (!supabase) {
        console.error('❌ Supabase client not available');
        throw new Error('Supabase not available');
      }
      
      console.log('🔄 Executing Supabase query...');
      const { data, error } = await supabase
        .from('product_customizations')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
      
      console.log('🔄 Supabase query completed. Data:', data, 'Error:', error);
      
      if (error) {
        console.error('❌ Supabase error:', error);
        throw error;
      }
      
      console.log('✅ Loaded customizations from product_customizations:', data?.length || 0);
      console.log('🔄 Sample data:', data?.[0] || 'No data');
      return data || [];
    } catch (error) {
      console.error('❌ Error loading real product customizations from product_customizations:', error);
      throw error;
    }
  }
  
  // Load real menu photos from Supabase
  async function loadRealMenuPhotos() {
    try {
      console.log('🔄 Attempting to load from menu_photos table...');
      
      if (!supabase) {
        console.error('❌ Supabase client not available');
        throw new Error('Supabase not available');
      }
      
      const { data, error } = await supabase
        .from('menu_photos')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
      
      if (error) {
        console.error('❌ Supabase error:', error);
        throw error;
      }
      
      console.log('✅ Loaded photos from menu_photos:', data?.length || 0);
      return data || [];
    } catch (error) {
      console.error('❌ Error loading real menu photos:', error);
      throw error;
    }
  }
  
  // Display product customizations in table (mapped from order_customizations)
  function displayProductCustomizations(customizations) {
    console.log('🔄 Displaying customizations:', customizations?.length || 0);
    const tbody = document.getElementById('customizations-table-body');
    if (!tbody) {
      console.error('❌ Table body not found! Looking for: customizations-table-body');
      console.log('Available elements:', document.querySelectorAll('[id*="table"]'));
      return;
    }
    
    if (!customizations || customizations.length === 0) {
      console.log('⚠️ No customizations to display - showing empty state');
      tbody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">No product customizations found in database. <button onclick="loadRealData()" class="text-blue-600 hover:text-blue-800 underline">Refresh to try again</button></td></tr>';
      return;
    }
    
    tbody.innerHTML = customizations.map(customization => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm font-medium text-gray-900">${customization.product_name || 'Product Customization'}</div>
          <div class="text-sm text-gray-500">${customization.project_name || 'No project name'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${customization.customer_name || 'Not specified'}</div>
          <div class="text-sm text-gray-500">${customization.company_name || 'No company'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${customization.email || 'No email'}</div>
          <div class="text-sm text-gray-500">${customization.phone || 'No phone'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            customization.status === 'completed' ? 'bg-green-100 text-green-800' :
            customization.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
            customization.status === 'pending' ? 'bg-blue-100 text-blue-800' :
            'bg-gray-100 text-gray-800'
          }">
            ${customization.status || 'pending'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ₹${(customization.price || 0).toLocaleString('en-IN')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${customization.created_at ? new Date(customization.created_at).toLocaleDateString() : 'Unknown'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewCustomization('${customization.id}')">View</button>
          <button class="text-green-600 hover:text-green-900" onclick="processCustomization('${customization.id}')">Process</button>
        </td>
      </tr>
    `).join('');
    
    console.log('✅ Customizations table updated with', customizations.length, 'items');
  }
  
  // Display menu photos in table
  function displayMenuPhotos(photos) {
    const tbody = document.getElementById('photos-table-body');
    if (!tbody) return;
    
    if (!photos || photos.length === 0) {
      console.log('⚠️ No photos to display - showing empty state');
      tbody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-gray-500">No photos found in database. <button onclick="loadRealData()" class="text-blue-600 hover:text-blue-800 underline">Refresh to try again</button></td></tr>';
      return;
    }
    
    tbody.innerHTML = photos.map(photo => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap">
          ${photo.photo_url ? 
            `<img src="${photo.photo_url}" alt="Menu photo" class="w-12 h-12 rounded object-cover">` : 
            '<div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center"><svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg></div>'
          }
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${photo.original_filename || 'Unknown'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            photo.conversion_status === 'completed' ? 'bg-green-100 text-green-800' :
            photo.conversion_status === 'processing' ? 'bg-yellow-100 text-yellow-800' :
            photo.conversion_status === 'failed' ? 'bg-red-100 text-red-800' :
            'bg-gray-100 text-gray-800'
          }">
            ${photo.conversion_status || 'pending'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${photo.file_size ? (photo.file_size / 1024).toFixed(1) + ' KB' : 'Unknown size'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${photo.created_at ? new Date(photo.created_at).toLocaleDateString() : 'Unknown'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewPhoto('${photo.id}')">View</button>
              ${photo.conversion_status === 'completed' ? 
                '<button class="text-green-600 hover:text-green-900" onclick="downloadText(\'' + photo.id + '\')">Download</button>' :
                '<button class="text-gray-400 cursor-not-allowed" disabled>Download</button>'
              }
            </td>
          </tr>
        `).join('');
      }
      
      // Update statistics
  function updateStatistics(customizations, photos) {
    const totalCustomizations = document.getElementById('total-customizations');
    const pendingCustomizations = document.getElementById('pending-customizations');
    const inProgressCustomizations = document.getElementById('in-progress-customizations');
    const completedCustomizations = document.getElementById('completed-customizations');
    
    if (totalCustomizations) totalCustomizations.textContent = customizations.length;
    
    if (pendingCustomizations) {
      const pending = customizations.filter(c => c.status === 'pending' || c.status === 'new').length;
      pendingCustomizations.textContent = pending;
    }
    
    if (inProgressCustomizations) {
      const inProgress = customizations.filter(c => c.status === 'in_progress' || c.status === 'processing').length;
      inProgressCustomizations.textContent = inProgress;
    }
    
    if (completedCustomizations) {
      const completed = customizations.filter(c => c.status === 'completed' || c.status === 'processed').length;
      completedCustomizations.textContent = completed;
    }
  }

  // Demo product customizations data
  function getDemoProductCustomizations() {
    return [
      {
        id: 'demo-1',
        product_name: 'Restaurant Menu System',
        project_name: 'Bella Vista Digital Menu',
        customer_name: 'Maria Rodriguez',
        company_name: 'Bella Vista Restaurant',
        email: 'maria@bellavista.com',
        phone: '+1 (555) 123-4567',
        requirements: 'QR code ordering system with real-time updates',
        status: 'pending',
        price: 25000,
        created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-2',
        product_name: 'Android TV App',
        project_name: 'Golden Dragon Streaming App',
        customer_name: 'David Chen',
        company_name: 'Golden Dragon Media',
        email: 'david@goldendragon.com',
        phone: '+1 (555) 987-6543',
        requirements: 'Multi-language support and content management',
        status: 'in_progress',
        price: 55000,
        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-3',
        product_name: 'Restaurant Website',
        project_name: 'Café Del Sol Website',
        customer_name: 'Sophie Martin',
        company_name: 'Café Del Sol',
        email: 'sophie@cafedelsol.com',
        phone: '+1 (555) 456-7890',
        requirements: 'Online ordering integration with delivery partners',
        status: 'completed',
        price: 15000,
        created_at: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-4',
        product_name: 'Streaming Mobile App',
        project_name: 'Pizza Palace Mobile App',
        customer_name: 'Tony Romano',
        company_name: 'Pizza Palace',
        email: 'tony@pizzapalace.com',
        phone: '+1 (555) 321-9876',
        requirements: 'Real-time order tracking and push notifications',
        status: 'pending',
        price: 45000,
        created_at: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-5',
        product_name: 'Restaurant Menu System',
        project_name: 'Sushi Master Digital Menu',
        customer_name: 'Yuki Tanaka',
        company_name: 'Sushi Master',
        email: 'yuki@sushimaster.com',
        phone: '+1 (555) 654-3210',
        requirements: 'Customizable menu categories and seasonal updates',
        status: 'in_progress',
        price: 25000,
        created_at: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString()
      }
    ];
  }

  // Demo menu photos data
  function getDemoMenuPhotos() {
    return [
      {
        id: 'photo-1',
        original_filename: 'bella-vista-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/4F46E5/FFFFFF?text=BV',
        conversion_status: 'completed',
        created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 2400000
      },
      {
        id: 'photo-2',
        original_filename: 'golden-dragon-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/DC2626/FFFFFF?text=GD',
        conversion_status: 'processing',
        created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 1800000
      },
      {
        id: 'photo-3',
        original_filename: 'cafe-del-sol-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/059669/FFFFFF?text=CD',
        conversion_status: 'completed',
        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 3100000
      }
    ];
  }

  // Load user profile from Supabase
  async function loadUserProfile() {
    try {
      // Check if Supabase is available
      if (typeof window.supabase === 'undefined') {
        console.error('Supabase client not available');
        return;
      }

      const supabase = window.supabase;

      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        console.error('Error getting user:', userError);
        window.location.href = '/login';
        return;
      }

      currentUser = user;
      console.log('🔍 Loading profile for user:', user.email);
      
      // Get user profile with menu_operator role
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .eq('role', 'menu_operator')
        .single();

      if (profileError) {
        console.error('Error loading profile:', profileError);
        
        // Try fallback without role filter
        const { data: fallbackProfile, error: fallbackError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (fallbackError) {
          console.error('Error loading fallback profile:', fallbackError);
          window.location.href = '/login';
          return;
        }

        console.log('🔍 Fallback profile loaded:', fallbackProfile);
        console.log('🔍 Role value from database:', JSON.stringify(fallbackProfile.role));

        // Check if user has Menu Operator role (case-insensitive)
        if (!fallbackProfile.role || fallbackProfile.role.toLowerCase().trim() !== 'menu_operator') {
          console.log('User does not have menu_operator role. Role:', fallbackProfile.role);
          // Redirect based on role
          if (fallbackProfile.role === 'admin') {
            window.location.href = '/admin';
          } else {
            window.location.href = '/dashboard';
          }
          return;
        }

        console.log('✅ User has menu_operator role, proceeding...');
        return;
      }

      console.log('🔍 Profile loaded:', profile);
      console.log('🔍 Role value from database:', JSON.stringify(profile.role));

      // Check if user has Menu Operator role (case-insensitive)
      if (!profile.role || profile.role.toLowerCase().trim() !== 'menu_operator') {
        console.log('User does not have menu_operator role. Role:', profile.role);
        // Redirect based on role
        if (profile.role === 'admin') {
          window.location.href = '/admin';
        } else {
          window.location.href = '/dashboard';
        }
        return;
      }

      console.log('✅ User has menu_operator role, proceeding...');

    } catch (error) {
      console.error('Error loading user profile:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
      // Refresh buttons
      const refreshCustomizations = document.getElementById('refresh-customizations');
      if (refreshCustomizations) {
        refreshCustomizations.addEventListener('click', async () => {
          console.log('🔄 Manual refresh of product customizations triggered');
          await loadRealData();
        });
      }
      
      const refreshPhotos = document.getElementById('refresh-photos');
      if (refreshPhotos) {
        refreshPhotos.addEventListener('click', async () => {
          console.log('🔄 Manual refresh of photos triggered');
          await loadRealData();
        });
      }
      
      // Refresh button now uses onclick handler directly

      // Buttons now use onclick handlers directly

      // File upload
      const photoUploadInput = document.getElementById('photo-upload-input');
      if (photoUploadInput) {
        photoUploadInput.addEventListener('change', handlePhotoUpload);
      }
  }

    // Handle photo upload
    async function handlePhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    // Validate file
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }

    if (file.size > 10 * 1024 * 1024) { // 10MB limit
      alert('File size must be less than 10MB');
      return;
    }

    try {
      // Upload to Supabase Storage
      const fileExt = file.name.split('.').pop();
      const fileName = `${currentUser.id}/${Date.now()}.${fileExt}`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('menu-photos')
        .upload(fileName, file);

      if (uploadError) {
        throw uploadError;
      }

      // Get public URL
      const { data: { publicUrl } } = supabase.storage
        .from('menu-photos')
        .getPublicUrl(fileName);

      // Save to database
      const { data: photoData, error: dbError } = await supabase
          .from('menu_photos')
          .insert({
            user_id: currentUser.id,
            photo_url: publicUrl,
            original_filename: file.name,
            file_size: file.size,
            mime_type: file.type,
            conversion_status: 'pending'
        });

      if (dbError) {
        throw dbError;
      }

        // Reload photos
        await loadRealMenuPhotos();

      // Reset file input
      event.target.value = '';

        alert('Photo uploaded successfully!');

    } catch (error) {
      console.error('Upload error:', error);
      alert('Error uploading file: ' + error.message);
      }
    }

    // Global functions for table actions
    window.viewCustomization = async function(customizationId) {
      console.log('🔄 Loading product customization details for:', customizationId);
      
      try {
        const { data: customization, error } = await supabase
          .from('product_customizations')
          .select('*')
          .eq('id', customizationId)
          .single();

        if (error) {
          console.error('Error loading product customization details:', error);
          alert('Error loading customization details: ' + error.message);
          return;
        }

        // Create a detailed modal with admin panel styling
        const details = `
Product Customization Details:
=============================

Product Information:
-------------------
Product Name: ${customization.product_name || 'Not provided'}
Project Name: ${customization.project_name || 'Not provided'}
Status: ${customization.status || 'Not provided'}
Price: ₹${(customization.price || 0).toLocaleString('en-IN')}

Customer Information:
-------------------
Customer Name: ${customization.customer_name || 'Not provided'}
Company Name: ${customization.company_name || 'Not provided'}
Email: ${customization.email || 'Not provided'}
Phone: ${customization.phone || 'Not provided'}

Project Details:
---------------
Requirements: ${customization.requirements || 'No requirements provided'}
Created: ${new Date(customization.created_at).toLocaleString()}
Updated: ${new Date(customization.updated_at || customization.created_at).toLocaleString()}

${customization.notes ? `Notes: ${customization.notes}` : ''}
        `;
        
        alert(details);
      } catch (error) {
        console.error('Error viewing product customization details:', error);
        alert('Error viewing customization details: ' + error.message);
      }
    };

    window.processCustomization = function(customizationId) {
      console.log('Process product customization:', customizationId);
      // Implement process functionality
      alert('Processing customization: ' + customizationId);
    };

    window.viewPhoto = function(photoId) {
      console.log('View photo:', photoId);
      // Implement view functionality
    };

    window.downloadText = function(photoId) {
      console.log('Download text for photo:', photoId);
      // Implement download functionality
    };
    
    // Force load data immediately when script loads
    console.log('🔄 Script loaded - Force loading data...');
    setTimeout(() => {
      loadDemoDataImmediately();
    }, 100);
    
</script>
</MenuOperatorAdminLayout>