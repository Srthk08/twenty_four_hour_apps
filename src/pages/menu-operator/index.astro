---
import MenuOperatorAdminLayout from '../../layouts/MenuOperatorAdminLayout.astro';
---

<MenuOperatorAdminLayout title="Menu Operator Dashboard - Product Customizations">
  <div class="max-w-7xl mx-auto">
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center justify-between mb-6">
        <div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Product Customizations Dashboard</h2>
          <p class="text-gray-600">Manage all product customizations, track progress, and handle customer requests.</p>
        </div>
        <div class="flex space-x-3">
          <button onclick="window.location.reload()" class="inline-flex items-center px-6 py-3 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh
          </button>
        </div>
      </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Total Customizations Card -->
      <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
        </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-blue-600">Total Customizations</p>
              <p class="text-2xl font-bold text-blue-900" id="total-customizations">3</p>
          </div>
        </div>
      </div>

        <!-- Pending Customizations Card -->
        <div class="bg-yellow-50 rounded-lg p-6 border border-yellow-200">
        <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-yellow-600">Pending</p>
              <p class="text-2xl font-bold text-yellow-900" id="pending-customizations">1</p>
              </div>
            </div>
          </div>
          
        <!-- In Progress Card -->
        <div class="bg-orange-50 rounded-lg p-6 border border-orange-200">
        <div class="flex items-center">
            <div class="p-2 bg-orange-100 rounded-lg">
              <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-orange-600">In Progress</p>
              <p class="text-2xl font-bold text-orange-900" id="in-progress-customizations">1</p>
          </div>
        </div>
      </div>

        <!-- Completed Card -->
        <div class="bg-green-50 rounded-lg p-6 border border-green-200">
        <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </div>
          <div class="ml-4">
              <p class="text-sm font-medium text-green-600">Completed</p>
              <p class="text-2xl font-bold text-green-900" id="completed-customizations">1</p>
          </div>
          </div>
        </div>
      </div>

      <!-- Detailed Data Sections -->
      <div class="mt-8 space-y-8">
        
        <!-- Product Customizations Section -->
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-bold text-gray-900">Product Customizations</h3>
          <div class="flex items-center space-x-2">
              <input id="search-email" type="text" placeholder="Search by email..." class="px-3 py-1.5 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500" />
              <button id="refresh-customizations" class="text-gray-400 hover:text-gray-600 transition-colors" title="Refresh">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product & Project</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer Details</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact Info</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
              <tbody id="customizations-table-body" class="bg-white divide-y divide-gray-200">
            <tr>
              <td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading customizations...</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Menu Photos Section removed as requested -->
      </div>
    </div>
  </div>

  <!-- Hidden file input for photo upload -->
  <input type="file" id="photo-upload-input" accept="image/*" class="hidden" />

  <!-- Product Browser Modal -->
  <div id="product-browser-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-bold text-gray-900">Browse Products</h3>
            <button onclick="closeProductBrowser()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="products-grid">
            <!-- Products will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>


  <!-- Product Customization Form Modal -->
  <div id="customization-form-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-bold text-gray-900">Product Customization Form</h3>
            <button onclick="closeCustomizationForm()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div id="customization-form-content">
            <!-- Customization form will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Customization Details Modal -->
  <div id="customization-details-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-bold text-gray-900">Order Customization Details</h3>
            <button onclick="closeCustomizationDetails()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          <div id="customization-details-content">
            <!-- Details content will be injected here -->
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  import { supabase, supabaseUrl, supabaseAnonKey } from '../../lib/supabase';

  // Supabase configuration (shared client with fallbacks)
  console.log('🔧 Supabase configuration (shared client):');
  console.log('- URL:', supabaseUrl);
  console.log('- Key:', supabaseAnonKey ? 'Present' : 'Missing');

  // Global variables
  let currentUser = null;
  

  // Wait for Supabase (returns already-initialized client)
  function waitForSupabase() {
    return Promise.resolve(supabase);
  }

  // Initialize dashboard
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('📄 DOM Content Loaded - Starting Menu Operator Dashboard initialization');
    console.log('🔄 UPDATED: Product Customizations Dashboard Loading...');
    
    // Setup event listeners immediately
    setupEventListeners();
    
    // Load real data immediately
        await loadRealData();
  });
  
  // Additional fallback for window load
  window.addEventListener('load', () => {
    console.log('🔄 Window loaded - Ensuring dashboard is ready');
    if (document.getElementById('customizations-table-body').innerHTML.includes('Loading')) {
      loadRealData();
    }
  });

  // Modal Functions

  window.showProductBrowser = function() {
    console.log('🔄 Showing product browser...');
    const modal = document.getElementById('product-browser-modal');
    const grid = document.getElementById('products-grid');
    
    // Load products
    const products = getAvailableProducts();
    grid.innerHTML = generateProductsHTML(products);
    
    modal.classList.remove('hidden');
  };

  window.closeProductBrowser = function() {
    document.getElementById('product-browser-modal').classList.add('hidden');
  };

  window.selectProduct = function(productId) {
    console.log('🔄 Product selected:', productId);
    closeProductBrowser();
    showCustomizationForm(productId);
  };

  window.showCustomizationForm = function(productId) {
    console.log('🔄 Showing customization form for product:', productId);
    const modal = document.getElementById('customization-form-modal');
    const content = document.getElementById('customization-form-content');
    
    // Get product details
    const product = getProductById(productId);
    content.innerHTML = generateCustomizationFormHTML(product);
    
    modal.classList.remove('hidden');
  };

  window.closeCustomizationForm = function() {
    document.getElementById('customization-form-modal').classList.add('hidden');
  };

  // Form submission handler
  document.addEventListener('submit', function(e) {
    if (e.target.id === 'customization-form') {
      e.preventDefault();
      handleCustomizationFormSubmit(e.target);
    }
  });

  function handleCustomizationFormSubmit(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    console.log('🔄 Submitting customization form:', data);
    
    // Add product information
    const productId = form.dataset.productId || 'unknown';
    const product = getProductById(productId);
    
    const customizationData = {
      ...data,
      product_name: product.name,
      product_id: productId,
      status: 'pending',
      created_at: new Date().toISOString()
    };
    
    // Here you would typically save to Supabase
    console.log('📝 Customization data to save:', customizationData);
    
    // Show success message
    alert('Customization request submitted successfully! We will contact you soon.');
    
    // Close the form
    closeCustomizationForm();
    
    // Optionally refresh the dashboard
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  }

  // Data Functions

  function getAvailableProducts() {
    return [
      {
        id: 'restaurant-menu-system',
        name: 'Restaurant Menu System',
        description: 'Digital menu system with QR code ordering',
        price: 'Starting from $2,500',
        image: '/images/restaurant-menu.jpg',
        features: ['QR Code Ordering', 'Real-time Updates', 'Multi-language Support']
      },
      {
        id: 'android-tv-app',
        name: 'Android TV App',
        description: 'Custom Android TV application for streaming',
        price: 'Starting from $5,500',
        image: '/images/android-tv.jpg',
        features: ['Custom UI/UX', 'Content Management', 'Multi-platform Support']
      },
      {
        id: 'restaurant-website',
        name: 'Restaurant Website',
        description: 'Professional website with online ordering',
        price: 'Starting from $3,000',
        image: '/images/restaurant-website.jpg',
        features: ['Online Ordering', 'Menu Management', 'SEO Optimized']
      },
      {
        id: 'streaming-mobile-app',
        name: 'Streaming Mobile App',
        description: 'Cross-platform mobile app for content streaming',
        price: 'Starting from $4,500',
        image: '/images/mobile-app.jpg',
        features: ['iOS & Android', 'Live Streaming', 'User Management']
      },
      {
        id: 'order-menu-system',
        name: 'Order Menu System',
        description: 'Complete ordering system for restaurants',
        price: 'Starting from $3,500',
        image: '/images/order-system.jpg',
        features: ['Order Management', 'Payment Integration', 'Analytics']
      },
      {
        id: 'e-commerce-platform',
        name: 'E-commerce Platform',
        description: 'Full-featured online store platform',
        price: 'Starting from $6,000',
        image: '/images/ecommerce.jpg',
        features: ['Product Catalog', 'Payment Gateway', 'Inventory Management']
      }
    ];
  }

  function getProductById(productId) {
    const products = getAvailableProducts();
    return products.find(p => p.id === productId) || products[0];
  }


  function generateProductsHTML(products) {
    return `
      ${products.map(product => `
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
          <div class="p-6">
            <div class="aspect-w-16 aspect-h-9 mb-4">
              <div class="w-full h-48 bg-gray-200 rounded-lg flex items-center justify-center">
                <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">${product.name}</h3>
            <p class="text-gray-600 mb-4">${product.description}</p>
            <div class="mb-4">
              <p class="text-lg font-bold text-green-600">${product.price}</p>
            </div>
            <div class="mb-4">
              <h4 class="text-sm font-medium text-gray-900 mb-2">Features:</h4>
              <ul class="text-sm text-gray-600 space-y-1">
                ${product.features.map(feature => `<li>• ${feature}</li>`).join('')}
              </ul>
            </div>
            <button onclick="selectProduct('${product.id}')" class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors">
              Select Product
            </button>
          </div>
        </div>
      `).join('')}
    `;
  }

  function generateCustomizationFormHTML(product) {
    return `
      <div class="space-y-6">
        <div class="bg-gray-50 p-4 rounded-lg">
          <h4 class="text-lg font-semibold text-gray-900 mb-2">Selected Product: ${product.name}</h4>
          <p class="text-gray-600">${product.description}</p>
        </div>
        
        <form id="customization-form" data-product-id="${product.id}" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Customer Name *</label>
              <input type="text" name="customer_name" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Company Name</label>
              <input type="text" name="company_name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
              <input type="email" name="email" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
              <input type="tel" name="phone" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Project Name</label>
            <input type="text" name="project_name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Requirements *</label>
            <textarea name="requirements" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Describe your specific requirements..."></textarea>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Budget Range</label>
            <select name="budget_range" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
              <option value="">Select Budget Range</option>
              <option value="under-5k">Under $5,000</option>
              <option value="5k-10k">$5,000 - $10,000</option>
              <option value="10k-25k">$10,000 - $25,000</option>
              <option value="25k-50k">$25,000 - $50,000</option>
              <option value="over-50k">Over $50,000</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Timeline</label>
            <select name="timeline" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
              <option value="">Select Timeline</option>
              <option value="asap">ASAP</option>
              <option value="1-month">1 Month</option>
              <option value="2-3-months">2-3 Months</option>
              <option value="3-6-months">3-6 Months</option>
              <option value="6-months-plus">6+ Months</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Additional Notes</label>
            <textarea name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Any additional information..."></textarea>
          </div>
          
          <div class="flex justify-end space-x-4">
            <button type="button" onclick="closeCustomizationForm()" class="px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
              Cancel
            </button>
            <button type="submit" class="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
              Submit Customization Request
            </button>
          </div>
        </form>
      </div>
    `;
  }
  
  // Load demo data immediately
  function loadDemoDataImmediately() {
    console.log('🔄 Loading demo data immediately...');
    const demoCustomizations = getDemoProductCustomizations();
    const demoPhotos = getDemoMenuPhotos();
    
    displayProductCustomizations(demoCustomizations);
    displayMenuPhotos(demoPhotos);
    updateStatistics(demoCustomizations, demoPhotos);
    
    console.log('✅ Demo data loaded - Customizations:', demoCustomizations.length, 'Photos:', demoPhotos.length);
  }
  
  // Load real data from Supabase
  async function loadRealData() {
    try {
      console.log('🔄 Loading real data from Supabase...');
      
      // Wait for Supabase with timeout
      const supabaseClient = await waitForSupabase();
      if (!supabaseClient) return;
      
      // Load user profile
      await loadUserProfile();
      
      // Load customizations from order_customizations table
      const customizations = await loadRealProductCustomizations();
      const photos = await loadRealMenuPhotos();
      
      console.log('🔄 Real data fetched - Customizations:', customizations?.length || 0, 'Photos:', photos?.length || 0);
      
      // Cache full list for searching
      window.__all_customizations = customizations || [];
      displayProductCustomizations(window.__all_customizations);
      displayMenuPhotos(photos || []);
        updateStatistics(customizations || [], photos || []);
      
    } catch (error) {
      console.warn('⚠️ Error loading real data:', error.message);
      // Ensure UI advances from Loading... to empty state
      displayProductCustomizations([]);
      displayMenuPhotos([]);
      updateStatistics([], []);
    }
  }
  
  // Load data and display immediately
  async function loadDataAndDisplay() {
    try {
      console.log('🔄 Loading data from Supabase...');
      
      // Try to load real data first
      const customizations = await loadRealProductCustomizations();
      const photos = await loadRealMenuPhotos();
      
      // If no real data, use demo data
      if (!customizations || customizations.length === 0) {
        console.log('⚠️ No real customizations found, using demo data');
        const demoCustomizations = getDemoProductCustomizations();
        displayProductCustomizations(demoCustomizations);
        updateStatistics(demoCustomizations, photos || []);
      } else {
        displayProductCustomizations(customizations);
        updateStatistics(customizations, photos || []);
      }
      
      if (!photos || photos.length === 0) {
        console.log('⚠️ No real photos found, using demo data');
        const demoPhotos = getDemoMenuPhotos();
        displayMenuPhotos(demoPhotos);
      } else {
      displayMenuPhotos(photos);
      }
      
      console.log('✅ Data loaded and displayed');
      
    } catch (error) {
      console.error('❌ Error loading real data, using demo data:', error);
      
      // Fallback to demo data
      const demoCustomizations = getDemoProductCustomizations();
      const demoPhotos = getDemoMenuPhotos();
      
      displayProductCustomizations(demoCustomizations);
      displayMenuPhotos(demoPhotos);
      updateStatistics(demoCustomizations, demoPhotos);
      
      console.log('✅ Demo data loaded and displayed');
    }
  }
  
  // Load real product customizations from Supabase (from order_customizations table)
  async function loadRealProductCustomizations() {
    try {
      console.log('🔄 Attempting to load from order_customizations table...');
      console.log('🔄 Supabase client status:', supabase ? 'Available' : 'Not available');
      
      if (!supabase) {
        console.error('❌ Supabase client not available');
        throw new Error('Supabase not available');
      }
      
      console.log('🔄 Executing Supabase query (order_customizations)...');
      let { data, error } = await supabase
        .from('order_customizations')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);

      // REST fallback if RLS blocks or no rows but we expect data
      if (error || !data) {
        console.warn('⚠️ Supabase query error/empty, trying REST fallback:', error?.message);
        data = await restSelect('order_customizations');
      }
      
      console.log('🔄 Supabase query completed. Data:', data, 'Error:', error);
      
      if (error) {
        console.error('❌ Supabase error:', error);
        throw error;
      }
      
      console.log('✅ Loaded customizations from order_customizations:', data?.length || 0);
      console.log('🔄 Sample data:', data?.[0] || 'No data');
      return data || [];
    } catch (error) {
      console.error('❌ Error loading real product customizations from product_customizations:', error);
      throw error;
    }
  }
  
  // Load real menu photos from Supabase
  async function loadRealMenuPhotos() {
    try {
      console.log('🔄 Attempting to load from menu_photos table...');
      
      if (!supabase) {
        console.error('❌ Supabase client not available');
        throw new Error('Supabase not available');
      }
      
      // Derive photos from order_customizations.menu_photos_urls to avoid 404 REST calls
      const { data, error } = await supabase
        .from('order_customizations')
        .select('id, created_at, menu_photos_urls')
        .order('created_at', { ascending: false })
        .limit(50);
      
      if (error) {
        console.warn('⚠️ order_customizations select for photos failed:', error.message);
        return [];
      }

      const photos = [];
      (data || []).forEach(row => {
        let items = row.menu_photos_urls;
        if (!items) return;
        try {
          if (typeof items === 'string') items = JSON.parse(items);
        } catch {
          items = [];
        }
        if (Array.isArray(items)) {
          items.forEach(p => {
            photos.push({
              id: `${row.id}-${p.path || p.filename || Math.random().toString(36).slice(2)}`,
              photo_url: p.url || p.publicUrl || null,
              original_filename: p.filename || 'menu-photo',
              conversion_status: 'completed',
              file_size: p.size || null,
              created_at: row.created_at
            });
          });
        }
      });

      console.log('✅ Derived photos from order_customizations:', photos.length);
      return photos;
    } catch (error) {
      console.error('❌ Error loading real menu photos:', error);
      throw error;
    }
  }

  // Generic REST fallback using current session token
  async function restSelect(table) {
    try {
      const { data: sess } = await supabase.auth.getSession();
      const token = sess?.session?.access_token || sess?.access_token || '';
      const url = `${supabaseUrl}/rest/v1/${table}?select=*`;
      const resp = await fetch(url, {
        headers: {
          'apikey': supabaseAnonKey,
          ...(token ? { 'Authorization': `Bearer ${token}` } : {})
        }
      });
      if (!resp.ok) {
        const txt = await resp.text();
        console.warn('REST fallback failed:', resp.status, txt);
        return [];
      }
      return await resp.json();
    } catch (e) {
      console.warn('REST fallback exception:', e);
      return [];
    }
  }

  // REST select by id helper
  async function restSelectById(table, id) {
    try {
      const { data: sess } = await supabase.auth.getSession();
      const token = sess?.session?.access_token || sess?.access_token || '';
      const url = `${supabaseUrl}/rest/v1/${table}?id=eq.${encodeURIComponent(id)}&select=*`;
      const resp = await fetch(url, {
        headers: {
          'apikey': supabaseAnonKey,
          ...(token ? { 'Authorization': `Bearer ${token}` } : {})
        }
      });
      if (!resp.ok) {
        const txt = await resp.text();
        console.warn('REST by id failed:', resp.status, txt);
        return null;
      }
      const arr = await resp.json();
      return Array.isArray(arr) && arr.length ? arr[0] : null;
    } catch (e) {
      console.warn('REST by id exception:', e);
      return null;
    }
  }

  // Utility: timeout wrapper
  function withTimeout(promise, ms) {
    return Promise.race([
      promise,
      new Promise(resolve => setTimeout(() => resolve(null), ms))
    ]);
  }
  
  // Display product customizations in table (mapped from order_customizations)
  function displayProductCustomizations(customizations) {
    console.log('🔄 Displaying customizations:', customizations?.length || 0);
    const tbody = document.getElementById('customizations-table-body');
    if (!tbody) {
      console.error('❌ Table body not found! Looking for: customizations-table-body');
      console.log('Available elements:', document.querySelectorAll('[id*="table"]'));
      return;
    }
    
    if (!customizations || customizations.length === 0) {
      console.log('⚠️ No customizations to display - showing empty state');
      tbody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">No product customizations found in database. <button onclick="loadRealData()" class="text-blue-600 hover:text-blue-800 underline">Refresh to try again</button></td></tr>';
      return;
    }
    
    tbody.innerHTML = customizations.map(customization => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm font-medium text-gray-900">${customization.product_name || 'Order Menu System'}</div>
          <div class="text-sm text-gray-500">${customization.project_name || customization.restaurant_name || 'No project name'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${customization.contact_person || customization.owner_name || 'Not specified'}</div>
          <div class="text-sm text-gray-500">${customization.restaurant_name || customization.company_name || ''}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${customization.email || 'No email'}</div>
          <div class="text-sm text-gray-500">${customization.phone_number || customization.phone || 'No phone'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            (customization.status === 'completed' || customization.status === 'processed') ? 'bg-green-100 text-green-800' :
            (customization.status === 'in_progress' || customization.status === 'processing') ? 'bg-yellow-100 text-yellow-800' :
            (customization.status === 'pending' || customization.status === 'pending_payment' || customization.status === 'submitted') ? 'bg-blue-100 text-blue-800' :
            'bg-gray-100 text-gray-800'
          }">
            ${customization.status || 'pending'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ₹${(customization.total_amount || customization.price || 0).toLocaleString('en-IN')}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${customization.created_at ? new Date(customization.created_at).toLocaleDateString() : 'Unknown'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button type="button" class="text-blue-600 hover:text-blue-900" onclick="viewCustomization('${customization.id}')">View</button>
        </td>
      </tr>
    `).join('');
    
    console.log('✅ Customizations table updated with', customizations.length, 'items');
  }
  
  // Display menu photos in table
  function displayMenuPhotos(photos) {
    const tbody = document.getElementById('photos-table-body');
    if (!tbody) return;
    
    if (!photos || photos.length === 0) {
      console.log('⚠️ No photos to display - showing empty state');
      tbody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-gray-500">No photos found in database. <button onclick="loadRealData()" class="text-blue-600 hover:text-blue-800 underline">Refresh to try again</button></td></tr>';
      return;
    }
    
    tbody.innerHTML = photos.map(photo => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap">
          ${photo.photo_url ? 
            `<img src="${photo.photo_url}" alt="Menu photo" class="w-12 h-12 rounded object-cover">` : 
            '<div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center"><svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg></div>'
          }
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-900">${photo.original_filename || 'Unknown'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            photo.conversion_status === 'completed' ? 'bg-green-100 text-green-800' :
            photo.conversion_status === 'processing' ? 'bg-yellow-100 text-yellow-800' :
            photo.conversion_status === 'failed' ? 'bg-red-100 text-red-800' :
            'bg-gray-100 text-gray-800'
          }">
            ${photo.conversion_status || 'pending'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${photo.file_size ? (photo.file_size / 1024).toFixed(1) + ' KB' : 'Unknown size'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${photo.created_at ? new Date(photo.created_at).toLocaleDateString() : 'Unknown'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">-</td>
          </tr>
        `).join('');
      }
      
      // Update statistics
  function updateStatistics(customizations, photos) {
    const totalCustomizations = document.getElementById('total-customizations');
    const pendingCustomizations = document.getElementById('pending-customizations');
    const inProgressCustomizations = document.getElementById('in-progress-customizations');
    const completedCustomizations = document.getElementById('completed-customizations');
    
    if (totalCustomizations) totalCustomizations.textContent = customizations.length;
    
    if (pendingCustomizations) {
      const pending = customizations.filter(c => c.status === 'pending' || c.status === 'new').length;
      pendingCustomizations.textContent = pending;
    }
    
    if (inProgressCustomizations) {
      const inProgress = customizations.filter(c => c.status === 'in_progress' || c.status === 'processing').length;
      inProgressCustomizations.textContent = inProgress;
    }
    
    if (completedCustomizations) {
      const completed = customizations.filter(c => c.status === 'completed' || c.status === 'processed').length;
      completedCustomizations.textContent = completed;
    }
  }

  // Demo product customizations data
  function getDemoProductCustomizations() {
    return [
      {
        id: 'demo-1',
        product_name: 'Restaurant Menu System',
        project_name: 'Bella Vista Digital Menu',
        customer_name: 'Maria Rodriguez',
        company_name: 'Bella Vista Restaurant',
        email: 'maria@bellavista.com',
        phone: '+1 (555) 123-4567',
        requirements: 'QR code ordering system with real-time updates',
        status: 'pending',
        price: 25000,
        created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-2',
        product_name: 'Android TV App',
        project_name: 'Golden Dragon Streaming App',
        customer_name: 'David Chen',
        company_name: 'Golden Dragon Media',
        email: 'david@goldendragon.com',
        phone: '+1 (555) 987-6543',
        requirements: 'Multi-language support and content management',
        status: 'in_progress',
        price: 55000,
        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-3',
        product_name: 'Restaurant Website',
        project_name: 'Café Del Sol Website',
        customer_name: 'Sophie Martin',
        company_name: 'Café Del Sol',
        email: 'sophie@cafedelsol.com',
        phone: '+1 (555) 456-7890',
        requirements: 'Online ordering integration with delivery partners',
        status: 'completed',
        price: 15000,
        created_at: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-4',
        product_name: 'Streaming Mobile App',
        project_name: 'Pizza Palace Mobile App',
        customer_name: 'Tony Romano',
        company_name: 'Pizza Palace',
        email: 'tony@pizzapalace.com',
        phone: '+1 (555) 321-9876',
        requirements: 'Real-time order tracking and push notifications',
        status: 'pending',
        price: 45000,
        created_at: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'demo-5',
        product_name: 'Restaurant Menu System',
        project_name: 'Sushi Master Digital Menu',
        customer_name: 'Yuki Tanaka',
        company_name: 'Sushi Master',
        email: 'yuki@sushimaster.com',
        phone: '+1 (555) 654-3210',
        requirements: 'Customizable menu categories and seasonal updates',
        status: 'in_progress',
        price: 25000,
        created_at: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString()
      }
    ];
  }

  // Demo menu photos data
  function getDemoMenuPhotos() {
    return [
      {
        id: 'photo-1',
        original_filename: 'bella-vista-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/4F46E5/FFFFFF?text=BV',
        conversion_status: 'completed',
        created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 2400000
      },
      {
        id: 'photo-2',
        original_filename: 'golden-dragon-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/DC2626/FFFFFF?text=GD',
        conversion_status: 'processing',
        created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 1800000
      },
      {
        id: 'photo-3',
        original_filename: 'cafe-del-sol-menu.jpg',
        photo_url: 'https://via.placeholder.com/100x100/059669/FFFFFF?text=CD',
        conversion_status: 'completed',
        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
        file_size: 3100000
      }
    ];
  }

  // Load user profile from Supabase
  async function loadUserProfile() {
    try {
      // Check if Supabase is available
      if (typeof window.supabase === 'undefined') {
        console.error('Supabase client not available');
        return;
      }

      const supabase = window.supabase;

      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        console.error('Error getting user:', userError);
        window.location.href = '/login';
        return;
      }

      currentUser = user;
      console.log('🔍 Loading profile for user:', user.email);
      
      // Get user profile with menu_operator role
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .eq('role', 'menu_operator')
        .single();

      if (profileError) {
        console.error('Error loading profile:', profileError);
        
        // Try fallback without role filter
        const { data: fallbackProfile, error: fallbackError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (fallbackError) {
          console.error('Error loading fallback profile:', fallbackError);
          window.location.href = '/login';
          return;
        }

        console.log('🔍 Fallback profile loaded:', fallbackProfile);
        console.log('🔍 Role value from database:', JSON.stringify(fallbackProfile.role));

        // Check if user has Menu Operator role (case-insensitive)
        if (!fallbackProfile.role || fallbackProfile.role.toLowerCase().trim() !== 'menu_operator') {
          console.log('User does not have menu_operator role. Role:', fallbackProfile.role);
          // Redirect based on role
          if (fallbackProfile.role === 'admin') {
            window.location.href = '/admin';
          } else {
            window.location.href = '/dashboard';
          }
          return;
        }

        console.log('✅ User has menu_operator role, proceeding...');
        return;
      }

      console.log('🔍 Profile loaded:', profile);
      console.log('🔍 Role value from database:', JSON.stringify(profile.role));

      // Check if user has Menu Operator role (case-insensitive)
      if (!profile.role || profile.role.toLowerCase().trim() !== 'menu_operator') {
        console.log('User does not have menu_operator role. Role:', profile.role);
        // Redirect based on role
        if (profile.role === 'admin') {
          window.location.href = '/admin';
        } else {
          window.location.href = '/dashboard';
        }
        return;
      }

      console.log('✅ User has menu_operator role, proceeding...');

    } catch (error) {
      console.error('Error loading user profile:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
      // Refresh buttons
      const refreshCustomizations = document.getElementById('refresh-customizations');
      if (refreshCustomizations) {
        refreshCustomizations.addEventListener('click', async () => {
          console.log('🔄 Manual refresh of product customizations triggered');
          await loadRealData();
          // clear search on refresh
          const input = document.getElementById('search-email');
          if (input) input.value = '';
        });
      }
      // Email search
      const searchInput = document.getElementById('search-email');
      if (searchInput) {
        const runFilter = () => {
          const q = (searchInput.value || '').toLowerCase().trim();
          const all = window.__all_customizations || [];
          if (!q) {
            displayProductCustomizations(all);
            updateStatistics(all, []);
            return;
          }
          const filtered = all.filter(row => (row.email || '').toLowerCase().includes(q));
          displayProductCustomizations(filtered);
          updateStatistics(filtered, []);
        };
        searchInput.addEventListener('input', runFilter);
        searchInput.addEventListener('change', runFilter);
      }
      
      const refreshPhotos = document.getElementById('refresh-photos');
      if (refreshPhotos) {
        refreshPhotos.addEventListener('click', async () => {
          console.log('🔄 Manual refresh of photos triggered');
          await loadRealData();
        });
      }
      
      // Refresh button now uses onclick handler directly

      // Buttons now use onclick handlers directly

      // File upload
      const photoUploadInput = document.getElementById('photo-upload-input');
      if (photoUploadInput) {
        photoUploadInput.addEventListener('change', handlePhotoUpload);
      }
  }

    // Handle photo upload
    async function handlePhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    // Validate file
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }

    if (file.size > 10 * 1024 * 1024) { // 10MB limit
      alert('File size must be less than 10MB');
      return;
    }

    try {
      // Upload to Supabase Storage
      const fileExt = file.name.split('.').pop();
      const fileName = `${currentUser.id}/${Date.now()}.${fileExt}`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('menu-photos')
        .upload(fileName, file);

      if (uploadError) {
        throw uploadError;
      }

      // Get public URL
      const { data: { publicUrl } } = supabase.storage
        .from('menu-photos')
        .getPublicUrl(fileName);

      // Save to database
      const { data: photoData, error: dbError } = await supabase
          .from('menu_photos')
          .insert({
            user_id: currentUser.id,
            photo_url: publicUrl,
            original_filename: file.name,
            file_size: file.size,
            mime_type: file.type,
            conversion_status: 'pending'
        });

      if (dbError) {
        throw dbError;
      }

        // Reload photos
        await loadRealMenuPhotos();

      // Reset file input
      event.target.value = '';

        alert('Photo uploaded successfully!');

    } catch (error) {
      console.error('Upload error:', error);
      alert('Error uploading file: ' + error.message);
      }
    }

    // Global functions for table actions
    window.viewCustomization = async function(customizationId) {
      // Ensure modal opens immediately to avoid double-click confusion
      const modal = document.getElementById('customization-details-modal');
      modal?.classList.remove('hidden');
      const container = document.getElementById('customization-details-content');
      if (container) container.innerHTML = '<p class="text-gray-500">Loading details...</p>';
      console.log('🔄 Loading product customization details for:', customizationId);
      
      try {
        let customization = null;
        let error = null;
        // Run client query and REST fallback concurrently with short timeout for faster UX
        const clientPromise = (async () => {
          try {
            const res = await supabase
              .from('order_customizations')
          .select('*')
          .eq('id', customizationId)
          .single();
            return res.data || null;
          } catch {
            return null;
          }
        })();
        const restPromise = restSelectById('order_customizations', customizationId);
        customization = await withTimeout(Promise.any([
          clientPromise,
          restPromise
        ]), 2500);
        if (!customization) {
          // If Promise.any returned nulls or timed out, try REST directly once more
          customization = await restSelectById('order_customizations', customizationId);
        }

        // If still no record, show empty state (don't leave loading)
        if (!customization) {
          console.warn('No customization found for id:', customizationId);
          if (container) {
            container.innerHTML = '<p class="text-gray-500">No details found for this customization.</p>';
          }
          return;
        }

        // Render into modal
        const container = document.getElementById('customization-details-content');
        if (container) {
          // Normalize address parts
          const house = customization.house_flat_number || customization.houseNumber || '';
          const line1 = customization.address_line_1 || customization.addressLine1 || '';
          const city = customization.city || '';
          const state = customization.state || '';
          const pincode = customization.pincode || '';
          const country = customization.country || '';

          // Robust restaurant name resolution
          const restaurantName = (
            customization.restaurant_name ||
            customization.restaurantName ||
            customization.restaurant ||
            customization.restaurant_title ||
            customization.project_name ||
            ''
          );

          // Photos
          let photos = customization.menu_photos_urls || [];
          try {
            if (typeof photos === 'string') photos = JSON.parse(photos);
          } catch {}
          const photosHTML = Array.isArray(photos) && photos.length
            ? `<div id="photos-grid" class="grid grid-cols-3 sm:grid-cols-4 gap-3">${photos.map(p => `
                <a href="${p.url || p.publicUrl}" target="_blank" class="block">
                  <img src="${p.url || p.publicUrl}" crossorigin="anonymous" alt="${p.filename || 'menu photo'}" class="w-20 h-20 object-cover rounded border"/>
                  <p class="mt-1 text-xs text-gray-500 truncate">${p.filename || ''}</p>
                </a>
              `).join('')}</div>`
            : '<p class="text-gray-500">No menu photos uploaded</p>';

          const logoHTML = customization.restaurant_logo_url
            ? `<img src="${customization.restaurant_logo_url}" alt="Logo" class="w-20 h-20 object-cover rounded border"/>`
            : '<span class="text-gray-500">Not uploaded</span>';

          container.innerHTML = `
            <div class="space-y-8">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Product</h4>
                  <p class="text-gray-900">${customization.product_name || 'Order Menu System'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Status</h4>
                  <div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    (customization.status === 'completed' || customization.status === 'processed') ? 'bg-green-100 text-green-800' :
                    (customization.status === 'in_progress' || customization.status === 'processing') ? 'bg-yellow-100 text-yellow-800' :
                    (customization.status === 'pending' || customization.status === 'pending_payment' || customization.status === 'submitted') ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }">${customization.status || 'pending'}</div>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Project Name</h4>
                  <p class="text-gray-900">${customization.project_name || 'Not provided'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Restaurant Name</h4>
                  <p class="text-gray-900">${restaurantName || 'Not provided'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Amounts</h4>
                  <p class="text-gray-900">Base: ₹${(customization.base_package_cost || 0).toLocaleString('en-IN')} · GST: ₹${(customization.gst_amount || 0).toLocaleString('en-IN')} · Total: ₹${(customization.total_amount || 0).toLocaleString('en-IN')}</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Owner Name</h4>
                  <p class="text-gray-900">${customization.owner_name || '-'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Contact Person</h4>
                  <p class="text-gray-900">${customization.contact_person || customization.owner_name || 'Not provided'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Email</h4>
                  <p class="text-gray-900">${customization.email || 'Not provided'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Phone</h4>
                  <p class="text-gray-900">${customization.phone_number || customization.phone || 'Not provided'}</p>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500 mb-1">Created</h4>
                  <p class="text-gray-900">${new Date(customization.created_at).toLocaleString()}</p>
                </div>
              </div>
              <div>
                <h4 class="text-sm font-medium text-gray-500 mb-2">Address</h4>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <p class="text-xs text-gray-500">House / Flat Number</p>
                    <p class="text-gray-900">${house || '-'}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">Address Line 1</p>
                    <p class="text-gray-900">${line1 || '-'}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">City</p>
                    <p class="text-gray-900">${city || '-'}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">State</p>
                    <p class="text-gray-900">${state || '-'}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">Pincode</p>
                    <p class="text-gray-900">${pincode || '-'}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">Country</p>
                    <p class="text-gray-900">${country || '-'}</p>
                  </div>
                </div>
              </div>
              <div>
                <h4 class="text-sm font-medium text-gray-500 mb-2">Restaurant Logo</h4>
                ${logoHTML}
              </div>
              <div>
                <div class="flex items-center justify-between mb-2">
                  <h4 class="text-sm font-medium text-gray-500">Menu Photos</h4>
                  <button type="button" onclick="convertImagesToTextAI()" class="px-3 py-1.5 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors">Convert with AI</button>
                </div>
                ${photosHTML}
                <div id="ai-conversion-result" class="mt-4 hidden">
                  <div class="flex items-center justify-between mb-2">
                    <h5 class="text-sm font-semibold text-gray-900">Extracted Menu Text</h5>
                    <div id="ai-action-buttons" class="space-x-2 hidden">
                      <button type="button" onclick="copyAIText()" class="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs hover:bg-gray-200">Copy</button>
                      <button type="button" onclick="clearAIText()" class="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs hover:bg-gray-200" title="Clear">Clear</button>
                    </div>
                  </div>
                  <pre id="ai-conversion-text" class="w-full p-3 border border-gray-300 rounded-md text-sm whitespace-pre-wrap bg-gray-50"></pre>
                  <div id="ai-conversion-status" class="mt-2 text-xs text-gray-500"></div>
                </div>
              </div>
              <div>
                <h4 class="text-sm font-medium text-gray-500 mb-1">Additional Requirements</h4>
                <p class="text-gray-900 whitespace-pre-wrap">${customization.additional_requirements || 'None'}</p>
              </div>
            </div>
          `;
          const modal = document.getElementById('customization-details-modal');
          modal?.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error viewing product customization details:', error);
        const container = document.getElementById('customization-details-content');
        if (container) {
          container.innerHTML = '<p class="text-red-600">Error loading details. Please try again.</p>';
        }
      }
    };

    window.closeCustomizationDetails = function() {
      const modal = document.getElementById('customization-details-modal');
      if (modal) modal.classList.add('hidden');
    };

    // AI conversion using Tesseract.js (client-side OCR) with deblur pre-processing
    window.convertImagesToTextAI = async function() {
      try {
        const resultWrap = document.getElementById('ai-conversion-result');
        const resultArea = document.getElementById('ai-conversion-text');
        const status = document.getElementById('ai-conversion-status');
        if (resultWrap) resultWrap.classList.remove('hidden');
        if (status) status.textContent = 'Converting images to text, please wait...';
        if (resultArea) resultArea.textContent = '';
        const actionBtns = document.getElementById('ai-action-buttons');
        if (actionBtns) actionBtns.classList.add('hidden');

        // Collect visible image URLs from the modal photos grid
        const photosGrid = document.getElementById('photos-grid');
        const imageEls = photosGrid ? photosGrid.querySelectorAll('img') : [];
        const urls = Array.from(imageEls).map(img => img.src).filter(Boolean);

        if (urls.length === 0) {
          if (resultArea) resultArea.textContent = 'No photos available to convert.';
          if (status) status.textContent = '';
          return;
        }

        // Lazy load Tesseract
        if (!window.Tesseract) {
          await new Promise((resolve, reject) => {
            const s = document.createElement('script');
            s.src = 'https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js';
            s.onload = resolve;
            s.onerror = reject;
            document.head.appendChild(s);
          });
        }

        const sections = [];
        let processed = 0;
        for (let idx = 0; idx < urls.length; idx++) {
          const url = urls[idx];
          try {
            // Bypass CORS by drawing to canvas
            const img = new Image();
            img.crossOrigin = 'anonymous';
            img.src = url;
            await new Promise((res, rej) => { img.onload = res; img.onerror = rej; });
            const canvas = document.createElement('canvas');
            canvas.width = img.naturalWidth; canvas.height = img.naturalHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);

            // Simple unsharp mask (deblur) before OCR: blur + high-pass + add
            // 1) Create blurred version
            const blurCanvas = document.createElement('canvas');
            blurCanvas.width = canvas.width; blurCanvas.height = canvas.height;
            const bctx = blurCanvas.getContext('2d');
            bctx.filter = 'blur(1.5px)';
            bctx.drawImage(canvas, 0, 0);

            // 2) High-pass = original - blurred
            const src = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const blr = bctx.getImageData(0, 0, blurCanvas.width, blurCanvas.height);
            const out = ctx.createImageData(src.width, src.height);
            for (let i = 0; i < src.data.length; i += 4) {
              // amount factor
              const amount = 1.0;
              out.data[i]   = Math.min(255, Math.max(0, src.data[i]   + amount * (src.data[i]   - blr.data[i])));
              out.data[i+1] = Math.min(255, Math.max(0, src.data[i+1] + amount * (src.data[i+1] - blr.data[i+1])));
              out.data[i+2] = Math.min(255, Math.max(0, src.data[i+2] + amount * (src.data[i+2] - blr.data[i+2])));
              out.data[i+3] = src.data[i+3];
            }
            ctx.putImageData(out, 0, 0);

            const dataUrl = canvas.toDataURL('image/png');

            const { data: { text } } = await window.Tesseract.recognize(dataUrl, 'eng');
            if (text && text.trim()) {
              // Normalize: split into lines, trim, remove empties, convert to bullet points
              const lines = text
                .replace(/\r\n/g, '\n')
                .split('\n')
                .map(l => l.trim())
                .filter(l => l.length > 0);
              const bullets = lines.map(l => `• ${l}`).join('\n');
              sections.push(`Image ${idx + 1}\n${bullets}`);
            }
          } catch (imgErr) {
            console.warn('OCR failed for image:', url, imgErr);
          }
          processed++;
          if (status) status.textContent = `Processed ${processed}/${urls.length} image(s)`;
        }

        const combined = sections.length
          ? sections.join('\n\n')
          : 'No text detected. Try clearer photos or higher contrast images.';

        if (resultArea) resultArea.textContent = combined;
        const actionBtns2 = document.getElementById('ai-action-buttons');
        if (actionBtns2 && combined && combined.trim()) actionBtns2.classList.remove('hidden');
        if (status) status.textContent = 'Done';
      } catch (e) {
        console.error('AI conversion error:', e);
        const resultArea = document.getElementById('ai-conversion-text');
        const status = document.getElementById('ai-conversion-status');
        if (resultArea) resultArea.textContent = 'Error converting images. Please try again.';
        if (status) status.textContent = '';
      }
    };

    window.copyAIText = function() {
      const el = document.getElementById('ai-conversion-text');
      if (!el) return;
      const range = document.createRange();
      range.selectNode(el);
      const sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(range);
      try { document.execCommand('copy'); } catch {}
      sel.removeAllRanges();
    };

    window.clearAIText = function() {
      const el = document.getElementById('ai-conversion-text');
      const status = document.getElementById('ai-conversion-status');
      if (el) el.textContent = '';
      if (status) status.textContent = '';
      const actionBtns = document.getElementById('ai-action-buttons');
      if (actionBtns) actionBtns.classList.add('hidden');
    };

    window.processCustomization = function(customizationId) {
      console.log('Process product customization:', customizationId);
      // Implement process functionality
      alert('Processing customization: ' + customizationId);
    };

    window.viewPhoto = function(photoId) {
      console.log('View photo:', photoId);
      // Implement view functionality
    };

    window.downloadText = function(photoId) {
      console.log('Download text for photo:', photoId);
      // Implement download functionality
    };
    
    // Initial load uses real data only
    console.log('🔄 Script loaded - Loading real data...');
    loadRealData();
    
</script>
</MenuOperatorAdminLayout>