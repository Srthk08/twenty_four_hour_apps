---
import MenuOperatorLayout from '../../layouts/MenuOperatorLayout.astro';
import MenuOperatorGuard from '../../components/MenuOperatorGuard.astro';
---

<MenuOperatorGuard />

<MenuOperatorLayout title="Menu Operator Profile - 24HourApps">
  <div class="space-y-6">
    <!-- Back Button -->
    <div class="mb-6">
      <a href="/menu-operator" class="inline-flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        <span>‚Üê Back to Menu Operator Dashboard</span>
      </a>
    </div>

    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Menu Operator Profile</h1>
      <p class="text-gray-600">Manage your menu operator account settings and view your activity</p>
    </div>

    <!-- Profile Card -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
      <div class="flex items-start space-x-6">
        <!-- Avatar -->
        <div class="flex-shrink-0">
          <div class="w-24 h-24 bg-blue-600 rounded-full flex items-center justify-center shadow-lg">
            <span id="profile-avatar" class="text-white font-bold text-2xl">MO</span>
          </div>
        </div>
        
        <!-- User Info -->
        <div class="flex-1">
          <h2 id="profile-name" class="text-2xl font-bold text-gray-900 mb-2">Menu Operator</h2>
          <p id="profile-email" class="text-gray-600 mb-4">Loading profile...</p>
          
          <!-- Status Badges -->
          <div class="flex space-x-3">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
              <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
              </svg>
              Menu Operator
            </span>
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
              <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Active
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Profile Information Card -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-6">Profile Information</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Left Column -->
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
            <p id="profile-full-name" class="text-gray-900">Menu Operator</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <p class="text-gray-900">Menu Operator</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Last Login</label>
            <p id="profile-last-login" class="text-gray-900">Just now</p>
          </div>
        </div>
        
        <!-- Right Column -->
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <p id="profile-email-detail" class="text-gray-900">Loading profile...</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Member Since</label>
            <p id="profile-member-since" class="text-gray-900">Today</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Active
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Activity Section -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-6">Recent Activity</h3>
      
      <div class="space-y-4">
        <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div class="flex-1">
            <p class="text-sm font-medium text-gray-900">OMS Forms Processed</p>
            <p class="text-xs text-gray-500">0 forms processed today</p>
          </div>
        </div>
        
        <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
          <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div class="flex-1">
            <p class="text-sm font-medium text-gray-900">Menu Photos Processed</p>
            <p class="text-xs text-gray-500">0 photos processed today</p>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  // Initialize profile page
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Menu Operator Profile Page Loading...');
    
    // Check session storage first (primary auth method)
    const sessionData = sessionStorage.getItem('simple-auth-session');
    if (!sessionData) {
      console.log('‚ùå No session data found - redirecting to login');
      window.location.href = '/login';
      return;
    }

    let session;
    try {
      session = JSON.parse(sessionData);
    } catch (e) {
      console.log('‚ùå Invalid session data - redirecting to login');
      window.location.href = '/login';
      return;
    }

    if (!session.user || !session.user.email) {
      console.log('‚ùå No user data in session - redirecting to login');
      window.location.href = '/login';
      return;
    }

    console.log('‚úÖ Session found for user:', session.user.email);
    
    // Debug: Check what's in storage
    debugStorage();
    await loadUserProfile();
  });

  // Debug function to check storage
  function debugStorage() {
    console.log('üîç Debugging storage...');
    
    try {
      const sessionData = sessionStorage.getItem('simple-auth-session');
      console.log('üì¶ SessionStorage data:', sessionData);
      
      if (sessionData) {
        const session = JSON.parse(sessionData);
        console.log('üë§ Session user:', session.user);
      }
    } catch (e) {
      console.log('‚ùå Error reading sessionStorage:', e);
    }
    
    try {
      const localData = localStorage.getItem('simple-auth-user');
      console.log('üíæ LocalStorage data:', localData);
      
      if (localData) {
        const user = JSON.parse(localData);
        console.log('üë§ Local user:', user);
      }
    } catch (e) {
      console.log('‚ùå Error reading localStorage:', e);
    }
    
    // Check if Supabase is available
    console.log('üîó Supabase available:', typeof window.supabase !== 'undefined');
    if (typeof window.supabase !== 'undefined') {
      console.log('‚úÖ Supabase client:', window.supabase);
    }
  }

  // Load user profile from Supabase
  async function loadUserProfile() {
    try {
      console.log('üöÄ Starting profile load...');
      
      // Get user from session storage (primary method)
      const sessionData = sessionStorage.getItem('simple-auth-session');
      if (!sessionData) {
        console.log('‚ùå No session data - redirecting to login');
        window.location.href = '/login';
        return;
      }

      const session = JSON.parse(sessionData);
      const user = session.user;
      
      if (!user || !user.email) {
        console.log('‚ùå No user data in session - redirecting to login');
        window.location.href = '/login';
        return;
      }

      console.log('‚úÖ User found in session:', user.email);
      
      // Immediately update display with session data
      updateProfileDisplay(user, {
        full_name: user.full_name || user.name || 'Menu Operator',
        email: user.email,
        created_at: user.created_at || new Date().toISOString(),
        last_login: new Date().toISOString(),
        role: 'menu_operator'
      });
      
      // Check if Supabase is available
      if (typeof window.supabase === 'undefined') {
        console.error('‚ùå Supabase client not available, using fallback data');
        showFallbackProfile(user);
        return;
      }

      const supabase = window.supabase;
      console.log('‚úÖ Supabase client found');

      // Try to get user profile
      let profile = null;
      let profileError = null;

      try {
        // First try with role filter
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .eq('role', 'menu_operator')
          .single();
        
        profile = data;
        profileError = error;
      } catch (err) {
        console.log('‚ö†Ô∏è Role-filtered query failed, trying fallback...');
        profileError = err;
      }

      if (profileError) {
        console.log('‚ö†Ô∏è Role-filtered query failed:', profileError);
        
        try {
          // Try without role filter
          const { data: fallbackProfile, error: fallbackError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', user.id)
            .single();

          if (fallbackError) {
            console.error('‚ùå Fallback profile query failed:', fallbackError);
            console.log('üîÑ Using fallback profile data...');
            showFallbackProfile(user);
            return;
          }

          profile = fallbackProfile;
          console.log('‚úÖ Fallback profile loaded:', profile);

      // Check role - but be more lenient for menu operator pages
      if (profile.role && profile.role.toLowerCase().trim() !== 'menu_operator') {
        console.log('‚ö†Ô∏è User does not have menu_operator role in database. Role:', profile.role);
        // Don't redirect immediately, try to use session role first
        if (user.role === 'menu_operator' || user.role === 'menu operator') {
          console.log('‚úÖ Using session role instead of database role');
          profile.role = 'menu_operator';
        } else {
          console.log('‚ùå No valid role found - redirecting to dashboard');
          window.location.href = '/dashboard';
          return;
        }
      }
        } catch (fallbackErr) {
          console.error('‚ùå Fallback query failed:', fallbackErr);
          showFallbackProfile(user);
          return;
        }
      }

      if (profile) {
        // Check if user has menu_operator role - but be more lenient
        if (profile.role && profile.role.toLowerCase().trim() !== 'menu_operator') {
          console.log('‚ö†Ô∏è User does not have menu_operator role in database. Role:', profile.role);
          // Don't redirect immediately, try to use session role first
          if (user.role === 'menu_operator' || user.role === 'menu operator') {
            console.log('‚úÖ Using session role instead of database role');
            profile.role = 'menu_operator';
          } else {
            console.log('‚ùå No valid role found - redirecting to dashboard');
            window.location.href = '/dashboard';
            return;
          }
        }

        console.log('‚úÖ Profile loaded successfully:', profile);
        updateProfileDisplay(user, profile);
      } else {
        console.log('‚ö†Ô∏è No profile found, using fallback data');
        showFallbackProfile(user);
      }

    } catch (error) {
      console.error('‚ùå Error loading user profile:', error);
      showFallbackProfile();
    }
  }

  // Show fallback profile when Supabase fails
  function showFallbackProfile(user = null) {
    console.log('üîÑ Showing fallback profile...');
    
    // Try to get user data from simple auth manager first
    let fallbackUser = user;
    let fallbackProfile = null;
    
    if (!fallbackUser) {
      // Check sessionStorage for simple auth session
      try {
        const sessionData = sessionStorage.getItem('simple-auth-session');
        if (sessionData) {
          const session = JSON.parse(sessionData);
          if (session.user && session.access_token) {
            fallbackUser = session.user;
            console.log('‚úÖ Found user in sessionStorage:', fallbackUser.email);
          }
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Error reading sessionStorage:', e);
      }
      
      // Check localStorage as fallback
      if (!fallbackUser) {
        try {
          const storedUser = localStorage.getItem('simple-auth-user');
          if (storedUser) {
            fallbackUser = JSON.parse(storedUser);
            console.log('‚úÖ Found user in localStorage:', fallbackUser.email);
          }
        } catch (e) {
          console.log('‚ö†Ô∏è Error reading localStorage:', e);
        }
      }
    }
    
    // If still no user, redirect to login (don't create demo data)
    if (!fallbackUser) {
      console.log('‚ùå No authenticated user found - redirecting to login');
      window.location.href = '/login';
      return;
    }
    
    // Create profile from user data
    fallbackProfile = {
      full_name: fallbackUser.full_name || fallbackUser.name || 'Menu Operator',
      email: fallbackUser.email,
      created_at: fallbackUser.created_at || new Date().toISOString(),
      last_login: new Date().toISOString(),
      role: 'menu_operator'
    };

    console.log('‚úÖ Using fallback profile:', fallbackProfile);
    updateProfileDisplay(fallbackUser, fallbackProfile);
  }

  // Update profile display
  function updateProfileDisplay(user, profile) {
    try {
      // Generate display name and initials
      const displayName = profile.full_name || user.email;
      const initials = profile.full_name ? 
        profile.full_name.split(' ').map(n => n.charAt(0)).join('').toUpperCase() : 
        user.email.charAt(0).toUpperCase();

      // Update avatar
      const avatarElement = document.getElementById('profile-avatar');
      if (avatarElement) {
        avatarElement.textContent = initials;
      }
      
      // Update profile details
      const nameElement = document.getElementById('profile-name');
      if (nameElement) {
        nameElement.textContent = displayName;
      }

      const emailElement = document.getElementById('profile-email');
      if (emailElement) {
        emailElement.textContent = user.email;
      }

      const fullNameElement = document.getElementById('profile-full-name');
      if (fullNameElement) {
        fullNameElement.textContent = profile.full_name || 'Not set';
      }

      const emailDetailElement = document.getElementById('profile-email-detail');
      if (emailDetailElement) {
        emailDetailElement.textContent = user.email;
      }
      
      // Update dates
      const memberSince = profile.created_at ? 
        new Date(profile.created_at).toLocaleDateString() : 
        new Date(user.created_at).toLocaleDateString();
      
      const lastLogin = profile.last_login ? 
        new Date(profile.last_login).toLocaleDateString() : 
        new Date().toLocaleDateString();
      
      const memberSinceElement = document.getElementById('profile-member-since');
      if (memberSinceElement) {
        memberSinceElement.textContent = memberSince;
      }

      const lastLoginElement = document.getElementById('profile-last-login');
      if (lastLoginElement) {
        lastLoginElement.textContent = lastLogin;
      }

      console.log('‚úÖ Profile display updated successfully');

    } catch (error) {
      console.error('Error updating profile display:', error);
      showErrorMessage('Failed to update profile display.');
    }
  }

  // Show error message
  function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4';
    errorDiv.textContent = message;
    
    const container = document.querySelector('.space-y-6');
    if (container) {
      container.insertBefore(errorDiv, container.firstChild);
    }
  }

</script>
</MenuOperatorLayout>
