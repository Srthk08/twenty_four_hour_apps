---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sign In - DevExpress">
  <section class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <div class="flex justify-center">
        <div class="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
          <span class="text-white font-bold text-xl">24</span>
        </div>
      </div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Sign in to your account
      </h2>
      <p class="mt-2 text-center text-sm text-gray-600">
        Or{' '}
        <a href="/signup" class="font-medium text-primary-600 hover:text-primary-500 transition-colors">
          create a new account
        </a>
      </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="login-form" class="space-y-6">
          <!-- Error Message -->
          <div id="error-message" class="hidden p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex">
              <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <span id="error-text" class="text-red-800">An error occurred during sign in.</span>
            </div>
          </div>

          <!-- Success Message -->
          <div id="success-message" class="hidden p-4 bg-green-50 border border-green-200 rounded-lg">
            <div class="flex">
              <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <span id="success-text" class="text-green-800">Login successful! Redirecting...</span>
            </div>
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <div class="mt-1">
              <input
                id="email"
                name="email"
                type="email"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                placeholder="Enter your email address"
              />
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div class="mt-1">
              <input
                id="password"
                name="password"
                type="password"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                placeholder="Enter your password"
              />
            </div>
          </div>

          <!-- Submit Button -->
            <button
              type="submit"
            id="login-btn"
            class="w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
            >
            Sign In
            </button>

          <!-- Google Authentication -->
          <div class="google-auth-section">
            <div class="divider">
              <span>or</span>
            </div>
            
            <div class="google-auth-container">
              <button id="google-signin-btn" class="google-btn">
                <svg class="google-icon" viewBox="0 0 24 24" width="20" height="20">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                <span>Continue with Google</span>
              </button>
            </div>
          </div>

          <!-- Forgot Password Link -->
          <div class="text-center">
            <a href="/forgot-password" class="text-sm text-primary-600 hover:text-primary-500 transition-colors">
              Forgot your password?
            </a>
          </div>

          <!-- Sign Up Link -->
          <div class="text-center text-sm text-gray-600">
            Don't have an account?
            <a href="/signup" class="text-primary-600 hover:text-primary-500 font-medium transition-colors">
              Sign up here
            </a>
          </div>
        </form>
      </div>
    </div>
  </section>

<style>
  .google-auth-section {
    margin: 1.5rem 0;
  }

  .google-auth-container {
    width: 100%;
  }

  .google-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    background: white;
    color: #374151;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .google-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .google-btn:active {
    transform: translateY(0);
  }

  .google-icon {
    flex-shrink: 0;
  }

  .divider {
    display: flex;
    align-items: center;
    text-align: center;
    color: #6b7280;
    font-size: 0.875rem;
    margin: 1rem 0;
  }

  .divider::before,
  .divider::after {
    content: '';
    flex: 1;
    height: 1px;
    background: #e5e7eb;
  }

  .divider span {
    padding: 0 1rem;
    background: white;
  }

  .auth-status {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 0.5rem;
    text-align: center;
    font-size: 0.875rem;
  }

  .auth-status.success {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  .auth-status.error {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  .auth-status.loading {
    background: #dbeafe;
    color: #1e40af;
    border: 1px solid #93c5fd;
  }

  .hidden {
    display: none;
  }
</style>

<script>
    import { supabase } from '../lib/supabase';

    // Get DOM elements
  const form = document.getElementById('login-form') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');
  const successMessage = document.getElementById('success-message');
  const successText = document.getElementById('success-text');
  const googleSigninBtn = document.getElementById('google-signin-btn');

  // Show status message
  function showStatus(message, type = 'info') {
    if (successText) {
      successText.textContent = message;
    }
    successMessage?.classList.remove('hidden');
    successMessage?.classList.add(type);
    
    if (type === 'success') {
      setTimeout(() => {
        successMessage?.classList.add('hidden');
      }, 3000);
    }
  }

  // Handle Google authentication
  async function handleGoogleAuth() {
    try {
      showStatus('Connecting to Google...', 'loading');
      
      // Use the standard Supabase redirect URI
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });

      if (error) {
        console.error('Google auth error:', error);
        
        // Provide specific error messages and solutions
        let errorMessage = error.message;
        if (error.message.includes('Provider not found') || error.message.includes('not configured')) {
          errorMessage = 'Google provider not configured. Please contact administrator.';
        } else if (error.message.includes('redirect_uri_mismatch') || error.message.includes('mismatch')) {
          errorMessage = `Redirect URI mismatch. Please add this exact URI to Google Cloud Console: ${window.location.origin}/auth/callback`;
          console.error('URI Mismatch Details:', {
            currentOrigin: window.location.origin,
            expectedRedirect: `${window.location.origin}/auth/callback`,
            error: error.message,
            fixInstructions: 'Add the exact URI above to Google Cloud Console → APIs & Services → Credentials → OAuth 2.0 Client ID → Authorized redirect URIs'
          });
        } else if (error.message.includes('access_denied')) {
          errorMessage = 'Access denied. Please try again.';
        }
        
        showStatus(`Authentication failed: ${errorMessage}`, 'error');
        return;
      }

      showStatus('Redirecting to Google...', 'loading');
      
    } catch (err) {
      console.error('Google auth error:', err);
      showStatus(`Authentication failed: ${err.message}`, 'error');
    }
  }

  // Handle Google user data sync
  async function syncGoogleUser(user) {
    try {
      const { data, error } = await supabase.rpc('sync_google_user', {
        p_google_id: user.user_metadata.provider_id,
        p_email: user.email,
        p_name: user.user_metadata.full_name,
        p_picture: user.user_metadata.avatar_url,
        p_provider_id: user.user_metadata.provider_id
      });

      if (error) {
        console.error('Sync error:', error);
        return;
      }

      console.log('Google user synced:', data);
      return data;
    } catch (err) {
      console.error('Sync error:', err);
    }
  }

  // Event listener for Google sign-in button
  googleSigninBtn?.addEventListener('click', handleGoogleAuth);

  // Listen for auth state changes
  supabase.auth.onAuthStateChange(async (event, session) => {
    if (event === 'SIGNED_IN' && session?.user) {
      const user = session.user;
      
      if (user.app_metadata.provider === 'google') {
        showStatus('Syncing Google account...', 'loading');
        await syncGoogleUser(user);
        showStatus('Successfully signed in with Google!', 'success');
        
        // Redirect to dashboard
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 1500);
      }
    }
  });

    // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;

    // Basic validation
    if (!email || !password) {
      if (errorText) {
        errorText.textContent = 'Please fill in all fields.';
      }
      errorMessage?.classList.remove('hidden');
      return;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      if (errorText) {
        errorText.textContent = 'Please enter a valid email address.';
      }
      errorMessage?.classList.remove('hidden');
      return;
    }

    // Hide previous errors and success messages
    errorMessage?.classList.add('hidden');
      successMessage?.classList.remove('hidden');

    // Show loading state - center icon and hide text
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.innerHTML = `
      <svg class="animate-spin h-5 w-5 text-white mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    `;

    try {
        console.log('Attempting to sign in with Supabase:', email);
        
        // Sign in with Supabase directly
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });

        if (error) {
          console.error('Supabase sign in error:', error);
          throw error;
        }

        if (data.user) {
          console.log('User signed in successfully:', data.user.email);
          
          // Store session in sessionStorage for fallback
          sessionStorage.setItem('simple-auth-session', JSON.stringify({
            user: data.user,
            access_token: data.session?.access_token,
            timestamp: Date.now()
          }));
          
          // Dispatch login event
          window.dispatchEvent(new CustomEvent('user-logged-in', { detail: data.user }));
          
      if (successText) {
        successText.textContent = 'Welcome back! Signing you in...';
      }
      successMessage?.classList.remove('hidden');

          // Create basic user data immediately
          const userData = {
            id: data.user.id,
            email: data.user.email,
            full_name: data.user.email?.split('@')[0] || 'User',
            phone: 'Not set',
            company_name: 'Not set',
            role: 'customer'
          };

          // Trigger login event immediately
          window.dispatchEvent(new CustomEvent('user-logged-in', {
            detail: userData
          }));

          console.log('✅ User data sent to global auth manager:', userData);

          // Set a fallback redirect in case profile fetch takes too long
          const fallbackRedirect = setTimeout(() => {
            console.log('⚠️ Fallback redirect triggered - going to dashboard');
            window.location.href = '/dashboard';
          }, 3000);

          // Try to fetch user profile for role-based redirect (non-blocking)
          try {
            const { data: profileData, error: profileError } = await supabase
              .from('profiles')
              .select('role, status, full_name, phone, company_name')
              .eq('id', data.user.id)
              .single();
            
            let redirectUrl = '/dashboard';
            
            if (!profileError && profileData) {
              console.log('✅ User profile found:', profileData);
              
              // Role-based redirect - ADMIN ROLE TAKES PRIORITY OVER STATUS
              if (profileData.role === 'admin' || profileData.role === 'developer' || profileData.role === 'support') {
                redirectUrl = '/admin';
                console.log(`🎉 ADMIN USER DETECTED: ${profileData.full_name} (${profileData.role})`);
                console.log(`🚀 Redirecting to admin panel: ${redirectUrl}`);
              } else {
                // For non-admin users, check status (if status field exists)
                if (profileData.status && profileData.status === 'pending_verification') {
                  redirectUrl = '/dashboard?message=Please check your email to verify your account.&type=warning';
                  console.log(`⚠️ Customer user with pending verification: ${profileData.full_name}`);
                } else if (profileData.status && profileData.status === 'suspended') {
                  redirectUrl = '/dashboard?message=Your account has been suspended. Please contact support.&type=error';
                  console.log(`❌ Customer user suspended: ${profileData.full_name}`);
                } else {
                  redirectUrl = '/dashboard';
                  console.log(`✅ Customer user: ${profileData.full_name} (${profileData.role})`);
                }
              }
              
              console.log(`🎯 Final redirect URL: ${redirectUrl}`);
              
              // Update user data with profile info
              userData.full_name = profileData.full_name || userData.full_name;
              userData.phone = profileData.phone || userData.phone;
              userData.company_name = profileData.company_name || userData.company_name;
              userData.role = profileData.role || userData.role;
              
              // Trigger updated login event
              window.dispatchEvent(new CustomEvent('user-logged-in', {
                detail: userData
              }));
            }
            
            // Clear fallback and redirect after successful login (reduced timeout)
            clearTimeout(fallbackRedirect);
            setTimeout(() => {
              window.location.href = redirectUrl;
            }, 1000);
            
          } catch (profileError) {
            console.warn('Could not fetch user profile, using default dashboard:', profileError);
            
            // Clear fallback and redirect to dashboard immediately if profile fetch fails
            clearTimeout(fallbackRedirect);
            setTimeout(() => {
              window.location.href = '/dashboard';
            }, 1000);
          }
          
        } else {
          throw new Error('Sign in failed - no user data returned');
        }
      
    } catch (error: any) {
      console.error('Login error:', error);
      
      // Show error message
        let errorMessageText = 'An error occurred during sign in.';
        
        if (error.message) {
          // Handle specific Supabase error messages
          if (error.message.includes('Invalid login credentials')) {
            errorMessageText = 'Invalid email or password.';
          } else if (error.message.includes('Email not confirmed')) {
            errorMessageText = 'Please check your email and confirm your account before signing in.';
          } else if (error.message.includes('Too many requests')) {
            errorMessageText = 'Too many login attempts. Please try again later.';
          } else {
            errorMessageText = error.message;
          }
        }
        
      if (errorText) {
          errorText.textContent = errorMessageText;
      }
      errorMessage?.classList.remove('hidden');
      
      // Reset button
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    }
  });
</script>
</Layout>