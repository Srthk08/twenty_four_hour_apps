---
import Layout from '../layouts/Layout.astro';
import AuthGuard from '../components/AuthGuard.astro';
---

<Layout title="Support & Help Center - DevExpress">
  <AuthGuard>
    <div class="min-h-screen bg-gray-50 py-12">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="text-center mb-12">
          <h1 class="text-4xl font-bold text-gray-900 mb-4">Support & Help Center</h1>
          <p class="text-xl text-gray-600">Get help with your orders, technical issues, or general questions</p>
        </div>

        <!-- Support Options -->
        <div class="flex justify-center mb-12">
          <!-- Create Support Ticket -->
          <div class="bg-white rounded-xl shadow-lg p-8 max-w-md">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-4 text-center">Create Support Ticket</h3>
            <p class="text-gray-600 mb-6 text-center">Submit a new support ticket for technical issues, billing questions, or feature requests</p>
            <button 
              onclick="openTicketModal()"
              class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-3 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Create Ticket
            </button>
          </div>
          
          <!-- View My Tickets -->
          <div class="bg-white rounded-xl shadow-lg p-8 max-w-md ml-8">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-4 text-center">View My Tickets</h3>
            <p class="text-gray-600 mb-6 text-center">Check the status of your support tickets and view admin replies</p>
            <button 
              onclick="openMyTicketsModal()"
              class="w-full bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              View Tickets
            </button>
          </div>
        </div>

        <!-- FAQ Section -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Frequently Asked Questions</h2>
          <div class="space-y-4">
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">How long does it take to complete my order?</h3>
              <p class="text-gray-600">Most orders are completed within 1-3 business days depending on complexity. You'll receive updates throughout the process.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Can I modify my order after placing it?</h3>
              <p class="text-gray-600">Yes, you can request modifications within 24 hours of placing your order. Contact support for assistance.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">What payment methods do you accept?</h3>
              <p class="text-gray-600">We accept credit cards, UPI, and net banking. All payments are secure and processed through trusted payment gateways.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">How do I track my order progress?</h3>
              <p class="text-gray-600">You can track your order in real-time through your dashboard. We also send email updates at each stage.</p>
            </div>
            <div class="pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">What if I'm not satisfied with the result?</h3>
              <p class="text-gray-600">We offer unlimited revisions until you're completely satisfied. Your satisfaction is our top priority.</p>
            </div>
          </div>
        </div>

        <!-- Contact Information -->
        <div class="bg-white rounded-xl shadow-lg p-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Other Ways to Get Help</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="text-center">
              <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Email Support</h3>
              <p class="text-gray-600 text-sm">support@devexpress.com</p>
            </div>
            <div class="text-center">
              <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Phone Support</h3>
              <p class="text-gray-600 text-sm">+91 98765 43210</p>
            </div>
            <div class="text-center">
              <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Response Time</h3>
              <p class="text-gray-600 text-sm">Within 2-4 hours</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- My Tickets Modal -->
    <div id="myTicketsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
          <div class="flex items-center justify-between p-6 border-b border-gray-200">
            <h3 class="text-xl font-semibold text-gray-900">My Support Tickets</h3>
            <button onclick="closeMyTicketsModal()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="p-6">
            <div id="my-tickets-list" class="space-y-4">
              <!-- Tickets will be loaded here -->
            </div>
            
            <div id="no-tickets" class="hidden text-center py-8">
              <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <p class="text-gray-500">No support tickets found</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Support Ticket Modal -->
    <div id="ticketModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-xl font-semibold text-gray-900">Create Support Ticket</h3>
              <button onclick="closeTicketModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <form id="ticketForm" class="p-6 space-y-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Subject *</label>
              <input 
                type="text" 
                id="ticketSubject" 
                required
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Brief description of your issue"
              >
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
              <div 
                id="userEmailDisplay"
                class="w-full px-4 py-3 bg-gray-100 border-2 border-gray-300 rounded-lg text-gray-700"
              >
                Loading...
              </div>
              <p class="text-sm text-gray-500 mt-1">This ticket will be associated with your account email</p>
            </div>


            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
              <select 
                id="ticketPriority" 
                required
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select priority level</option>
                <option value="low">Low - General inquiry</option>
                <option value="medium">Medium - Minor issue</option>
                <option value="high">High - Important issue</option>
                <option value="urgent">Urgent - Critical issue</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Description *</label>
              <textarea 
                id="ticketDescription" 
                required
                rows="6"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Please provide detailed information about your issue, including steps to reproduce if applicable..."
              ></textarea>
            </div>

            <div class="flex justify-end space-x-4 pt-4">
              <button 
                type="button" 
                onclick="closeTicketModal()"
                class="px-6 py-3 border-2 border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button 
                type="submit"
                id="submitTicketBtn"
                class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
              >
                Submit Ticket
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </AuthGuard>
</Layout>

<script>
  // Get Supabase client from global window object
  let supabase = null;
  let supabaseReady = false;

  // Function to get Supabase client
  const getSupabaseClient = () => {
    if (window.supabase && typeof window.supabase.createClient === 'function') {
      return window.supabase;
    }
    return null;
  };

  // Initialize Supabase client with retry mechanism
  const initSupabase = () => {
    try {
      // First, try to use the global Supabase client from Layout.astro
      if (window.supabase && window.supabase.auth) {
        supabase = window.supabase;
        supabaseReady = true;
        console.log('✅ Using global Supabase client from Layout');
        return true;
      }
      
      // If global client not ready, try to create one
      if (window.supabase && typeof window.supabase.createClient === 'function') {
        const supabaseUrl = 'https://lmrrdcaavwwletcjcpqv.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtcnJkY2Fhdnd3bGV0Y2pjcHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MDQ0ODgsImV4cCI6MjA3MTA4MDQ4OH0.AU59Qfr6K9i880Gcn5y-3pjCf8PXsDIq4OI0-lPQVuQ';
        supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        supabaseReady = true;
        console.log('✅ Supabase client created directly');
        return true;
      }
      
      console.log('⏳ Supabase not ready yet');
      return false;
    } catch (error) {
      console.error('❌ Error initializing Supabase:', error);
      return false;
    }
  };

  // Wait for Supabase to be ready
  const waitForSupabase = async (maxRetries = 10, delay = 500) => {
    for (let i = 0; i < maxRetries; i++) {
      if (supabaseReady && supabase) {
        console.log('✅ Supabase is ready');
        return true;
      }
      
      console.log(`⏳ Waiting for Supabase... (${i + 1}/${maxRetries})`);
      await new Promise(resolve => setTimeout(resolve, delay));
      
      // Try to initialize again
      initSupabase();
    }
    
    console.error('❌ Supabase failed to initialize after retries');
    return false;
  };

  // Initialize Supabase immediately
  initSupabase();

  // Also try to initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', async () => {
    if (!supabaseReady) {
      initSupabase();
    }
    
    // Check authentication status and sync if needed
    await checkAndSyncAuthentication();
  });

  // Additional retry mechanism - try every 200ms for 5 seconds
  let retryCount = 0;
  const maxRetries = 25; // 25 * 200ms = 5 seconds
  const retryInterval = setInterval(() => {
    if (supabaseReady || retryCount >= maxRetries) {
      clearInterval(retryInterval);
      if (supabaseReady) {
        console.log('✅ Supabase ready after retries');
      } else {
        console.error('❌ Supabase failed to initialize after all retries');
      }
    } else {
      retryCount++;
      initSupabase();
    }
  }, 200);

  // Function to check and sync authentication
  async function checkAndSyncAuthentication() {
    try {
      // Wait for Supabase to be ready
      const isReady = await waitForSupabase();
      if (!isReady) {
        console.log('⏳ Supabase not ready yet, will retry...');
        setTimeout(checkAndSyncAuthentication, 1000);
        return;
      }

      // Check if user is authenticated through Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.log('❌ No Supabase authentication found');
        
        // Check if user is logged in through global auth manager
        const authManager = window.globalAuthManager || window.simpleAuthManager;
        if (authManager && authManager.getCurrentUser) {
          const globalUser = authManager.getCurrentUser();
          if (globalUser) {
            console.log('🔄 User found in global auth manager, attempting to sync with Supabase...');
            console.log('👤 Global user:', globalUser);
            
            // Show a message to the user
            showAuthSyncMessage(globalUser.email);
            return;
          }
        }
        
        console.log('ℹ️ No user found in any authentication system');
      } else {
        console.log('✅ User authenticated via Supabase:', user.email);
        
        // Update the UI to show the user's email
        updateUserDisplay(user.email);
      }
    } catch (error) {
      console.error('❌ Error checking authentication:', error);
    }
  }

  // Function to show authentication sync message
  function showAuthSyncMessage(email) {
    const supportContainer = document.querySelector('.min-h-screen');
    if (supportContainer) {
      const syncMessage = document.createElement('div');
      syncMessage.className = 'fixed top-4 right-4 bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded z-50 max-w-md';
      syncMessage.innerHTML = `
        <div class="flex items-start">
          <svg class="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          <div class="flex-1">
            <p class="font-medium">Authentication Sync Required</p>
            <p class="text-sm mt-1">You're logged in as <strong>${email}</strong> but need to re-authenticate to access support features.</p>
            <div class="mt-3 flex space-x-2">
              <button onclick="window.location.href='/login'" class="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700 transition-colors">
                Go to Login
              </button>
              <button onclick="this.parentElement.parentElement.parentElement.remove()" class="bg-gray-300 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-400 transition-colors">
                Dismiss
              </button>
            </div>
          </div>
        </div>
      `;
      supportContainer.appendChild(syncMessage);
      
      // Auto-remove after 15 seconds
      setTimeout(() => {
        if (syncMessage.parentNode) {
          syncMessage.parentNode.removeChild(syncMessage);
        }
      }, 15000);
    }
  }

  // Function to update user display
  function updateUserDisplay(email) {
    // Update any user display elements on the page
    const userElements = document.querySelectorAll('[data-user-email]');
    userElements.forEach(element => {
      element.textContent = email;
    });
    
    // Add user email to the page header if it exists
    const pageHeader = document.querySelector('h1');
    if (pageHeader && !pageHeader.querySelector('.user-email')) {
      const userEmailSpan = document.createElement('span');
      userEmailSpan.className = 'user-email text-sm font-normal text-gray-600 ml-2';
      userEmailSpan.textContent = `(Logged in as: ${email})`;
      pageHeader.appendChild(userEmailSpan);
    }
  }

  // Modal functions
  function openTicketModal() {
    const modal = document.getElementById('ticketModal');
    if (modal) {
      modal.classList.remove('hidden');
      
      // Show loading message while waiting for Supabase
      const emailDisplay = document.getElementById('userEmailDisplay');
      if (emailDisplay) {
        emailDisplay.textContent = 'Loading...';
      }
      
      // Try to pre-fill form
      prefillTicketForm();
    }
  }

  // Pre-fill ticket form with user data
  async function prefillTicketForm() {
    try {
      // Wait for Supabase to be ready
      const isReady = await waitForSupabase();
      if (!isReady) {
        console.error('❌ Supabase not ready, cannot pre-fill form');
        const emailDisplay = document.getElementById('userEmailDisplay');
        if (emailDisplay) {
          emailDisplay.textContent = 'Database not ready';
        }
        return;
      }

      if (!supabase || !supabase.auth) {
        console.error('❌ Supabase client or auth not available');
        const emailDisplay = document.getElementById('userEmailDisplay');
        if (emailDisplay) {
          emailDisplay.textContent = 'Authentication error';
        }
        return;
      }

      console.log('🔄 Getting user data...');
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.log('❌ No Supabase auth, checking global auth manager...');
        
        // Check if user is logged in through global auth manager
        const authManager = window.globalAuthManager || window.simpleAuthManager;
        if (authManager && authManager.getCurrentUser) {
          const globalUser = authManager.getCurrentUser();
          if (globalUser) {
            console.log('✅ User found in global auth manager:', globalUser.email);
            const emailDisplay = document.getElementById('userEmailDisplay');
            if (emailDisplay) {
              emailDisplay.textContent = globalUser.email || 'Not available';
              emailDisplay.className = 'text-yellow-600 font-medium'; // Make it yellow to indicate sync needed
            }
            return;
          }
        }
        
        console.log('❌ No user found in any auth system');
        const emailDisplay = document.getElementById('userEmailDisplay');
        if (emailDisplay) {
          emailDisplay.textContent = 'Not logged in';
        }
        return;
      }

      if (user) {
        console.log('✅ User found via Supabase:', user.email);
        const emailDisplay = document.getElementById('userEmailDisplay');
        if (emailDisplay) {
          emailDisplay.textContent = user.email || 'Not available';
          emailDisplay.className = 'text-green-600 font-medium'; // Make it green to indicate proper auth
        }
      }
    } catch (error) {
      console.error('❌ Error pre-filling form:', error);
      const emailDisplay = document.getElementById('userEmailDisplay');
      if (emailDisplay) {
        emailDisplay.textContent = 'Error loading email';
      }
    }
  }

  function closeTicketModal() {
    const modal = document.getElementById('ticketModal');
    const form = document.getElementById('ticketForm');
    if (modal) {
      modal.classList.add('hidden');
      if (form) {
        form.reset();
      }
    }
  }

  // My Tickets Modal functions
  async function openMyTicketsModal() {
    const modal = document.getElementById('myTicketsModal');
    if (modal) {
      modal.classList.remove('hidden');
      await loadMyTickets();
    }
  }

  function closeMyTicketsModal() {
    const modal = document.getElementById('myTicketsModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  async function loadMyTickets() {
    try {
      console.log('🔄 Loading tickets...');
      
      // Wait for Supabase to be ready
      const isReady = await waitForSupabase();
      if (!isReady) {
        console.error('❌ Supabase not ready');
        alert('Database connection error. Please refresh the page and try again.');
        return;
      }

      if (!supabase || !supabase.auth) {
        console.error('❌ Supabase client or auth not available');
        alert('Database connection error. Please refresh the page and try again.');
        return;
      }

      // Get current user from Supabase auth (required for RLS policies)
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error('❌ Supabase auth error:', authError);
        alert('Please login to view your tickets. You need to be authenticated through Supabase.');
        return;
      }

      console.log('👤 User authenticated via Supabase:', user.email);

      const { data: tickets, error } = await supabase
        .from('support_tickets')
        .select('*')
        .or(`user_email.eq.${user.email},customer_email.eq.${user.email}`)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Database error:', error);
        alert('Error loading tickets: ' + error.message);
        return;
      }

      console.log('✅ Tickets loaded:', tickets?.length || 0);

      const ticketsList = document.getElementById('my-tickets-list');
      const noTickets = document.getElementById('no-tickets');

      if (!tickets || tickets.length === 0) {
        ticketsList.classList.add('hidden');
        noTickets.classList.remove('hidden');
        return;
      }

      noTickets.classList.add('hidden');
      ticketsList.classList.remove('hidden');

      ticketsList.innerHTML = tickets.map(ticket => {
        // Parse admin replies
        let adminRepliesHtml = '';
        if (ticket.admin_replies) {
          let replies = [];
          
          // Handle different data structures
          if (Array.isArray(ticket.admin_replies)) {
            replies = ticket.admin_replies;
          } else if (typeof ticket.admin_replies === 'string') {
            try {
              replies = JSON.parse(ticket.admin_replies);
            } catch (e) {
              replies = [{ message: ticket.admin_replies, timestamp: new Date().toISOString() }];
            }
          } else if (typeof ticket.admin_replies === 'object') {
            replies = [ticket.admin_replies];
          }
          
          if (replies && replies.length > 0) {
            adminRepliesHtml = `
              <div class="mt-4 p-3 bg-blue-50 rounded-lg">
                <h5 class="font-semibold text-blue-900 mb-2">Admin Replies (${replies.length}):</h5>
                ${replies.map((reply, index) => `
                  <div class="mb-3 p-3 bg-white rounded border-l-4 border-blue-500">
                    <div class="flex items-start justify-between">
                      <div class="flex-1">
                        <p class="text-sm text-gray-700">${reply.message || reply.reply || reply || 'No message'}</p>
                        ${reply.admin_name ? `<p class="text-xs text-blue-600 mt-1">By: ${reply.admin_name}</p>` : ''}
                      </div>
                    </div>
                    <p class="text-xs text-gray-500 mt-2">
                      ${reply.timestamp ? new Date(reply.timestamp).toLocaleString() : 
                        reply.created_at ? new Date(reply.created_at).toLocaleString() : 
                        'Recently'}
                    </p>
                  </div>
                `).join('')}
              </div>
            `;
          } else {
            adminRepliesHtml = `
              <div class="mt-4 p-3 bg-gray-50 rounded-lg">
                <p class="text-sm text-gray-500">No admin replies yet</p>
              </div>
            `;
          }
        } else {
          adminRepliesHtml = `
            <div class="mt-4 p-3 bg-gray-50 rounded-lg">
              <p class="text-sm text-gray-500">No admin replies yet</p>
            </div>
          `;
        }

        return `
          <div class="border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between mb-3">
              <div class="flex items-center space-x-3">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getPriorityColor(ticket.priority)}">
                  ${ticket.priority}
                </span>
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(ticket.status)}">
                  ${ticket.status.replace('_', ' ')}
                </span>
              </div>
              <span class="text-sm text-gray-500">${new Date(ticket.created_at).toLocaleDateString()}</span>
            </div>
            
            <h4 class="font-semibold text-gray-900 mb-2">${ticket.subject}</h4>
            <p class="text-gray-600 text-sm mb-2">${ticket.description.length > 100 ? ticket.description.substring(0, 100) + '...' : ticket.description}</p>
            <p class="text-gray-500 text-xs mb-3">Email: ${ticket.user_email || ticket.customer_email || 'Not provided'}</p>
            <p class="text-gray-400 text-xs mb-3">Ticket #: ${ticket.ticket_number}</p>
            
            <div class="flex justify-between items-center mt-3">
              <button 
                onclick="viewTicketDetails('${ticket.id}')" 
                class="text-blue-600 hover:text-blue-800 text-sm font-medium"
              >
                View Details
              </button>
              <span class="text-xs text-gray-400">
                ${(() => {
                  let replyCount = 0;
                  if (ticket.admin_replies) {
                    if (Array.isArray(ticket.admin_replies)) {
                      replyCount = ticket.admin_replies.length;
                    } else if (typeof ticket.admin_replies === 'string') {
                      try {
                        const parsed = JSON.parse(ticket.admin_replies);
                        replyCount = Array.isArray(parsed) ? parsed.length : 1;
                      } catch (e) {
                        replyCount = 1;
                      }
                    } else if (typeof ticket.admin_replies === 'object') {
                      replyCount = 1;
                    }
                  }
                  return replyCount > 0 ? 
                    `${replyCount} admin ${replyCount === 1 ? 'reply' : 'replies'}` : 
                    'No admin replies yet';
                })()}
              </span>
            </div>
            
            <div id="ticket-details-${ticket.id}" class="hidden mt-4">
              ${adminRepliesHtml}
            </div>
          </div>
        `;
      }).join('');
    } catch (error) {
      alert('Error loading tickets: ' + error.message);
    }
  }

  function getPriorityColor(priority) {
    const colors = {
      'low': 'bg-green-100 text-green-800',
      'medium': 'bg-yellow-100 text-yellow-800',
      'high': 'bg-orange-100 text-orange-800',
      'urgent': 'bg-red-100 text-red-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  }

  function getStatusColor(status) {
    const colors = {
      'open': 'bg-blue-100 text-blue-800',
      'in_progress': 'bg-yellow-100 text-yellow-800',
      'resolved': 'bg-green-100 text-green-800',
      'closed': 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  // View ticket details function
  function viewTicketDetails(ticketId) {
    const detailsDiv = document.getElementById(`ticket-details-${ticketId}`);
    if (detailsDiv) {
      if (detailsDiv.classList.contains('hidden')) {
        detailsDiv.classList.remove('hidden');
        detailsDiv.style.display = 'block';
      } else {
        detailsDiv.classList.add('hidden');
        detailsDiv.style.display = 'none';
      }
    }
  }

  // Debug function to check Supabase status
  window.checkSupabaseStatus = () => {
    console.log('🔍 Supabase Status Check:');
    console.log('- supabaseReady:', supabaseReady);
    console.log('- supabase client:', !!supabase);
    console.log('- window.supabase:', !!window.supabase);
    console.log('- window.supabase.auth:', !!(window.supabase && window.supabase.auth));
    console.log('- window.supabase.createClient:', !!(window.supabase && typeof window.supabase.createClient === 'function'));
    
    if (supabase && supabase.auth) {
      console.log('✅ Supabase is ready and functional');
    } else {
      console.log('❌ Supabase is not ready');
    }
  };

  // Make function globally available
  window.openTicketModal = openTicketModal;
  window.openMyTicketsModal = openMyTicketsModal;
  window.closeTicketModal = closeTicketModal;
  window.closeMyTicketsModal = closeMyTicketsModal;
  window.viewTicketDetails = viewTicketDetails;

  // Set up form event listeners
  function setupFormEventListeners() {
    const ticketForm = document.getElementById('ticketForm');
    const submitButton = document.getElementById('submitTicketBtn');
    
    if (ticketForm && submitButton) {
      ticketForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Get form data
        const subject = document.getElementById('ticketSubject').value;
        const priority = document.getElementById('ticketPriority').value;
        const description = document.getElementById('ticketDescription').value;
        
        // Validate form
        if (!subject || !priority || !description) {
          alert('Please fill in all required fields');
          return;
        }
        
        // Show loading state
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = 'Creating Ticket...';
        
        try {
          console.log('🔄 Creating ticket...');
          
          // Wait for Supabase to be ready
          const isReady = await waitForSupabase();
          if (!isReady) {
            console.error('❌ Supabase not ready');
            alert('Database is still loading. Please wait a moment and try again, or refresh the page.');
            return;
          }

          if (!supabase || !supabase.auth) {
            console.error('❌ Supabase client or auth not available');
            alert('Database connection error. Please refresh the page and try again.');
            return;
          }

          // Additional check to ensure Supabase is fully initialized
          try {
            const { data: { session: testSession } } = await supabase.auth.getSession();
            console.log('🔍 Supabase connection test:', testSession ? 'Connected' : 'No session');
          } catch (testError) {
            console.error('❌ Supabase connection test failed:', testError);
            alert('Database connection test failed. Please refresh the page and try again.');
            return;
          }

          // Get current user from Supabase auth (required for RLS policies)
          const { data: { user }, error: authError } = await supabase.auth.getUser();
          
          if (authError || !user) {
            console.error('❌ Supabase auth error:', authError);
            console.log('🔍 Auth error details:', {
              error: authError,
              message: authError?.message,
              status: authError?.status
            });
            
            // Check if user is logged in through global auth manager
            const authManager = window.globalAuthManager || window.simpleAuthManager;
            if (authManager && authManager.getCurrentUser) {
              const globalUser = authManager.getCurrentUser();
              if (globalUser) {
                console.log('🔄 User found in global auth manager but not in Supabase');
                console.log('👤 Global user:', globalUser);
                
                // Redirect to login page to ensure proper Supabase authentication
                alert('Please login again to create a support ticket. Your session needs to be refreshed.');
                window.location.href = '/login';
                return;
              }
            }
            
            alert('Please login to create a support ticket. You need to be authenticated through Supabase.\n\nError: ' + (authError?.message || 'Unknown error'));
            return;
          }

          console.log('👤 User authenticated via Supabase:', user.email);
          console.log('👤 User ID:', user.id);
          console.log('👤 User metadata:', user.user_metadata);
          
          // Check if we have a valid session
          const { data: { session }, error: sessionError } = await supabase.auth.getSession();
          if (sessionError) {
            console.error('❌ Session error:', sessionError);
          }
          console.log('🔐 Current session:', session ? 'Valid' : 'No session');
          
          if (!session) {
            console.error('❌ No valid session found');
            alert('Your session has expired. Please login again to create a support ticket.');
            return;
          }
          
          // Prepare ticket data
          const ticketData = {
            ticket_number: `TKT-${Date.now()}`,
            user_id: user.id,
            user_email: user.email,
            customer_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'User',
            customer_email: user.email, // Add customer_email for compatibility
            subject: subject,
            description: description,
            priority: priority,
            status: 'open'
          };
          
          // Debug log
          console.log('📝 Creating ticket with data:', ticketData);
          
          // Create ticket
          const { data: ticket, error } = await supabase
            .from('support_tickets')
            .insert([ticketData])
            .select()
            .single();
          
          if (error) {
            console.error('❌ Database error:', error);
            alert('Error creating ticket: ' + error.message + '\n\nPlease check the console for more details.');
            return;
          }

          console.log('✅ Ticket created successfully:', ticket);
          
          alert(`Ticket created successfully! Ticket #${ticket.ticket_number}`);
          
          // Close modal and show success
          closeTicketModal();
          showSuccessMessage(`Ticket #${ticket.ticket_number} created successfully!`);
          
        } catch (error) {
          console.error('❌ Unexpected error:', error);
          alert('An unexpected error occurred. Please try again.\n\nError: ' + error.message);
        } finally {
          // Always reset button
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      });
    }
    
    // Close modal when clicking outside
    const ticketModal = document.getElementById('ticketModal');
    if (ticketModal) {
      ticketModal.addEventListener('click', function(e) {
        if (e.target === this) {
          closeTicketModal();
        }
      });
    }
  }

  // Show success message on page
  function showSuccessMessage(message) {
    const successDiv = document.createElement('div');
    successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    successDiv.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(successDiv);
    
    // Remove after 3 seconds
    setTimeout(() => {
      if (successDiv.parentNode) {
        successDiv.parentNode.removeChild(successDiv);
      }
    }, 3000);
  }

  // Make functions globally available for onclick handlers
  (window as any).openTicketModal = openTicketModal;
  (window as any).closeTicketModal = closeTicketModal;
  (window as any).openMyTicketsModal = openMyTicketsModal;
  (window as any).closeMyTicketsModal = closeMyTicketsModal;

  // Initialize page when DOM loads
  document.addEventListener('DOMContentLoaded', setupFormEventListeners);
</script>
