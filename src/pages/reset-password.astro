---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Reset Password">
  <div class="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Reset Your Password
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Enter your new password below to complete the reset process.
        </p>
        
        <!-- Email Display -->
        <div id="email-display" class="hidden text-center">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <p class="text-sm text-blue-800">
              <span class="font-medium">Resetting password for:</span>
              <span id="user-email" class="font-semibold text-blue-900"></span>
            </p>
          </div>
        </div>
      </div>

      <form id="reset-password-form" class="mt-8 space-y-6" autocomplete="off">
        <!-- Hidden fields to prevent autofill -->
        <input type="text" style="display:none" autocomplete="username">
        <input type="password" style="display:none" autocomplete="current-password">
        
        <!-- Email field (hidden by default, shown if no session) -->
        <div id="email-field" class="hidden">
          <label for="email" class="block text-sm font-medium text-gray-700">
            Email Address <span class="text-red-500">*</span>
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autocomplete="off"
            class="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm"
            placeholder="Enter your email address"
          />
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-700">
            New Password <span class="text-red-500">*</span>
          </label>
          <input
            id="password"
            name="password"
            type="password"
            required
            minlength="6"
            autocomplete="new-password"
            class="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm"
            placeholder="Enter your new password"
          />
        </div>

        <div>
          <label for="confirmPassword" class="block text-sm font-medium text-gray-700">
            Confirm New Password <span class="text-red-500">*</span>
          </label>
          <input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            required
            minlength="6"
            autocomplete="new-password"
            class="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm"
            placeholder="Confirm your new password"
          />
        </div>

        <!-- Success Message -->
        <div id="success-message" class="hidden rounded-md bg-green-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-green-800" id="success-text">
                Password updated successfully!
              </p>
            </div>
          </div>
        </div>

        <!-- Error Message -->
        <div id="error-message" class="hidden rounded-md bg-red-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-red-800" id="error-text">
                An error occurred
              </p>
            </div>
          </div>
        </div>

        <div>
          <button
            id="reset-password-btn"
            type="submit"
            class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span class="absolute left-0 inset-y-0 flex items-center pl-3">
              <svg class="h-5 w-5 text-primary-500 group-hover:text-primary-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
              </svg>
            </span>
            Update Password
          </button>
        </div>

        <div class="text-center space-y-2">
          <div>
            <a href="/login" class="font-medium text-primary-600 hover:text-primary-500 transition-colors duration-200">
              Back to Login
            </a>
          </div>
          <div>
            <a href="/forgot-password" class="text-sm text-gray-500 hover:text-gray-700 transition-colors duration-200">
              Request New Reset Link
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../lib/supabase';

  // Handle form submission
  const form = document.getElementById('reset-password-form') as HTMLFormElement;
  const resetBtn = document.getElementById('reset-password-btn') as HTMLButtonElement;

  // Wait for the page to load before setting session
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Check URL hash for Supabase auth tokens (this is how Supabase sends reset links)
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');
      const type = hashParams.get('type');

      // Also check URL search params as fallback
      const urlParams = new URLSearchParams(window.location.search);
      const searchAccessToken = urlParams.get('access_token');
      const searchRefreshToken = urlParams.get('refresh_token');
      const searchType = urlParams.get('type');

      const finalAccessToken = accessToken || searchAccessToken;
      const finalRefreshToken = refreshToken || searchRefreshToken;
      const finalType = type || searchType;

      console.log('Reset page loaded. Checking for tokens...');
      console.log('Hash params:', { accessToken, refreshToken, type });
      console.log('Search params:', { searchAccessToken, searchRefreshToken, searchType });
      console.log('Current URL:', window.location.href);

      // If we have tokens, set the session
      if (finalAccessToken && finalRefreshToken && finalType === 'recovery') {
        console.log('Setting session with tokens from URL');
        updateButtonText('Setting up session...');
        
        const { data, error } = await supabase.auth.setSession({
          access_token: finalAccessToken,
          refresh_token: finalRefreshToken
        });

        if (error) {
          console.error('Error setting session:', error);
          showError('Invalid or expired reset link. Please enter your email to request a new reset link.');
          updateButtonText('Request New Reset Link');
          showEmailField();
          return;
        }

        console.log('Session set successfully:', data);
        if (data.user) {
          showEmailDisplay(data.user.email);
          updateButtonText('Update Password');
          showSuccess(`Ready to reset password for ${data.user.email}`);
        } else {
          updateButtonText('Update Password');
        }
        enableResetButton();
      } else {
        // Check if user is already authenticated
        const { data: { session } } = await supabase.auth.getSession();
        if (session && session.user) {
          console.log('User already has a valid session');
          showEmailDisplay(session.user.email);
          updateButtonText('Update Password');
          showSuccess(`Ready to reset password for ${session.user.email}`);
          enableResetButton();
        } else {
          console.log('No session found, checking for auth state change...');
          updateButtonText('Waiting for session...');
          
          // Listen for auth state changes in case the session is being set
          supabase.auth.onAuthStateChange((event, session) => {
            console.log('Auth state changed:', event, session?.user?.email);
            if (event === 'SIGNED_IN' && session && session.user) {
              console.log('User signed in via auth state change');
              showEmailDisplay(session.user.email);
              updateButtonText('Update Password');
              showSuccess(`Ready to reset password for ${session.user.email}`);
              enableResetButton();
            } else if (event === 'SIGNED_OUT') {
              showError('Session expired. Please enter your email to request a new reset link.');
              updateButtonText('Request New Reset Link');
              showEmailField();
            }
          });

          // If no session after 5 seconds, show error and email field
          setTimeout(async () => {
            const { data: { session: currentSession } } = await supabase.auth.getSession();
            if (!currentSession) {
              showError('No valid session found. Please enter your email to request a new reset link.');
              updateButtonText('Request New Reset Link');
              showEmailField();
            }
          }, 5000);
        }
      }
    } catch (err) {
      console.error('Error in session setup:', err);
      showError('Error setting up password reset session. Please enter your email to request a new reset link.');
      updateButtonText('Request New Reset Link');
      showEmailField();
    }
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const confirmPassword = formData.get('confirmPassword') as string;

    // Check if we're in "request new reset link" mode
    const isRequestingNewLink = resetBtn.textContent?.includes('Request New Reset Link');
    
    if (isRequestingNewLink) {
      // Handle new reset link request
      if (!email) {
        showError('Please enter your email address');
        return;
      }

      // Show loading state
      const originalText = resetBtn.innerHTML;
      resetBtn.disabled = true;
      resetBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sending Reset Link...
      `;

      try {
        const { error } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/reset-password`
        });

        if (error) {
          console.error('Reset link error:', error);
          showError(error.message || 'Failed to send reset link');
          return;
        }

        showSuccess('Password reset link has been sent to your email address! Please check your inbox and click the reset link.');
        
        // Clear form
        form.reset();
        
      } catch (error: any) {
        console.error('Reset link error:', error);
        showError(error.message || 'Failed to send reset link');
      } finally {
        // Reset button state
        resetBtn.disabled = false;
        resetBtn.innerHTML = originalText;
      }
    } else {
      // Handle password update
      // Validate passwords
      if (!password || !confirmPassword) {
        showError('Please fill in all fields');
        return;
      }

      if (password.length < 6) {
        showError('Password must be at least 6 characters long');
        return;
      }

      if (password !== confirmPassword) {
        showError('Passwords do not match');
        return;
      }

      // Show loading state
      const originalText = resetBtn.innerHTML;
      resetBtn.disabled = true;
      resetBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Updating Password...
      `;

      try {
        // First check if we have a valid session
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError || !session) {
          console.error('No valid session:', sessionError);
          showError('No valid session found. Please request a new password reset.');
          return;
        }

        // Update password using Supabase
        const { error } = await supabase.auth.updateUser({
          password: password
        });

        if (error) {
          console.error('Password update error:', error);
          showError(error.message || 'Failed to update password');
          return;
        }

        // Show success message
        showSuccess('Password updated successfully! You can now log in with your new password.');
        
        // Clear form
        form.reset();
        
        // Redirect to login after 3 seconds
        setTimeout(() => {
          window.location.href = '/login';
        }, 3000);
        
      } catch (error: any) {
        console.error('Password update error:', error);
        showError(error.message || 'Failed to update password');
      } finally {
        // Reset button state
        resetBtn.disabled = false;
        resetBtn.innerHTML = originalText;
      }
    }
  });

  function showSuccess(message: string) {
    const successDiv = document.getElementById('success-message');
    const successText = document.getElementById('success-text');
    const errorDiv = document.getElementById('error-message');
    
    if (successDiv && successText) {
      successText.textContent = message;
      successDiv.classList.remove('hidden');
      if (errorDiv) errorDiv.classList.add('hidden');
    }
  }

  function showError(message: string) {
    const errorDiv = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const successDiv = document.getElementById('success-message');
    
    if (errorDiv && errorText) {
      errorText.textContent = message;
      errorDiv.classList.remove('hidden');
      if (successDiv) successDiv.classList.add('hidden');
    }
  }

  function enableResetButton() {
    const resetBtn = document.getElementById('reset-password-btn') as HTMLButtonElement;
    if (resetBtn) {
      resetBtn.disabled = false;
    }
  }

  function disableResetButton() {
    const resetBtn = document.getElementById('reset-password-btn') as HTMLButtonElement;
    if (resetBtn) {
      resetBtn.disabled = true;
    }
  }

  function updateButtonText(text: string) {
    const resetBtn = document.getElementById('reset-password-btn') as HTMLButtonElement;
    if (resetBtn) {
      resetBtn.textContent = text;
    }
  }

  function showEmailField() {
    const emailField = document.getElementById('email-field');
    if (emailField) {
      emailField.classList.remove('hidden');
    }
  }

  function hideEmailField() {
    const emailField = document.getElementById('email-field');
    if (emailField) {
      emailField.classList.add('hidden');
    }
  }

  function showEmailDisplay(email: string) {
    const emailDisplay = document.getElementById('email-display');
    const userEmailSpan = document.getElementById('user-email');
    if (emailDisplay && userEmailSpan) {
      userEmailSpan.textContent = email;
      emailDisplay.classList.remove('hidden');
    }
  }

  function hideEmailDisplay() {
    const emailDisplay = document.getElementById('email-display');
    if (emailDisplay) {
      emailDisplay.classList.add('hidden');
    }
  }

  // Initially disable the button until session is ready
  disableResetButton();
  updateButtonText('Setting up session...');
</script>