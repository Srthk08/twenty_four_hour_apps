import{s as n}from"./supabase.ASU9rNY7.js";class c{constructor(){}static getInstance(){return c.instance||(c.instance=new c),c.instance}async getUsers(){try{const{data:r,error:e}=await n.from("profiles_complete").select("*").order("created_at",{ascending:!1});return e?(console.error("Error fetching users:",e),[]):r||[]}catch(r){return console.error("Error in getUsers:",r),[]}}async getUserById(r){try{const{data:e,error:t}=await n.from("profiles_complete").select("*").eq("id",r).single();return t?(console.error("Error fetching user by ID:",t),null):e}catch(e){return console.error("Error in getUserById:",e),null}}async addUser(r){try{const{data:e,error:t}=await n.from("user_profiles").insert({email:r.email,full_name:r.full_name,phone:r.phone,company_name:r.company_name,role:r.role,status:r.status,username:r.username,avatar_url:r.avatar_url,bio:r.bio,website:r.website,location:r.location,timezone:r.timezone,language:r.language}).select().single();return t?(console.error("Error adding user:",t),null):e}catch(e){return console.error("Error in addUser:",e),null}}async updateUser(r,e){try{const{data:t,error:a}=await n.from("user_profiles").update({...e,updated_at:new Date().toISOString()}).eq("id",r).select().single();return a?(console.error("Error updating user:",a),null):t}catch(t){return console.error("Error in updateUser:",t),null}}async deleteUser(r){try{const{error:e}=await n.from("profiles").delete().eq("id",r);return e?(console.error("Error deleting user:",e),!1):!0}catch(e){return console.error("Error in deleteUser:",e),!1}}async getOrders(){try{const{data:r,error:e}=await n.from("orders").select(`
          *,
          profiles!inner(full_name, email)
        `).order("created_at",{ascending:!1});return e?(console.error("Error fetching orders:",e),[]):(r||[]).map(t=>({id:t.id,order_number:t.order_number,customer_name:t.user_profiles?.full_name||"Unknown",customer_email:t.user_profiles?.email||"Unknown",service_name:t.service_name||"Unknown Service",status:t.status,total_amount:t.total_amount,created_at:t.created_at,updated_at:t.updated_at}))}catch(r){return console.error("Error in getOrders:",r),[]}}async getOrderById(r){try{const{data:e,error:t}=await n.from("orders").select(`
          *,
          user_profiles!inner(full_name, email)
        `).eq("id",r).single();return t?(console.error("Error fetching order by ID:",t),null):{id:e.id,order_number:e.order_number,customer_name:e.user_profiles?.full_name||"Unknown",customer_email:e.user_profiles?.email||"Unknown",service_name:e.service_name||"Unknown Service",status:e.status,total_amount:e.total_amount,created_at:e.created_at,updated_at:e.updated_at}}catch(e){return console.error("Error in getOrderById:",e),null}}async addOrder(r){try{const{data:e,error:t}=await n.from("orders").insert({order_number:r.order_number,customer_name:r.customer_name,customer_email:r.customer_email,service_name:r.service_name,status:r.status,total_amount:r.total_amount}).select().single();return t?(console.error("Error adding order:",t),null):e}catch(e){return console.error("Error in addOrder:",e),null}}async updateOrder(r,e){try{const{data:t,error:a}=await n.from("orders").update({...e,updated_at:new Date().toISOString()}).eq("id",r).select().single();return a?(console.error("Error updating order:",a),null):t}catch(t){return console.error("Error in updateOrder:",t),null}}async getRevenue(){try{const{data:r,error:e}=await n.from("payments").select("*").order("created_at",{ascending:!1});return e?(console.error("Error fetching revenue:",e),[]):r||[]}catch(r){return console.error("Error in getRevenue:",r),[]}}async addRevenue(r){try{const{data:e,error:t}=await n.from("payments").insert({order_id:r.order_id,amount:r.amount,payment_method:r.payment_method,status:r.status}).select().single();return t?(console.error("Error adding revenue:",t),null):e}catch(e){return console.error("Error in addRevenue:",e),null}}async getRevenueByDateRange(r,e){try{const{data:t,error:a}=await n.from("payments").select("*").gte("created_at",r.toISOString()).lte("created_at",e.toISOString()).order("created_at",{ascending:!1});return a?(console.error("Error fetching revenue by date range:",a),[]):t||[]}catch(t){return console.error("Error in getRevenueByDateRange:",t),[]}}async getSupportTickets(){try{const{data:r,error:e}=await n.from("support_tickets").select("*").order("created_at",{ascending:!1});return e?(console.error("Error fetching support tickets:",e),[]):r||[]}catch(r){return console.error("Error in getSupportTickets:",r),[]}}async getTicketById(r){try{const{data:e,error:t}=await n.from("support_tickets").select("*").eq("id",r).single();return t?(console.error("Error fetching ticket by ID:",t),null):e}catch(e){return console.error("Error in getTicketById:",e),null}}async addTicket(r){try{const{data:e,error:t}=await n.from("support_tickets").insert({user_id:r.user_id,subject:r.subject,description:r.description,status:r.status,priority:r.priority}).select().single();return t?(console.error("Error adding ticket:",t),null):e}catch(e){return console.error("Error in addTicket:",e),null}}async updateTicket(r,e){try{const{data:t,error:a}=await n.from("support_tickets").update({...e,updated_at:new Date().toISOString()}).eq("id",r).select().single();return a?(console.error("Error updating ticket:",a),null):t}catch(t){return console.error("Error in updateTicket:",t),null}}async getStats(){try{const{data:r,error:e}=await n.from("admin_dashboard_data").select("*").single();if(e)return console.error("Error fetching dashboard data:",e),this.getDefaultStats();const[t,a,i]=await Promise.all([this.getOrders(),this.getRevenue(),this.getSupportTickets()]),s=a.reduce((o,l)=>o+(l.amount||0),0),u=a.filter(o=>new Date(o.created_at)>=new Date(Date.now()-30*24*60*60*1e3)).reduce((o,l)=>o+(l.amount||0),0),d=a.filter(o=>new Date(o.created_at)>=new Date(Date.now()-7*24*60*60*1e3)).reduce((o,l)=>o+(l.amount||0),0);return{totalUsers:r?.total_users||0,activeUsers:r?.active_users||0,totalOrders:t.length,pendingOrders:t.filter(o=>o.status==="pending").length,cartOrders:t.filter(o=>o.status==="cart").length,completedOrders:t.filter(o=>o.status==="completed").length,totalRevenue:s,monthlyRevenue:u,weeklyRevenue:d,openTickets:i.filter(o=>o.status==="open").length,highPriorityTickets:i.filter(o=>o.priority==="high").length,pendingPayments:a.filter(o=>o.status==="pending").length}}catch(r){return console.error("Error in getStats:",r),this.getDefaultStats()}}getDefaultStats(){return{totalUsers:0,activeUsers:0,totalOrders:0,pendingOrders:0,cartOrders:0,completedOrders:0,totalRevenue:0,monthlyRevenue:0,weeklyRevenue:0,openTickets:0,highPriorityTickets:0,pendingPayments:0}}async searchUsers(r){try{const{data:e,error:t}=await n.from("profiles_complete").select("*").or(`full_name.ilike.%${r}%,email.ilike.%${r}%,company_name.ilike.%${r}%`).order("created_at",{ascending:!1});return t?(console.error("Error searching users:",t),[]):e||[]}catch(e){return console.error("Error in searchUsers:",e),[]}}async searchOrders(r){try{const{data:e,error:t}=await n.from("orders").select(`
          *,
          user_profiles!inner(full_name, email)
        `).or(`order_number.ilike.%${r}%,user_profiles.full_name.ilike.%${r}%,user_profiles.email.ilike.%${r}%`).order("created_at",{ascending:!1});return t?(console.error("Error searching orders:",t),[]):(e||[]).map(a=>({id:a.id,order_number:a.order_number,customer_name:a.user_profiles?.full_name||"Unknown",customer_email:a.user_profiles?.email||"Unknown",service_name:a.service_name||"Unknown Service",status:a.status,total_amount:a.total_amount,created_at:a.created_at,updated_at:a.updated_at}))}catch(e){return console.error("Error in searchOrders:",e),[]}}async filterOrdersByStatus(r){try{if(!r)return await this.getOrders();const{data:e,error:t}=await n.from("orders").select(`
          *,
          user_profiles!inner(full_name, email)
        `).eq("status",r).order("created_at",{ascending:!1});return t?(console.error("Error filtering orders by status:",t),[]):(e||[]).map(a=>({id:a.id,order_number:a.order_number,customer_name:a.user_profiles?.full_name||"Unknown",customer_email:a.user_profiles?.email||"Unknown",service_name:a.service_name||"Unknown Service",status:a.status,total_amount:a.total_amount,created_at:a.created_at,updated_at:a.updated_at}))}catch(e){return console.error("Error in filterOrdersByStatus:",e),[]}}async filterOrdersByDateRange(r){try{const e=new Date;let t;switch(r){case"today":t=new Date(e.getFullYear(),e.getMonth(),e.getDate());break;case"week":t=new Date(e.getTime()-7*24*60*60*1e3);break;case"month":t=new Date(e.getTime()-30*24*60*60*1e3);break;case"quarter":t=new Date(e.getTime()-90*24*60*60*1e3);break;default:return await this.getOrders()}const{data:a,error:i}=await n.from("orders").select(`
          *,
          user_profiles!inner(full_name, email)
        `).gte("created_at",t.toISOString()).order("created_at",{ascending:!1});return i?(console.error("Error filtering orders by date range:",i),[]):(a||[]).map(s=>({id:s.id,order_number:s.order_number,customer_name:s.user_profiles?.full_name||"Unknown",customer_email:s.user_profiles?.email||"Unknown",service_name:s.service_name||"Unknown Service",status:s.status,total_amount:s.total_amount,created_at:s.created_at,updated_at:s.updated_at}))}catch(e){return console.error("Error in filterOrdersByDateRange:",e),[]}}exportOrdersToCSV(){return"CSV export functionality to be implemented"}async clearAllData(){try{const{error:r}=await n.rpc("clear_all_data");return r?(console.error("Error clearing all data:",r),!1):!0}catch(r){return console.error("Error in clearAllData:",r),!1}}async getAdminUsers(){try{const{data:r,error:e}=await n.rpc("get_admin_users");return e?(console.error("Error fetching admin users:",e),[]):r||[]}catch(r){return console.error("Error in getAdminUsers:",r),[]}}async logAdminAction(r,e,t,a){try{const{error:i}=await n.from("admin_audit_log").insert({action:r,target_type:e,target_id:t,details:a||{},ip_address:"127.0.0.1",user_agent:navigator.userAgent});return i?(console.error("Error logging admin action:",i),!1):!0}catch(i){return console.error("Error in logAdminAction:",i),!1}}}const _=c.getInstance();export{_ as a};
