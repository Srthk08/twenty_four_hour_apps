import{_ as p}from"./index.BFAZBQoJ.js";class a{constructor(){this.orders=[],this.supportTickets=[],this.payments=[],this.users=[],this.loadFromStorage(),this.syncWithSimpleAuth()}static getInstance(){return a.instance||(a.instance=new a),a.instance}loadFromStorage(){try{const t=localStorage.getItem("shared-orders"),e=localStorage.getItem("shared-tickets"),r=localStorage.getItem("shared-payments"),s=localStorage.getItem("shared-users");t&&(this.orders=JSON.parse(t)),e&&(this.supportTickets=JSON.parse(e)),r&&(this.payments=JSON.parse(r)),s&&(this.users=JSON.parse(s))}catch(t){console.error("Error loading shared data:",t)}}saveToStorage(){try{localStorage.setItem("shared-orders",JSON.stringify(this.orders)),localStorage.setItem("shared-tickets",JSON.stringify(this.supportTickets)),localStorage.setItem("shared-payments",JSON.stringify(this.payments)),localStorage.setItem("shared-users",JSON.stringify(this.users))}catch(t){console.error("Error saving shared data:",t)}}syncWithSimpleAuth(){try{const t=localStorage.getItem("simple-auth-users");t&&(JSON.parse(t).forEach(r=>{if(!this.users.find(i=>i.email===r.email)){const i={id:r.id||`user-${Date.now()}`,email:r.email,fullName:r.fullName||"User",phone:r.phone,companyName:r.companyName,role:"customer",status:"active",avatarUrl:r.avatarUrl,lastLoginAt:r.lastLoginAt,loginCount:r.loginCount||1,createdAt:r.createdAt||new Date().toISOString(),updatedAt:new Date().toISOString()};this.users.push(i)}}),this.saveToStorage())}catch(t){console.error("Error syncing with simple-auth:",t)}}createOrder(t){const e={...t,id:`order-${Date.now()}`,orderNumber:`ORD-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),timeline:[{id:`timeline-${Date.now()}`,status:t.status,message:"Order created",timestamp:new Date().toISOString(),updatedBy:"system"}]};return this.orders.push(e),this.saveToStorage(),e}updateOrderStatus(t,e,r){const s=this.orders.find(i=>i.id===t);return s?(s.status=e,s.updatedAt=new Date().toISOString(),s.timeline.push({id:`timeline-${Date.now()}`,status:e,message:r,timestamp:new Date().toISOString(),updatedBy:"admin"}),this.saveToStorage(),!0):!1}getOrders(){return[...this.orders]}getOrdersByStatus(t){return this.orders.filter(e=>e.status===t)}getOrdersByUser(t){return this.orders.filter(e=>e.userId===t)}createSupportTicket(t){const e={...t,id:`ticket-${Date.now()}`,ticketNumber:`TKT-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return this.supportTickets.push(e),this.saveToStorage(),e}updateTicketStatus(t,e,r){const s=this.supportTickets.find(i=>i.id===t);return s?(s.status=e,s.updatedAt=new Date().toISOString(),r&&(s.lastResponseAt=new Date().toISOString()),this.saveToStorage(),!0):!1}updateTicket(t,e){const r=this.supportTickets.find(s=>s.id===t);return r?(e.status&&(r.status=e.status),e.adminReply&&(r.adminReplies||(r.adminReplies=[]),r.adminReplies.push(e.adminReply),r.lastResponseAt=new Date().toISOString(),this.sendTicketUpdateNotification(r,e.adminReply,e.status)),r.updatedAt=new Date().toISOString(),this.saveToStorage(),!0):!1}sendTicketUpdateNotification(t,e,r){try{const s={to:t.customerEmail,subject:`Update on Your Support Ticket #${t.ticketNumber}`,message:this.createNotificationMessage(t,e,r),timestamp:new Date().toISOString(),ticketId:t.id,status:r||t.status};this.storeNotification(s),this.showBrowserNotification(t,e,r),this.sendRealEmailNotification(t,e,r),console.log(`Notification sent to ${t.customerEmail} for ticket #${t.ticketNumber}`)}catch(s){console.error("Error sending notification:",s)}}async sendRealEmailNotification(t,e,r){try{const{sendEmail:s,emailTemplates:i}=await p(async()=>{const{sendEmail:o,emailTemplates:n}=await import("./email-config.Bt3IG4FW.js");return{sendEmail:o,emailTemplates:n}},[]),l=i.supportTicketUpdate;let c=l.subject,u=l.body;const d={"{{ticketNumber}}":t.ticketNumber,"{{customerName}}":t.customerName,"{{subject}}":t.subject,"{{status}}":r||t.status,"{{adminReply}}":e.message,"{{replyDate}}":new Date(e.timestamp).toLocaleString(),"{{adminName}}":e.adminName};Object.entries(d).forEach(([o,n])=>{c=c.replace(o,n),u=u.replace(o,n)});const m=await s(t.customerEmail,c,u);console.log(m?"Real email sent successfully via configured email service":"Email service not configured, falling back to localStorage notifications")}catch(s){console.error("Error sending real email:",s)}}createNotificationMessage(t,e,r){let s=`Hello ${t.customerName},

`;return r&&r!==t.status&&(s+=`Your support ticket #${t.ticketNumber} status has been updated to: ${r.replace("_"," ").toUpperCase()}

`),s+=`Admin Reply:
${e.message}

`,s+=`Ticket Details:
`,s+=`Subject: ${t.subject}
`,s+=`Priority: ${t.priority}
`,s+=`Status: ${r||t.status}

`,s+=`You can view the full details and reply in your support dashboard.

`,s+=`Best regards,
DevExpress Support Team`,s}storeNotification(t){try{const e=JSON.parse(localStorage.getItem("user-notifications")||"[]");e.unshift(t),e.length>50&&e.splice(50),localStorage.setItem("user-notifications",JSON.stringify(e))}catch(e){console.error("Error storing notification:",e)}}showBrowserNotification(t,e,r){if("Notification"in window&&Notification.permission==="granted"){const s=`Ticket #${t.ticketNumber} Updated`,i=`Admin replied: ${e.message.substring(0,100)}${e.message.length>100?"...":""}`;new Notification(s,{body:i,icon:"/favicon.ico",tag:t.id})}}getUserNotifications(t){try{return JSON.parse(localStorage.getItem("user-notifications")||"[]").filter(r=>r.to===t)}catch(e){return console.error("Error getting notifications:",e),[]}}markNotificationAsRead(t){try{const e=JSON.parse(localStorage.getItem("user-notifications")||"[]"),r=e.find(s=>s.timestamp===t);r&&(r.read=!0,localStorage.setItem("user-notifications",JSON.stringify(e)))}catch(e){console.error("Error marking notification as read:",e)}}getTicketsByUser(t){return this.supportTickets.filter(e=>e.customerEmail===t)}getSupportTickets(){return[...this.supportTickets]}getTicketsByStatus(t){return this.supportTickets.filter(e=>e.status===t)}createPayment(t){const e={...t,id:`payment-${Date.now()}`,createdAt:new Date().toISOString()};return this.payments.push(e),this.saveToStorage(),e}updatePaymentStatus(t,e){const r=this.payments.find(s=>s.id===t);return r?(r.status=e,this.saveToStorage(),!0):!1}getPayments(){return[...this.payments]}getPaymentsByStatus(t){return this.payments.filter(e=>e.status===t)}createUser(t){const e={...t,id:`user-${Date.now()}`,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return this.users.push(e),this.saveToStorage(),e}updateUser(t,e){const r=this.users.find(s=>s.id===t);return r?(Object.assign(r,e),r.updatedAt=new Date().toISOString(),this.saveToStorage(),!0):!1}getUsers(){return[...this.users]}getUserById(t){return this.users.find(e=>e.id===t)}getUserByEmail(t){return this.users.find(e=>e.email===t)}deleteUser(t){const e=this.users.findIndex(r=>r.id===t);return e!==-1?(this.users.splice(e,1),this.saveToStorage(),!0):!1}getStats(){const t=new Date,e=new Date(t.getTime()-7*24*60*60*1e3),r=new Date(t.getTime()-30*24*60*60*1e3);return{totalUsers:this.users.length,activeUsers:this.users.filter(s=>s.status==="active").length,totalOrders:this.orders.length,pendingOrders:this.orders.filter(s=>s.status==="pending").length,cartOrders:this.orders.filter(s=>s.status==="cart").length,completedOrders:this.orders.filter(s=>s.status==="completed").length,totalRevenue:this.payments.filter(s=>s.status==="completed").reduce((s,i)=>s+i.amount,0),monthlyRevenue:this.payments.filter(s=>s.status==="completed"&&new Date(s.createdAt)>=r).reduce((s,i)=>s+i.amount,0),weeklyRevenue:this.payments.filter(s=>s.status==="completed"&&new Date(s.createdAt)>=e).reduce((s,i)=>s+i.amount,0),openTickets:this.supportTickets.filter(s=>s.status==="open").length,highPriorityTickets:this.supportTickets.filter(s=>s.priority==="high"||s.priority==="urgent").length,pendingPayments:this.payments.filter(s=>s.status==="pending").length}}clearAllData(){this.orders=[],this.supportTickets=[],this.payments=[],this.users=[],this.saveToStorage()}exportOrdersToCSV(){if(this.orders.length===0)return"No orders to export";const t=["Order ID","Customer","Service","Status","Payment Status","Amount","Date"],e=this.orders.map(r=>[r.orderNumber,r.customerName,r.serviceName,r.status,r.paymentStatus,r.amount,new Date(r.createdAt).toLocaleDateString()]);return[t,...e].map(r=>r.join(",")).join(`
`)}}const h=a.getInstance();export{h as s};
